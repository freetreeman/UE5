//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/rpc/context/attribute_context.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_metadata_getter(int index);
namespace google {
namespace rpc {
namespace context {
class AttributeContext;
struct AttributeContextDefaultTypeInternal;
extern AttributeContextDefaultTypeInternal _AttributeContext_default_instance_;
class AttributeContext_Api;
struct AttributeContext_ApiDefaultTypeInternal;
extern AttributeContext_ApiDefaultTypeInternal _AttributeContext_Api_default_instance_;
class AttributeContext_Auth;
struct AttributeContext_AuthDefaultTypeInternal;
extern AttributeContext_AuthDefaultTypeInternal _AttributeContext_Auth_default_instance_;
class AttributeContext_Peer;
struct AttributeContext_PeerDefaultTypeInternal;
extern AttributeContext_PeerDefaultTypeInternal _AttributeContext_Peer_default_instance_;
class AttributeContext_Peer_LabelsEntry_DoNotUse;
struct AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_;
class AttributeContext_Request;
struct AttributeContext_RequestDefaultTypeInternal;
extern AttributeContext_RequestDefaultTypeInternal _AttributeContext_Request_default_instance_;
class AttributeContext_Request_HeadersEntry_DoNotUse;
struct AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_;
class AttributeContext_Resource;
struct AttributeContext_ResourceDefaultTypeInternal;
extern AttributeContext_ResourceDefaultTypeInternal _AttributeContext_Resource_default_instance_;
class AttributeContext_Resource_LabelsEntry_DoNotUse;
struct AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_;
class AttributeContext_Response;
struct AttributeContext_ResponseDefaultTypeInternal;
extern AttributeContext_ResponseDefaultTypeInternal _AttributeContext_Response_default_instance_;
class AttributeContext_Response_HeadersEntry_DoNotUse;
struct AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_;
}  // namespace context
}  // namespace rpc
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::rpc::context::AttributeContext* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext>(Arena*);
template<> ::google::rpc::context::AttributeContext_Api* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Api>(Arena*);
template<> ::google::rpc::context::AttributeContext_Auth* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Auth>(Arena*);
template<> ::google::rpc::context::AttributeContext_Peer* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(Arena*);
template<> ::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::rpc::context::AttributeContext_Request* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Request>(Arena*);
template<> ::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse>(Arena*);
template<> ::google::rpc::context::AttributeContext_Resource* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Resource>(Arena*);
template<> ::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::rpc::context::AttributeContext_Response* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Response>(Arena*);
template<> ::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace rpc {
namespace context {

// ===================================================================

class AttributeContext_Peer_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AttributeContext_Peer_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AttributeContext_Peer_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AttributeContext_Peer_LabelsEntry_DoNotUse();
  explicit constexpr AttributeContext_Peer_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AttributeContext_Peer_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AttributeContext_Peer_LabelsEntry_DoNotUse& other);
  static const AttributeContext_Peer_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Peer_LabelsEntry_DoNotUse*>(&_AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Peer.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Peer.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto);
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class AttributeContext_Peer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Peer) */ {
 public:
  inline AttributeContext_Peer() : AttributeContext_Peer(nullptr) {}
  virtual ~AttributeContext_Peer();
  explicit constexpr AttributeContext_Peer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeContext_Peer(const AttributeContext_Peer& from);
  AttributeContext_Peer(AttributeContext_Peer&& from) noexcept
    : AttributeContext_Peer() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Peer& operator=(const AttributeContext_Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Peer& operator=(AttributeContext_Peer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeContext_Peer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Peer* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Peer*>(
               &_AttributeContext_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttributeContext_Peer& a, AttributeContext_Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Peer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeContext_Peer* New() const final {
    return CreateMaybeMessage<AttributeContext_Peer>(nullptr);
  }

  AttributeContext_Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeContext_Peer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeContext_Peer& from);
  void MergeFrom(const AttributeContext_Peer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeContext_Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.context.AttributeContext.Peer";
  }
  protected:
  explicit AttributeContext_Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 6,
    kIpFieldNumber = 1,
    kPrincipalFieldNumber = 7,
    kRegionCodeFieldNumber = 8,
    kPortFieldNumber = 2,
  };
  // map<string, string> labels = 6;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string principal = 7;
  void clear_principal();
  const std::string& principal() const;
  void set_principal(const std::string& value);
  void set_principal(std::string&& value);
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  std::string* mutable_principal();
  std::string* release_principal();
  void set_allocated_principal(std::string* principal);
  private:
  const std::string& _internal_principal() const;
  void _internal_set_principal(const std::string& value);
  std::string* _internal_mutable_principal();
  public:

  // string region_code = 8;
  void clear_region_code();
  const std::string& region_code() const;
  void set_region_code(const std::string& value);
  void set_region_code(std::string&& value);
  void set_region_code(const char* value);
  void set_region_code(const char* value, size_t size);
  std::string* mutable_region_code();
  std::string* release_region_code();
  void set_allocated_region_code(std::string* region_code);
  private:
  const std::string& _internal_region_code() const;
  void _internal_set_region_code(const std::string& value);
  std::string* _internal_mutable_region_code();
  public:

  // int64 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int64 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AttributeContext_Peer_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr principal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Api PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Api) */ {
 public:
  inline AttributeContext_Api() : AttributeContext_Api(nullptr) {}
  virtual ~AttributeContext_Api();
  explicit constexpr AttributeContext_Api(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeContext_Api(const AttributeContext_Api& from);
  AttributeContext_Api(AttributeContext_Api&& from) noexcept
    : AttributeContext_Api() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Api& operator=(const AttributeContext_Api& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Api& operator=(AttributeContext_Api&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeContext_Api& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Api* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Api*>(
               &_AttributeContext_Api_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AttributeContext_Api& a, AttributeContext_Api& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Api* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Api* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeContext_Api* New() const final {
    return CreateMaybeMessage<AttributeContext_Api>(nullptr);
  }

  AttributeContext_Api* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeContext_Api>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeContext_Api& from);
  void MergeFrom(const AttributeContext_Api& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeContext_Api* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.context.AttributeContext.Api";
  }
  protected:
  explicit AttributeContext_Api(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kOperationFieldNumber = 2,
    kProtocolFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string operation = 2;
  void clear_operation();
  const std::string& operation() const;
  void set_operation(const std::string& value);
  void set_operation(std::string&& value);
  void set_operation(const char* value);
  void set_operation(const char* value, size_t size);
  std::string* mutable_operation();
  std::string* release_operation();
  void set_allocated_operation(std::string* operation);
  private:
  const std::string& _internal_operation() const;
  void _internal_set_operation(const std::string& value);
  std::string* _internal_mutable_operation();
  public:

  // string protocol = 3;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Api)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Auth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Auth) */ {
 public:
  inline AttributeContext_Auth() : AttributeContext_Auth(nullptr) {}
  virtual ~AttributeContext_Auth();
  explicit constexpr AttributeContext_Auth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeContext_Auth(const AttributeContext_Auth& from);
  AttributeContext_Auth(AttributeContext_Auth&& from) noexcept
    : AttributeContext_Auth() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Auth& operator=(const AttributeContext_Auth& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Auth& operator=(AttributeContext_Auth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeContext_Auth& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Auth* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Auth*>(
               &_AttributeContext_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AttributeContext_Auth& a, AttributeContext_Auth& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Auth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Auth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeContext_Auth* New() const final {
    return CreateMaybeMessage<AttributeContext_Auth>(nullptr);
  }

  AttributeContext_Auth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeContext_Auth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeContext_Auth& from);
  void MergeFrom(const AttributeContext_Auth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeContext_Auth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.context.AttributeContext.Auth";
  }
  protected:
  explicit AttributeContext_Auth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudiencesFieldNumber = 2,
    kAccessLevelsFieldNumber = 5,
    kPrincipalFieldNumber = 1,
    kPresenterFieldNumber = 3,
    kClaimsFieldNumber = 4,
  };
  // repeated string audiences = 2;
  int audiences_size() const;
  private:
  int _internal_audiences_size() const;
  public:
  void clear_audiences();
  const std::string& audiences(int index) const;
  std::string* mutable_audiences(int index);
  void set_audiences(int index, const std::string& value);
  void set_audiences(int index, std::string&& value);
  void set_audiences(int index, const char* value);
  void set_audiences(int index, const char* value, size_t size);
  std::string* add_audiences();
  void add_audiences(const std::string& value);
  void add_audiences(std::string&& value);
  void add_audiences(const char* value);
  void add_audiences(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& audiences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_audiences();
  private:
  const std::string& _internal_audiences(int index) const;
  std::string* _internal_add_audiences();
  public:

  // repeated string access_levels = 5;
  int access_levels_size() const;
  private:
  int _internal_access_levels_size() const;
  public:
  void clear_access_levels();
  const std::string& access_levels(int index) const;
  std::string* mutable_access_levels(int index);
  void set_access_levels(int index, const std::string& value);
  void set_access_levels(int index, std::string&& value);
  void set_access_levels(int index, const char* value);
  void set_access_levels(int index, const char* value, size_t size);
  std::string* add_access_levels();
  void add_access_levels(const std::string& value);
  void add_access_levels(std::string&& value);
  void add_access_levels(const char* value);
  void add_access_levels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& access_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_access_levels();
  private:
  const std::string& _internal_access_levels(int index) const;
  std::string* _internal_add_access_levels();
  public:

  // string principal = 1;
  void clear_principal();
  const std::string& principal() const;
  void set_principal(const std::string& value);
  void set_principal(std::string&& value);
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  std::string* mutable_principal();
  std::string* release_principal();
  void set_allocated_principal(std::string* principal);
  private:
  const std::string& _internal_principal() const;
  void _internal_set_principal(const std::string& value);
  std::string* _internal_mutable_principal();
  public:

  // string presenter = 3;
  void clear_presenter();
  const std::string& presenter() const;
  void set_presenter(const std::string& value);
  void set_presenter(std::string&& value);
  void set_presenter(const char* value);
  void set_presenter(const char* value, size_t size);
  std::string* mutable_presenter();
  std::string* release_presenter();
  void set_allocated_presenter(std::string* presenter);
  private:
  const std::string& _internal_presenter() const;
  void _internal_set_presenter(const std::string& value);
  std::string* _internal_mutable_presenter();
  public:

  // .google.protobuf.Struct claims = 4;
  bool has_claims() const;
  private:
  bool _internal_has_claims() const;
  public:
  void clear_claims();
  const PROTOBUF_NAMESPACE_ID::Struct& claims() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_claims();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_claims();
  void set_allocated_claims(PROTOBUF_NAMESPACE_ID::Struct* claims);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_claims() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_claims();
  public:
  void unsafe_arena_set_allocated_claims(
      PROTOBUF_NAMESPACE_ID::Struct* claims);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_claims();

  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Auth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> audiences_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> access_levels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr principal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr presenter_;
  PROTOBUF_NAMESPACE_ID::Struct* claims_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Request_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AttributeContext_Request_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AttributeContext_Request_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AttributeContext_Request_HeadersEntry_DoNotUse();
  explicit constexpr AttributeContext_Request_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AttributeContext_Request_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AttributeContext_Request_HeadersEntry_DoNotUse& other);
  static const AttributeContext_Request_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Request_HeadersEntry_DoNotUse*>(&_AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Request.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Request.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto);
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class AttributeContext_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Request) */ {
 public:
  inline AttributeContext_Request() : AttributeContext_Request(nullptr) {}
  virtual ~AttributeContext_Request();
  explicit constexpr AttributeContext_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeContext_Request(const AttributeContext_Request& from);
  AttributeContext_Request(AttributeContext_Request&& from) noexcept
    : AttributeContext_Request() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Request& operator=(const AttributeContext_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Request& operator=(AttributeContext_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeContext_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Request* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Request*>(
               &_AttributeContext_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AttributeContext_Request& a, AttributeContext_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeContext_Request* New() const final {
    return CreateMaybeMessage<AttributeContext_Request>(nullptr);
  }

  AttributeContext_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeContext_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeContext_Request& from);
  void MergeFrom(const AttributeContext_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeContext_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.context.AttributeContext.Request";
  }
  protected:
  explicit AttributeContext_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kIdFieldNumber = 1,
    kMethodFieldNumber = 2,
    kPathFieldNumber = 4,
    kHostFieldNumber = 5,
    kSchemeFieldNumber = 6,
    kQueryFieldNumber = 7,
    kProtocolFieldNumber = 11,
    kReasonFieldNumber = 12,
    kTimeFieldNumber = 9,
    kAuthFieldNumber = 13,
    kSizeFieldNumber = 10,
  };
  // map<string, string> headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string method = 2;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string path = 4;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string host = 5;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string scheme = 6;
  void clear_scheme();
  const std::string& scheme() const;
  void set_scheme(const std::string& value);
  void set_scheme(std::string&& value);
  void set_scheme(const char* value);
  void set_scheme(const char* value, size_t size);
  std::string* mutable_scheme();
  std::string* release_scheme();
  void set_allocated_scheme(std::string* scheme);
  private:
  const std::string& _internal_scheme() const;
  void _internal_set_scheme(const std::string& value);
  std::string* _internal_mutable_scheme();
  public:

  // string query = 7;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string protocol = 11;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // string reason = 12;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .google.protobuf.Timestamp time = 9;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .google.rpc.context.AttributeContext.Auth auth = 13;
  bool has_auth() const;
  private:
  bool _internal_has_auth() const;
  public:
  void clear_auth();
  const ::google::rpc::context::AttributeContext_Auth& auth() const;
  ::google::rpc::context::AttributeContext_Auth* release_auth();
  ::google::rpc::context::AttributeContext_Auth* mutable_auth();
  void set_allocated_auth(::google::rpc::context::AttributeContext_Auth* auth);
  private:
  const ::google::rpc::context::AttributeContext_Auth& _internal_auth() const;
  ::google::rpc::context::AttributeContext_Auth* _internal_mutable_auth();
  public:
  void unsafe_arena_set_allocated_auth(
      ::google::rpc::context::AttributeContext_Auth* auth);
  ::google::rpc::context::AttributeContext_Auth* unsafe_arena_release_auth();

  // int64 size = 10;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AttributeContext_Request_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheme_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::google::rpc::context::AttributeContext_Auth* auth_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Response_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AttributeContext_Response_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AttributeContext_Response_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AttributeContext_Response_HeadersEntry_DoNotUse();
  explicit constexpr AttributeContext_Response_HeadersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AttributeContext_Response_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AttributeContext_Response_HeadersEntry_DoNotUse& other);
  static const AttributeContext_Response_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Response_HeadersEntry_DoNotUse*>(&_AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Response.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Response.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto);
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class AttributeContext_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Response) */ {
 public:
  inline AttributeContext_Response() : AttributeContext_Response(nullptr) {}
  virtual ~AttributeContext_Response();
  explicit constexpr AttributeContext_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeContext_Response(const AttributeContext_Response& from);
  AttributeContext_Response(AttributeContext_Response&& from) noexcept
    : AttributeContext_Response() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Response& operator=(const AttributeContext_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Response& operator=(AttributeContext_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeContext_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Response* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Response*>(
               &_AttributeContext_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AttributeContext_Response& a, AttributeContext_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeContext_Response* New() const final {
    return CreateMaybeMessage<AttributeContext_Response>(nullptr);
  }

  AttributeContext_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeContext_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeContext_Response& from);
  void MergeFrom(const AttributeContext_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeContext_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.context.AttributeContext.Response";
  }
  protected:
  explicit AttributeContext_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kTimeFieldNumber = 4,
    kCodeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // map<string, string> headers = 3;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // int64 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AttributeContext_Response_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> headers_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::PROTOBUF_NAMESPACE_ID::int64 code_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Resource_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AttributeContext_Resource_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AttributeContext_Resource_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AttributeContext_Resource_LabelsEntry_DoNotUse();
  explicit constexpr AttributeContext_Resource_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AttributeContext_Resource_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AttributeContext_Resource_LabelsEntry_DoNotUse& other);
  static const AttributeContext_Resource_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AttributeContext_Resource_LabelsEntry_DoNotUse*>(&_AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto);
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class AttributeContext_Resource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Resource) */ {
 public:
  inline AttributeContext_Resource() : AttributeContext_Resource(nullptr) {}
  virtual ~AttributeContext_Resource();
  explicit constexpr AttributeContext_Resource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeContext_Resource(const AttributeContext_Resource& from);
  AttributeContext_Resource(AttributeContext_Resource&& from) noexcept
    : AttributeContext_Resource() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Resource& operator=(const AttributeContext_Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Resource& operator=(AttributeContext_Resource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeContext_Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Resource* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Resource*>(
               &_AttributeContext_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AttributeContext_Resource& a, AttributeContext_Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Resource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeContext_Resource* New() const final {
    return CreateMaybeMessage<AttributeContext_Resource>(nullptr);
  }

  AttributeContext_Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeContext_Resource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeContext_Resource& from);
  void MergeFrom(const AttributeContext_Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeContext_Resource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.context.AttributeContext.Resource";
  }
  protected:
  explicit AttributeContext_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kServiceFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // map<string, string> labels = 4;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string service = 1;
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AttributeContext_Resource_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext) */ {
 public:
  inline AttributeContext() : AttributeContext(nullptr) {}
  virtual ~AttributeContext();
  explicit constexpr AttributeContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeContext(const AttributeContext& from);
  AttributeContext(AttributeContext&& from) noexcept
    : AttributeContext() {
    *this = ::std::move(from);
  }

  inline AttributeContext& operator=(const AttributeContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext& operator=(AttributeContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext* internal_default_instance() {
    return reinterpret_cast<const AttributeContext*>(
               &_AttributeContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AttributeContext& a, AttributeContext& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeContext* New() const final {
    return CreateMaybeMessage<AttributeContext>(nullptr);
  }

  AttributeContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeContext& from);
  void MergeFrom(const AttributeContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.rpc.context.AttributeContext";
  }
  protected:
  explicit AttributeContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AttributeContext_Peer Peer;
  typedef AttributeContext_Api Api;
  typedef AttributeContext_Auth Auth;
  typedef AttributeContext_Request Request;
  typedef AttributeContext_Response Response;
  typedef AttributeContext_Resource Resource;

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionsFieldNumber = 8,
    kSourceFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kRequestFieldNumber = 3,
    kResponseFieldNumber = 4,
    kResourceFieldNumber = 5,
    kApiFieldNumber = 6,
    kOriginFieldNumber = 7,
  };
  // repeated .google.protobuf.Any extensions = 8;
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  PROTOBUF_NAMESPACE_ID::Any* mutable_extensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_extensions();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_extensions(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_extensions();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& extensions(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_extensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      extensions() const;

  // .google.rpc.context.AttributeContext.Peer source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::google::rpc::context::AttributeContext_Peer& source() const;
  ::google::rpc::context::AttributeContext_Peer* release_source();
  ::google::rpc::context::AttributeContext_Peer* mutable_source();
  void set_allocated_source(::google::rpc::context::AttributeContext_Peer* source);
  private:
  const ::google::rpc::context::AttributeContext_Peer& _internal_source() const;
  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::google::rpc::context::AttributeContext_Peer* source);
  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_source();

  // .google.rpc.context.AttributeContext.Peer destination = 2;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::google::rpc::context::AttributeContext_Peer& destination() const;
  ::google::rpc::context::AttributeContext_Peer* release_destination();
  ::google::rpc::context::AttributeContext_Peer* mutable_destination();
  void set_allocated_destination(::google::rpc::context::AttributeContext_Peer* destination);
  private:
  const ::google::rpc::context::AttributeContext_Peer& _internal_destination() const;
  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::google::rpc::context::AttributeContext_Peer* destination);
  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_destination();

  // .google.rpc.context.AttributeContext.Request request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::google::rpc::context::AttributeContext_Request& request() const;
  ::google::rpc::context::AttributeContext_Request* release_request();
  ::google::rpc::context::AttributeContext_Request* mutable_request();
  void set_allocated_request(::google::rpc::context::AttributeContext_Request* request);
  private:
  const ::google::rpc::context::AttributeContext_Request& _internal_request() const;
  ::google::rpc::context::AttributeContext_Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::google::rpc::context::AttributeContext_Request* request);
  ::google::rpc::context::AttributeContext_Request* unsafe_arena_release_request();

  // .google.rpc.context.AttributeContext.Response response = 4;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::google::rpc::context::AttributeContext_Response& response() const;
  ::google::rpc::context::AttributeContext_Response* release_response();
  ::google::rpc::context::AttributeContext_Response* mutable_response();
  void set_allocated_response(::google::rpc::context::AttributeContext_Response* response);
  private:
  const ::google::rpc::context::AttributeContext_Response& _internal_response() const;
  ::google::rpc::context::AttributeContext_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::google::rpc::context::AttributeContext_Response* response);
  ::google::rpc::context::AttributeContext_Response* unsafe_arena_release_response();

  // .google.rpc.context.AttributeContext.Resource resource = 5;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::rpc::context::AttributeContext_Resource& resource() const;
  ::google::rpc::context::AttributeContext_Resource* release_resource();
  ::google::rpc::context::AttributeContext_Resource* mutable_resource();
  void set_allocated_resource(::google::rpc::context::AttributeContext_Resource* resource);
  private:
  const ::google::rpc::context::AttributeContext_Resource& _internal_resource() const;
  ::google::rpc::context::AttributeContext_Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::rpc::context::AttributeContext_Resource* resource);
  ::google::rpc::context::AttributeContext_Resource* unsafe_arena_release_resource();

  // .google.rpc.context.AttributeContext.Api api = 6;
  bool has_api() const;
  private:
  bool _internal_has_api() const;
  public:
  void clear_api();
  const ::google::rpc::context::AttributeContext_Api& api() const;
  ::google::rpc::context::AttributeContext_Api* release_api();
  ::google::rpc::context::AttributeContext_Api* mutable_api();
  void set_allocated_api(::google::rpc::context::AttributeContext_Api* api);
  private:
  const ::google::rpc::context::AttributeContext_Api& _internal_api() const;
  ::google::rpc::context::AttributeContext_Api* _internal_mutable_api();
  public:
  void unsafe_arena_set_allocated_api(
      ::google::rpc::context::AttributeContext_Api* api);
  ::google::rpc::context::AttributeContext_Api* unsafe_arena_release_api();

  // .google.rpc.context.AttributeContext.Peer origin = 7;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::google::rpc::context::AttributeContext_Peer& origin() const;
  ::google::rpc::context::AttributeContext_Peer* release_origin();
  ::google::rpc::context::AttributeContext_Peer* mutable_origin();
  void set_allocated_origin(::google::rpc::context::AttributeContext_Peer* origin);
  private:
  const ::google::rpc::context::AttributeContext_Peer& _internal_origin() const;
  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::google::rpc::context::AttributeContext_Peer* origin);
  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_origin();

  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > extensions_;
  ::google::rpc::context::AttributeContext_Peer* source_;
  ::google::rpc::context::AttributeContext_Peer* destination_;
  ::google::rpc::context::AttributeContext_Request* request_;
  ::google::rpc::context::AttributeContext_Response* response_;
  ::google::rpc::context::AttributeContext_Resource* resource_;
  ::google::rpc::context::AttributeContext_Api* api_;
  ::google::rpc::context::AttributeContext_Peer* origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AttributeContext_Peer

// string ip = 1;
inline void AttributeContext_Peer::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& AttributeContext_Peer::ip() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.ip)
  return _internal_ip();
}
inline void AttributeContext_Peer::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.ip)
}
inline std::string* AttributeContext_Peer::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.ip)
  return _internal_mutable_ip();
}
inline const std::string& AttributeContext_Peer::_internal_ip() const {
  return ip_.Get();
}
inline void AttributeContext_Peer::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Peer::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Peer.ip)
}
inline void AttributeContext_Peer::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Peer.ip)
}
inline void AttributeContext_Peer::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Peer.ip)
}
inline std::string* AttributeContext_Peer::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Peer::release_ip() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Peer::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.ip)
}

// int64 port = 2;
inline void AttributeContext_Peer::clear_port() {
  port_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeContext_Peer::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeContext_Peer::port() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.port)
  return _internal_port();
}
inline void AttributeContext_Peer::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  port_ = value;
}
inline void AttributeContext_Peer::set_port(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.port)
}

// map<string, string> labels = 6;
inline int AttributeContext_Peer::_internal_labels_size() const {
  return labels_.size();
}
inline int AttributeContext_Peer::labels_size() const {
  return _internal_labels_size();
}
inline void AttributeContext_Peer::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AttributeContext_Peer::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AttributeContext_Peer::labels() const {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Peer.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AttributeContext_Peer::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AttributeContext_Peer::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Peer.labels)
  return _internal_mutable_labels();
}

// string principal = 7;
inline void AttributeContext_Peer::clear_principal() {
  principal_.ClearToEmpty();
}
inline const std::string& AttributeContext_Peer::principal() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.principal)
  return _internal_principal();
}
inline void AttributeContext_Peer::set_principal(const std::string& value) {
  _internal_set_principal(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.principal)
}
inline std::string* AttributeContext_Peer::mutable_principal() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.principal)
  return _internal_mutable_principal();
}
inline const std::string& AttributeContext_Peer::_internal_principal() const {
  return principal_.Get();
}
inline void AttributeContext_Peer::_internal_set_principal(const std::string& value) {
  
  principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Peer::set_principal(std::string&& value) {
  
  principal_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Peer.principal)
}
inline void AttributeContext_Peer::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Peer.principal)
}
inline void AttributeContext_Peer::set_principal(const char* value,
    size_t size) {
  
  principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Peer.principal)
}
inline std::string* AttributeContext_Peer::_internal_mutable_principal() {
  
  return principal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Peer::release_principal() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.principal)
  return principal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Peer::set_allocated_principal(std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), principal,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.principal)
}

// string region_code = 8;
inline void AttributeContext_Peer::clear_region_code() {
  region_code_.ClearToEmpty();
}
inline const std::string& AttributeContext_Peer::region_code() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.region_code)
  return _internal_region_code();
}
inline void AttributeContext_Peer::set_region_code(const std::string& value) {
  _internal_set_region_code(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.region_code)
}
inline std::string* AttributeContext_Peer::mutable_region_code() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.region_code)
  return _internal_mutable_region_code();
}
inline const std::string& AttributeContext_Peer::_internal_region_code() const {
  return region_code_.Get();
}
inline void AttributeContext_Peer::_internal_set_region_code(const std::string& value) {
  
  region_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Peer::set_region_code(std::string&& value) {
  
  region_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Peer.region_code)
}
inline void AttributeContext_Peer::set_region_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Peer.region_code)
}
inline void AttributeContext_Peer::set_region_code(const char* value,
    size_t size) {
  
  region_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Peer.region_code)
}
inline std::string* AttributeContext_Peer::_internal_mutable_region_code() {
  
  return region_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Peer::release_region_code() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.region_code)
  return region_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Peer::set_allocated_region_code(std::string* region_code) {
  if (region_code != nullptr) {
    
  } else {
    
  }
  region_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.region_code)
}

// -------------------------------------------------------------------

// AttributeContext_Api

// string service = 1;
inline void AttributeContext_Api::clear_service() {
  service_.ClearToEmpty();
}
inline const std::string& AttributeContext_Api::service() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.service)
  return _internal_service();
}
inline void AttributeContext_Api::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.service)
}
inline std::string* AttributeContext_Api::mutable_service() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.service)
  return _internal_mutable_service();
}
inline const std::string& AttributeContext_Api::_internal_service() const {
  return service_.Get();
}
inline void AttributeContext_Api::_internal_set_service(const std::string& value) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Api::set_service(std::string&& value) {
  
  service_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Api.service)
}
inline void AttributeContext_Api::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Api.service)
}
inline void AttributeContext_Api::set_service(const char* value,
    size_t size) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Api.service)
}
inline std::string* AttributeContext_Api::_internal_mutable_service() {
  
  return service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Api::release_service() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.service)
  return service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Api::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.service)
}

// string operation = 2;
inline void AttributeContext_Api::clear_operation() {
  operation_.ClearToEmpty();
}
inline const std::string& AttributeContext_Api::operation() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.operation)
  return _internal_operation();
}
inline void AttributeContext_Api::set_operation(const std::string& value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.operation)
}
inline std::string* AttributeContext_Api::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.operation)
  return _internal_mutable_operation();
}
inline const std::string& AttributeContext_Api::_internal_operation() const {
  return operation_.Get();
}
inline void AttributeContext_Api::_internal_set_operation(const std::string& value) {
  
  operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Api::set_operation(std::string&& value) {
  
  operation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Api.operation)
}
inline void AttributeContext_Api::set_operation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Api.operation)
}
inline void AttributeContext_Api::set_operation(const char* value,
    size_t size) {
  
  operation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Api.operation)
}
inline std::string* AttributeContext_Api::_internal_mutable_operation() {
  
  return operation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Api::release_operation() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.operation)
  return operation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Api::set_allocated_operation(std::string* operation) {
  if (operation != nullptr) {
    
  } else {
    
  }
  operation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.operation)
}

// string protocol = 3;
inline void AttributeContext_Api::clear_protocol() {
  protocol_.ClearToEmpty();
}
inline const std::string& AttributeContext_Api::protocol() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.protocol)
  return _internal_protocol();
}
inline void AttributeContext_Api::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.protocol)
}
inline std::string* AttributeContext_Api::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& AttributeContext_Api::_internal_protocol() const {
  return protocol_.Get();
}
inline void AttributeContext_Api::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Api::set_protocol(std::string&& value) {
  
  protocol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Api.protocol)
}
inline void AttributeContext_Api::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Api.protocol)
}
inline void AttributeContext_Api::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Api.protocol)
}
inline std::string* AttributeContext_Api::_internal_mutable_protocol() {
  
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Api::release_protocol() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Api::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.protocol)
}

// string version = 4;
inline void AttributeContext_Api::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& AttributeContext_Api::version() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.version)
  return _internal_version();
}
inline void AttributeContext_Api::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.version)
}
inline std::string* AttributeContext_Api::mutable_version() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.version)
  return _internal_mutable_version();
}
inline const std::string& AttributeContext_Api::_internal_version() const {
  return version_.Get();
}
inline void AttributeContext_Api::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Api::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Api.version)
}
inline void AttributeContext_Api::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Api.version)
}
inline void AttributeContext_Api::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Api.version)
}
inline std::string* AttributeContext_Api::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Api::release_version() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Api::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.version)
}

// -------------------------------------------------------------------

// AttributeContext_Auth

// string principal = 1;
inline void AttributeContext_Auth::clear_principal() {
  principal_.ClearToEmpty();
}
inline const std::string& AttributeContext_Auth::principal() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.principal)
  return _internal_principal();
}
inline void AttributeContext_Auth::set_principal(const std::string& value) {
  _internal_set_principal(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.principal)
}
inline std::string* AttributeContext_Auth::mutable_principal() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.principal)
  return _internal_mutable_principal();
}
inline const std::string& AttributeContext_Auth::_internal_principal() const {
  return principal_.Get();
}
inline void AttributeContext_Auth::_internal_set_principal(const std::string& value) {
  
  principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Auth::set_principal(std::string&& value) {
  
  principal_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Auth.principal)
}
inline void AttributeContext_Auth::set_principal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Auth.principal)
}
inline void AttributeContext_Auth::set_principal(const char* value,
    size_t size) {
  
  principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Auth.principal)
}
inline std::string* AttributeContext_Auth::_internal_mutable_principal() {
  
  return principal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Auth::release_principal() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.principal)
  return principal_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Auth::set_allocated_principal(std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  principal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), principal,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.principal)
}

// repeated string audiences = 2;
inline int AttributeContext_Auth::_internal_audiences_size() const {
  return audiences_.size();
}
inline int AttributeContext_Auth::audiences_size() const {
  return _internal_audiences_size();
}
inline void AttributeContext_Auth::clear_audiences() {
  audiences_.Clear();
}
inline std::string* AttributeContext_Auth::add_audiences() {
  // @@protoc_insertion_point(field_add_mutable:google.rpc.context.AttributeContext.Auth.audiences)
  return _internal_add_audiences();
}
inline const std::string& AttributeContext_Auth::_internal_audiences(int index) const {
  return audiences_.Get(index);
}
inline const std::string& AttributeContext_Auth::audiences(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.audiences)
  return _internal_audiences(index);
}
inline std::string* AttributeContext_Auth::mutable_audiences(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.audiences)
  return audiences_.Mutable(index);
}
inline void AttributeContext_Auth::set_audiences(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.audiences)
  audiences_.Mutable(index)->assign(value);
}
inline void AttributeContext_Auth::set_audiences(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.audiences)
  audiences_.Mutable(index)->assign(std::move(value));
}
inline void AttributeContext_Auth::set_audiences(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audiences_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::set_audiences(int index, const char* value, size_t size) {
  audiences_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Auth.audiences)
}
inline std::string* AttributeContext_Auth::_internal_add_audiences() {
  return audiences_.Add();
}
inline void AttributeContext_Auth::add_audiences(const std::string& value) {
  audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::add_audiences(std::string&& value) {
  audiences_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::add_audiences(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  audiences_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::add_audiences(const char* value, size_t size) {
  audiences_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.rpc.context.AttributeContext.Auth.audiences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttributeContext_Auth::audiences() const {
  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.Auth.audiences)
  return audiences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttributeContext_Auth::mutable_audiences() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.Auth.audiences)
  return &audiences_;
}

// string presenter = 3;
inline void AttributeContext_Auth::clear_presenter() {
  presenter_.ClearToEmpty();
}
inline const std::string& AttributeContext_Auth::presenter() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.presenter)
  return _internal_presenter();
}
inline void AttributeContext_Auth::set_presenter(const std::string& value) {
  _internal_set_presenter(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.presenter)
}
inline std::string* AttributeContext_Auth::mutable_presenter() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.presenter)
  return _internal_mutable_presenter();
}
inline const std::string& AttributeContext_Auth::_internal_presenter() const {
  return presenter_.Get();
}
inline void AttributeContext_Auth::_internal_set_presenter(const std::string& value) {
  
  presenter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Auth::set_presenter(std::string&& value) {
  
  presenter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Auth.presenter)
}
inline void AttributeContext_Auth::set_presenter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  presenter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Auth.presenter)
}
inline void AttributeContext_Auth::set_presenter(const char* value,
    size_t size) {
  
  presenter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Auth.presenter)
}
inline std::string* AttributeContext_Auth::_internal_mutable_presenter() {
  
  return presenter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Auth::release_presenter() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.presenter)
  return presenter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Auth::set_allocated_presenter(std::string* presenter) {
  if (presenter != nullptr) {
    
  } else {
    
  }
  presenter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), presenter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.presenter)
}

// .google.protobuf.Struct claims = 4;
inline bool AttributeContext_Auth::_internal_has_claims() const {
  return this != internal_default_instance() && claims_ != nullptr;
}
inline bool AttributeContext_Auth::has_claims() const {
  return _internal_has_claims();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& AttributeContext_Auth::_internal_claims() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = claims_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& AttributeContext_Auth::claims() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.claims)
  return _internal_claims();
}
inline void AttributeContext_Auth::unsafe_arena_set_allocated_claims(
    PROTOBUF_NAMESPACE_ID::Struct* claims) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(claims_);
  }
  claims_ = claims;
  if (claims) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Auth.claims)
}
inline PROTOBUF_NAMESPACE_ID::Struct* AttributeContext_Auth::release_claims() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = claims_;
  claims_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* AttributeContext_Auth::unsafe_arena_release_claims() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.claims)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = claims_;
  claims_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* AttributeContext_Auth::_internal_mutable_claims() {
  
  if (claims_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArena());
    claims_ = p;
  }
  return claims_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* AttributeContext_Auth::mutable_claims() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.claims)
  return _internal_mutable_claims();
}
inline void AttributeContext_Auth::set_allocated_claims(PROTOBUF_NAMESPACE_ID::Struct* claims) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(claims_);
  }
  if (claims) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(claims)->GetArena();
    if (message_arena != submessage_arena) {
      claims = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, claims, submessage_arena);
    }
    
  } else {
    
  }
  claims_ = claims;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.claims)
}

// repeated string access_levels = 5;
inline int AttributeContext_Auth::_internal_access_levels_size() const {
  return access_levels_.size();
}
inline int AttributeContext_Auth::access_levels_size() const {
  return _internal_access_levels_size();
}
inline void AttributeContext_Auth::clear_access_levels() {
  access_levels_.Clear();
}
inline std::string* AttributeContext_Auth::add_access_levels() {
  // @@protoc_insertion_point(field_add_mutable:google.rpc.context.AttributeContext.Auth.access_levels)
  return _internal_add_access_levels();
}
inline const std::string& AttributeContext_Auth::_internal_access_levels(int index) const {
  return access_levels_.Get(index);
}
inline const std::string& AttributeContext_Auth::access_levels(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.access_levels)
  return _internal_access_levels(index);
}
inline std::string* AttributeContext_Auth::mutable_access_levels(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.access_levels)
  return access_levels_.Mutable(index);
}
inline void AttributeContext_Auth::set_access_levels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.access_levels)
  access_levels_.Mutable(index)->assign(value);
}
inline void AttributeContext_Auth::set_access_levels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.access_levels)
  access_levels_.Mutable(index)->assign(std::move(value));
}
inline void AttributeContext_Auth::set_access_levels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  access_levels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::set_access_levels(int index, const char* value, size_t size) {
  access_levels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline std::string* AttributeContext_Auth::_internal_add_access_levels() {
  return access_levels_.Add();
}
inline void AttributeContext_Auth::add_access_levels(const std::string& value) {
  access_levels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::add_access_levels(std::string&& value) {
  access_levels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::add_access_levels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  access_levels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::add_access_levels(const char* value, size_t size) {
  access_levels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AttributeContext_Auth::access_levels() const {
  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.Auth.access_levels)
  return access_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AttributeContext_Auth::mutable_access_levels() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.Auth.access_levels)
  return &access_levels_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeContext_Request

// string id = 1;
inline void AttributeContext_Request::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::id() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.id)
  return _internal_id();
}
inline void AttributeContext_Request::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.id)
}
inline std::string* AttributeContext_Request::mutable_id() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.id)
  return _internal_mutable_id();
}
inline const std::string& AttributeContext_Request::_internal_id() const {
  return id_.Get();
}
inline void AttributeContext_Request::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Request::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Request.id)
}
inline void AttributeContext_Request::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Request.id)
}
inline void AttributeContext_Request::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Request.id)
}
inline std::string* AttributeContext_Request::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Request::release_id() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Request::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.id)
}

// string method = 2;
inline void AttributeContext_Request::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::method() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.method)
  return _internal_method();
}
inline void AttributeContext_Request::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.method)
}
inline std::string* AttributeContext_Request::mutable_method() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.method)
  return _internal_mutable_method();
}
inline const std::string& AttributeContext_Request::_internal_method() const {
  return method_.Get();
}
inline void AttributeContext_Request::_internal_set_method(const std::string& value) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Request::set_method(std::string&& value) {
  
  method_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Request.method)
}
inline void AttributeContext_Request::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Request.method)
}
inline void AttributeContext_Request::set_method(const char* value,
    size_t size) {
  
  method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Request.method)
}
inline std::string* AttributeContext_Request::_internal_mutable_method() {
  
  return method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Request::release_method() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Request::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.method)
}

// map<string, string> headers = 3;
inline int AttributeContext_Request::_internal_headers_size() const {
  return headers_.size();
}
inline int AttributeContext_Request::headers_size() const {
  return _internal_headers_size();
}
inline void AttributeContext_Request::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AttributeContext_Request::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AttributeContext_Request::headers() const {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Request.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AttributeContext_Request::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AttributeContext_Request::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Request.headers)
  return _internal_mutable_headers();
}

// string path = 4;
inline void AttributeContext_Request::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::path() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.path)
  return _internal_path();
}
inline void AttributeContext_Request::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.path)
}
inline std::string* AttributeContext_Request::mutable_path() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.path)
  return _internal_mutable_path();
}
inline const std::string& AttributeContext_Request::_internal_path() const {
  return path_.Get();
}
inline void AttributeContext_Request::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Request::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Request.path)
}
inline void AttributeContext_Request::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Request.path)
}
inline void AttributeContext_Request::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Request.path)
}
inline std::string* AttributeContext_Request::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Request::release_path() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Request::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.path)
}

// string host = 5;
inline void AttributeContext_Request::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::host() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.host)
  return _internal_host();
}
inline void AttributeContext_Request::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.host)
}
inline std::string* AttributeContext_Request::mutable_host() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.host)
  return _internal_mutable_host();
}
inline const std::string& AttributeContext_Request::_internal_host() const {
  return host_.Get();
}
inline void AttributeContext_Request::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Request::set_host(std::string&& value) {
  
  host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Request.host)
}
inline void AttributeContext_Request::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Request.host)
}
inline void AttributeContext_Request::set_host(const char* value,
    size_t size) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Request.host)
}
inline std::string* AttributeContext_Request::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Request::release_host() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Request::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.host)
}

// string scheme = 6;
inline void AttributeContext_Request::clear_scheme() {
  scheme_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::scheme() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.scheme)
  return _internal_scheme();
}
inline void AttributeContext_Request::set_scheme(const std::string& value) {
  _internal_set_scheme(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.scheme)
}
inline std::string* AttributeContext_Request::mutable_scheme() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.scheme)
  return _internal_mutable_scheme();
}
inline const std::string& AttributeContext_Request::_internal_scheme() const {
  return scheme_.Get();
}
inline void AttributeContext_Request::_internal_set_scheme(const std::string& value) {
  
  scheme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Request::set_scheme(std::string&& value) {
  
  scheme_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Request.scheme)
}
inline void AttributeContext_Request::set_scheme(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scheme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Request.scheme)
}
inline void AttributeContext_Request::set_scheme(const char* value,
    size_t size) {
  
  scheme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Request.scheme)
}
inline std::string* AttributeContext_Request::_internal_mutable_scheme() {
  
  return scheme_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Request::release_scheme() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.scheme)
  return scheme_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Request::set_allocated_scheme(std::string* scheme) {
  if (scheme != nullptr) {
    
  } else {
    
  }
  scheme_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheme,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.scheme)
}

// string query = 7;
inline void AttributeContext_Request::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::query() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.query)
  return _internal_query();
}
inline void AttributeContext_Request::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.query)
}
inline std::string* AttributeContext_Request::mutable_query() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.query)
  return _internal_mutable_query();
}
inline const std::string& AttributeContext_Request::_internal_query() const {
  return query_.Get();
}
inline void AttributeContext_Request::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Request::set_query(std::string&& value) {
  
  query_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Request.query)
}
inline void AttributeContext_Request::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Request.query)
}
inline void AttributeContext_Request::set_query(const char* value,
    size_t size) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Request.query)
}
inline std::string* AttributeContext_Request::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Request::release_query() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Request::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.query)
}

// .google.protobuf.Timestamp time = 9;
inline bool AttributeContext_Request::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool AttributeContext_Request::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AttributeContext_Request::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AttributeContext_Request::time() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.time)
  return _internal_time();
}
inline void AttributeContext_Request::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Request.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AttributeContext_Request::release_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AttributeContext_Request::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AttributeContext_Request::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AttributeContext_Request::mutable_time() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.time)
  return _internal_mutable_time();
}
inline void AttributeContext_Request::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.time)
}

// int64 size = 10;
inline void AttributeContext_Request::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeContext_Request::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeContext_Request::size() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.size)
  return _internal_size();
}
inline void AttributeContext_Request::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void AttributeContext_Request::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.size)
}

// string protocol = 11;
inline void AttributeContext_Request::clear_protocol() {
  protocol_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::protocol() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.protocol)
  return _internal_protocol();
}
inline void AttributeContext_Request::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.protocol)
}
inline std::string* AttributeContext_Request::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& AttributeContext_Request::_internal_protocol() const {
  return protocol_.Get();
}
inline void AttributeContext_Request::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Request::set_protocol(std::string&& value) {
  
  protocol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Request.protocol)
}
inline void AttributeContext_Request::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Request.protocol)
}
inline void AttributeContext_Request::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Request.protocol)
}
inline std::string* AttributeContext_Request::_internal_mutable_protocol() {
  
  return protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Request::release_protocol() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Request::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.protocol)
}

// string reason = 12;
inline void AttributeContext_Request::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::reason() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.reason)
  return _internal_reason();
}
inline void AttributeContext_Request::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.reason)
}
inline std::string* AttributeContext_Request::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.reason)
  return _internal_mutable_reason();
}
inline const std::string& AttributeContext_Request::_internal_reason() const {
  return reason_.Get();
}
inline void AttributeContext_Request::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Request::set_reason(std::string&& value) {
  
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Request.reason)
}
inline void AttributeContext_Request::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Request.reason)
}
inline void AttributeContext_Request::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Request.reason)
}
inline std::string* AttributeContext_Request::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Request::release_reason() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Request::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.reason)
}

// .google.rpc.context.AttributeContext.Auth auth = 13;
inline bool AttributeContext_Request::_internal_has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline bool AttributeContext_Request::has_auth() const {
  return _internal_has_auth();
}
inline void AttributeContext_Request::clear_auth() {
  if (GetArena() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
inline const ::google::rpc::context::AttributeContext_Auth& AttributeContext_Request::_internal_auth() const {
  const ::google::rpc::context::AttributeContext_Auth* p = auth_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Auth&>(
      ::google::rpc::context::_AttributeContext_Auth_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Auth& AttributeContext_Request::auth() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.auth)
  return _internal_auth();
}
inline void AttributeContext_Request::unsafe_arena_set_allocated_auth(
    ::google::rpc::context::AttributeContext_Auth* auth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_);
  }
  auth_ = auth;
  if (auth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Request.auth)
}
inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::release_auth() {
  
  ::google::rpc::context::AttributeContext_Auth* temp = auth_;
  auth_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::unsafe_arena_release_auth() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.auth)
  
  ::google::rpc::context::AttributeContext_Auth* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::_internal_mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Auth>(GetArena());
    auth_ = p;
  }
  return auth_;
}
inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.auth)
  return _internal_mutable_auth();
}
inline void AttributeContext_Request::set_allocated_auth(::google::rpc::context::AttributeContext_Auth* auth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete auth_;
  }
  if (auth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(auth);
    if (message_arena != submessage_arena) {
      auth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.auth)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeContext_Response

// int64 code = 1;
inline void AttributeContext_Response::clear_code() {
  code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeContext_Response::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeContext_Response::code() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.code)
  return _internal_code();
}
inline void AttributeContext_Response::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  code_ = value;
}
inline void AttributeContext_Response::set_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Response.code)
}

// int64 size = 2;
inline void AttributeContext_Response::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeContext_Response::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AttributeContext_Response::size() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.size)
  return _internal_size();
}
inline void AttributeContext_Response::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void AttributeContext_Response::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Response.size)
}

// map<string, string> headers = 3;
inline int AttributeContext_Response::_internal_headers_size() const {
  return headers_.size();
}
inline int AttributeContext_Response::headers_size() const {
  return _internal_headers_size();
}
inline void AttributeContext_Response::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AttributeContext_Response::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AttributeContext_Response::headers() const {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Response.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AttributeContext_Response::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AttributeContext_Response::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Response.headers)
  return _internal_mutable_headers();
}

// .google.protobuf.Timestamp time = 4;
inline bool AttributeContext_Response::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool AttributeContext_Response::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AttributeContext_Response::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& AttributeContext_Response::time() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.time)
  return _internal_time();
}
inline void AttributeContext_Response::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Response.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AttributeContext_Response::release_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AttributeContext_Response::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Response.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AttributeContext_Response::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* AttributeContext_Response::mutable_time() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Response.time)
  return _internal_mutable_time();
}
inline void AttributeContext_Response::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Response.time)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeContext_Resource

// string service = 1;
inline void AttributeContext_Resource::clear_service() {
  service_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::service() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.service)
  return _internal_service();
}
inline void AttributeContext_Resource::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.service)
}
inline std::string* AttributeContext_Resource::mutable_service() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.service)
  return _internal_mutable_service();
}
inline const std::string& AttributeContext_Resource::_internal_service() const {
  return service_.Get();
}
inline void AttributeContext_Resource::_internal_set_service(const std::string& value) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Resource::set_service(std::string&& value) {
  
  service_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Resource.service)
}
inline void AttributeContext_Resource::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Resource.service)
}
inline void AttributeContext_Resource::set_service(const char* value,
    size_t size) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Resource.service)
}
inline std::string* AttributeContext_Resource::_internal_mutable_service() {
  
  return service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Resource::release_service() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.service)
  return service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Resource::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.service)
}

// string name = 2;
inline void AttributeContext_Resource::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::name() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.name)
  return _internal_name();
}
inline void AttributeContext_Resource::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.name)
}
inline std::string* AttributeContext_Resource::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.name)
  return _internal_mutable_name();
}
inline const std::string& AttributeContext_Resource::_internal_name() const {
  return name_.Get();
}
inline void AttributeContext_Resource::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Resource::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Resource.name)
}
inline void AttributeContext_Resource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Resource.name)
}
inline void AttributeContext_Resource::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Resource.name)
}
inline std::string* AttributeContext_Resource::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Resource::release_name() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Resource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.name)
}

// string type = 3;
inline void AttributeContext_Resource::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::type() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.type)
  return _internal_type();
}
inline void AttributeContext_Resource::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.type)
}
inline std::string* AttributeContext_Resource::mutable_type() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.type)
  return _internal_mutable_type();
}
inline const std::string& AttributeContext_Resource::_internal_type() const {
  return type_.Get();
}
inline void AttributeContext_Resource::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AttributeContext_Resource::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.rpc.context.AttributeContext.Resource.type)
}
inline void AttributeContext_Resource::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Resource.type)
}
inline void AttributeContext_Resource::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Resource.type)
}
inline std::string* AttributeContext_Resource::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AttributeContext_Resource::release_type() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeContext_Resource::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.type)
}

// map<string, string> labels = 4;
inline int AttributeContext_Resource::_internal_labels_size() const {
  return labels_.size();
}
inline int AttributeContext_Resource::labels_size() const {
  return _internal_labels_size();
}
inline void AttributeContext_Resource::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AttributeContext_Resource::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AttributeContext_Resource::labels() const {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Resource.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AttributeContext_Resource::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AttributeContext_Resource::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Resource.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// AttributeContext

// .google.rpc.context.AttributeContext.Peer origin = 7;
inline bool AttributeContext::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool AttributeContext::has_origin() const {
  return _internal_has_origin();
}
inline void AttributeContext::clear_origin() {
  if (GetArena() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_origin() const {
  const ::google::rpc::context::AttributeContext_Peer* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(
      ::google::rpc::context::_AttributeContext_Peer_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::origin() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.origin)
  return _internal_origin();
}
inline void AttributeContext::unsafe_arena_set_allocated_origin(
    ::google::rpc::context::AttributeContext_Peer* origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.origin)
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_origin() {
  
  ::google::rpc::context::AttributeContext_Peer* temp = origin_;
  origin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.origin)
  
  ::google::rpc::context::AttributeContext_Peer* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArena());
    origin_ = p;
  }
  return origin_;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.origin)
  return _internal_mutable_origin();
}
inline void AttributeContext::set_allocated_origin(::google::rpc::context::AttributeContext_Peer* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(origin);
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.origin)
}

// .google.rpc.context.AttributeContext.Peer source = 1;
inline bool AttributeContext::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool AttributeContext::has_source() const {
  return _internal_has_source();
}
inline void AttributeContext::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_source() const {
  const ::google::rpc::context::AttributeContext_Peer* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(
      ::google::rpc::context::_AttributeContext_Peer_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::source() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.source)
  return _internal_source();
}
inline void AttributeContext::unsafe_arena_set_allocated_source(
    ::google::rpc::context::AttributeContext_Peer* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.source)
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_source() {
  
  ::google::rpc::context::AttributeContext_Peer* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.source)
  
  ::google::rpc::context::AttributeContext_Peer* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_source() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.source)
  return _internal_mutable_source();
}
inline void AttributeContext::set_allocated_source(::google::rpc::context::AttributeContext_Peer* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.source)
}

// .google.rpc.context.AttributeContext.Peer destination = 2;
inline bool AttributeContext::_internal_has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline bool AttributeContext::has_destination() const {
  return _internal_has_destination();
}
inline void AttributeContext::clear_destination() {
  if (GetArena() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_destination() const {
  const ::google::rpc::context::AttributeContext_Peer* p = destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(
      ::google::rpc::context::_AttributeContext_Peer_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::destination() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.destination)
  return _internal_destination();
}
inline void AttributeContext::unsafe_arena_set_allocated_destination(
    ::google::rpc::context::AttributeContext_Peer* destination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.destination)
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_destination() {
  
  ::google::rpc::context::AttributeContext_Peer* temp = destination_;
  destination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.destination)
  
  ::google::rpc::context::AttributeContext_Peer* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArena());
    destination_ = p;
  }
  return destination_;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.destination)
  return _internal_mutable_destination();
}
inline void AttributeContext::set_allocated_destination(::google::rpc::context::AttributeContext_Peer* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.destination)
}

// .google.rpc.context.AttributeContext.Request request = 3;
inline bool AttributeContext::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool AttributeContext::has_request() const {
  return _internal_has_request();
}
inline void AttributeContext::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::google::rpc::context::AttributeContext_Request& AttributeContext::_internal_request() const {
  const ::google::rpc::context::AttributeContext_Request* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Request&>(
      ::google::rpc::context::_AttributeContext_Request_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Request& AttributeContext::request() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.request)
  return _internal_request();
}
inline void AttributeContext::unsafe_arena_set_allocated_request(
    ::google::rpc::context::AttributeContext_Request* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.request)
}
inline ::google::rpc::context::AttributeContext_Request* AttributeContext::release_request() {
  
  ::google::rpc::context::AttributeContext_Request* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::context::AttributeContext_Request* AttributeContext::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.request)
  
  ::google::rpc::context::AttributeContext_Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Request* AttributeContext::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Request>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::google::rpc::context::AttributeContext_Request* AttributeContext::mutable_request() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.request)
  return _internal_mutable_request();
}
inline void AttributeContext::set_allocated_request(::google::rpc::context::AttributeContext_Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.request)
}

// .google.rpc.context.AttributeContext.Response response = 4;
inline bool AttributeContext::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool AttributeContext::has_response() const {
  return _internal_has_response();
}
inline void AttributeContext::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::google::rpc::context::AttributeContext_Response& AttributeContext::_internal_response() const {
  const ::google::rpc::context::AttributeContext_Response* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Response&>(
      ::google::rpc::context::_AttributeContext_Response_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Response& AttributeContext::response() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.response)
  return _internal_response();
}
inline void AttributeContext::unsafe_arena_set_allocated_response(
    ::google::rpc::context::AttributeContext_Response* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.response)
}
inline ::google::rpc::context::AttributeContext_Response* AttributeContext::release_response() {
  
  ::google::rpc::context::AttributeContext_Response* temp = response_;
  response_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::context::AttributeContext_Response* AttributeContext::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.response)
  
  ::google::rpc::context::AttributeContext_Response* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Response* AttributeContext::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Response>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::google::rpc::context::AttributeContext_Response* AttributeContext::mutable_response() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.response)
  return _internal_mutable_response();
}
inline void AttributeContext::set_allocated_response(::google::rpc::context::AttributeContext_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.response)
}

// .google.rpc.context.AttributeContext.Resource resource = 5;
inline bool AttributeContext::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool AttributeContext::has_resource() const {
  return _internal_has_resource();
}
inline void AttributeContext::clear_resource() {
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
inline const ::google::rpc::context::AttributeContext_Resource& AttributeContext::_internal_resource() const {
  const ::google::rpc::context::AttributeContext_Resource* p = resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Resource&>(
      ::google::rpc::context::_AttributeContext_Resource_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Resource& AttributeContext::resource() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.resource)
  return _internal_resource();
}
inline void AttributeContext::unsafe_arena_set_allocated_resource(
    ::google::rpc::context::AttributeContext_Resource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.resource)
}
inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::release_resource() {
  
  ::google::rpc::context::AttributeContext_Resource* temp = resource_;
  resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.resource)
  
  ::google::rpc::context::AttributeContext_Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Resource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.resource)
  return _internal_mutable_resource();
}
inline void AttributeContext::set_allocated_resource(::google::rpc::context::AttributeContext_Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.resource)
}

// .google.rpc.context.AttributeContext.Api api = 6;
inline bool AttributeContext::_internal_has_api() const {
  return this != internal_default_instance() && api_ != nullptr;
}
inline bool AttributeContext::has_api() const {
  return _internal_has_api();
}
inline void AttributeContext::clear_api() {
  if (GetArena() == nullptr && api_ != nullptr) {
    delete api_;
  }
  api_ = nullptr;
}
inline const ::google::rpc::context::AttributeContext_Api& AttributeContext::_internal_api() const {
  const ::google::rpc::context::AttributeContext_Api* p = api_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Api&>(
      ::google::rpc::context::_AttributeContext_Api_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Api& AttributeContext::api() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.api)
  return _internal_api();
}
inline void AttributeContext::unsafe_arena_set_allocated_api(
    ::google::rpc::context::AttributeContext_Api* api) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(api_);
  }
  api_ = api;
  if (api) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.api)
}
inline ::google::rpc::context::AttributeContext_Api* AttributeContext::release_api() {
  
  ::google::rpc::context::AttributeContext_Api* temp = api_;
  api_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::context::AttributeContext_Api* AttributeContext::unsafe_arena_release_api() {
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.api)
  
  ::google::rpc::context::AttributeContext_Api* temp = api_;
  api_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Api* AttributeContext::_internal_mutable_api() {
  
  if (api_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Api>(GetArena());
    api_ = p;
  }
  return api_;
}
inline ::google::rpc::context::AttributeContext_Api* AttributeContext::mutable_api() {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.api)
  return _internal_mutable_api();
}
inline void AttributeContext::set_allocated_api(::google::rpc::context::AttributeContext_Api* api) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete api_;
  }
  if (api) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(api);
    if (message_arena != submessage_arena) {
      api = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, api, submessage_arena);
    }
    
  } else {
    
  }
  api_ = api;
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.api)
}

// repeated .google.protobuf.Any extensions = 8;
inline int AttributeContext::_internal_extensions_size() const {
  return extensions_.size();
}
inline int AttributeContext::extensions_size() const {
  return _internal_extensions_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* AttributeContext::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.extensions)
  return extensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
AttributeContext::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.extensions)
  return &extensions_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& AttributeContext::_internal_extensions(int index) const {
  return extensions_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& AttributeContext::extensions(int index) const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.extensions)
  return _internal_extensions(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* AttributeContext::_internal_add_extensions() {
  return extensions_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* AttributeContext::add_extensions() {
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.extensions)
  return _internal_add_extensions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
AttributeContext::extensions() const {
  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.extensions)
  return extensions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace context
}  // namespace rpc
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto
