//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//-V::568,590
#include "CoreMinimal.h"
#include "Misc/CoreMiscDefines.h"

THIRD_PARTY_INCLUDES_START
UE_PUSH_MACRO("TEXT")
#undef TEXT

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/bots.proto

#include "google/devtools/remoteworkers/v1test2/bots.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {
constexpr BotSession::BotSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leases_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bot_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worker_(nullptr)
  , expire_time_(nullptr)
  , status_(0)
{}
struct BotSessionDefaultTypeInternal {
  constexpr BotSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BotSessionDefaultTypeInternal() {}
  union {
    BotSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BotSessionDefaultTypeInternal _BotSession_default_instance_;
constexpr Lease::Lease(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assignment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , requirements_(nullptr)
  , expire_time_(nullptr)
  , inline_assignment_(nullptr)
  , payload_(nullptr)
  , result_(nullptr)
  , state_(0)
{}
struct LeaseDefaultTypeInternal {
  constexpr LeaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseDefaultTypeInternal() {}
  union {
    Lease _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseDefaultTypeInternal _Lease_default_instance_;
constexpr AdminTemp::AdminTemp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(0)
{}
struct AdminTempDefaultTypeInternal {
  constexpr AdminTempDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdminTempDefaultTypeInternal() {}
  union {
    AdminTemp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdminTempDefaultTypeInternal _AdminTemp_default_instance_;
constexpr CreateBotSessionRequest::CreateBotSessionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bot_session_(nullptr){}
struct CreateBotSessionRequestDefaultTypeInternal {
  constexpr CreateBotSessionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateBotSessionRequestDefaultTypeInternal() {}
  union {
    CreateBotSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateBotSessionRequestDefaultTypeInternal _CreateBotSessionRequest_default_instance_;
constexpr UpdateBotSessionRequest::UpdateBotSessionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bot_session_(nullptr)
  , update_mask_(nullptr){}
struct UpdateBotSessionRequestDefaultTypeInternal {
  constexpr UpdateBotSessionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateBotSessionRequestDefaultTypeInternal() {}
  union {
    UpdateBotSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateBotSessionRequestDefaultTypeInternal _UpdateBotSessionRequest_default_instance_;
}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::BotSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::BotSession, name_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::BotSession, bot_id_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::BotSession, status_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::BotSession, worker_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::BotSession, leases_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::BotSession, expire_time_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::BotSession, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, id_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, payload_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, result_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, state_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, status_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, requirements_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, expire_time_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, assignment_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::Lease, inline_assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::AdminTemp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::AdminTemp, command_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::AdminTemp, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest, bot_session_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest, bot_session_),
  PROTOBUF_FIELD_OFFSET(::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest, update_mask_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::devtools::remoteworkers::v1test2::BotSession)},
  { 12, -1, sizeof(::google::devtools::remoteworkers::v1test2::Lease)},
  { 26, -1, sizeof(::google::devtools::remoteworkers::v1test2::AdminTemp)},
  { 33, -1, sizeof(::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest)},
  { 40, -1, sizeof(::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::devtools::remoteworkers::v1test2::_BotSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::devtools::remoteworkers::v1test2::_Lease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::devtools::remoteworkers::v1test2::_AdminTemp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::devtools::remoteworkers::v1test2::_CreateBotSessionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::devtools::remoteworkers::v1test2::_UpdateBotSessionRequest_default_instance_),
};

const char descriptor_table_protodef_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0google/devtools/remoteworkers/v1test2/"
  "bots.proto\022%google.devtools.remoteworker"
  "s.v1test2\032\034google/api/annotations.proto\032"
  "\027google/api/client.proto\032\037google/api/fie"
  "ld_behavior.proto\032\031google/api/resource.p"
  "roto\0322google/devtools/remoteworkers/v1te"
  "st2/worker.proto\032\031google/protobuf/any.pr"
  "oto\032 google/protobuf/field_mask.proto\032\037g"
  "oogle/protobuf/timestamp.proto\032\027google/r"
  "pc/status.proto\"\206\003\n\nBotSession\022\014\n\004name\030\001"
  " \001(\t\022\016\n\006bot_id\030\002 \001(\t\022@\n\006status\030\003 \001(\01620.g"
  "oogle.devtools.remoteworkers.v1test2.Bot"
  "Status\022=\n\006worker\030\004 \001(\0132-.google.devtools"
  ".remoteworkers.v1test2.Worker\022<\n\006leases\030"
  "\005 \003(\0132,.google.devtools.remoteworkers.v1"
  "test2.Lease\022/\n\013expire_time\030\006 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\017\n\007version\030\007 \001(\t:Y\352"
  "AV\n\'remoteworkers.googleapis.com/BotSess"
  "ion\022+{unknown_path=**}/botSessions/{bot_"
  "session}\"\211\003\n\005Lease\022\n\n\002id\030\007 \001(\t\022%\n\007payloa"
  "d\030\010 \001(\0132\024.google.protobuf.Any\022$\n\006result\030"
  "\t \001(\0132\024.google.protobuf.Any\022@\n\005state\030\002 \001"
  "(\01621.google.devtools.remoteworkers.v1tes"
  "t2.LeaseState\022\"\n\006status\030\003 \001(\0132\022.google.r"
  "pc.Status\022C\n\014requirements\030\004 \001(\0132-.google"
  ".devtools.remoteworkers.v1test2.Worker\022/"
  "\n\013expire_time\030\005 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\026\n\nassignment\030\001 \001(\tB\002\030\001\0223\n\021inlin"
  "e_assignment\030\006 \001(\0132\024.google.protobuf.Any"
  "B\002\030\001\"\305\001\n\tAdminTemp\022I\n\007command\030\001 \001(\01628.go"
  "ogle.devtools.remoteworkers.v1test2.Admi"
  "nTemp.Command\022\013\n\003arg\030\002 \001(\t\"`\n\007Command\022\017\n"
  "\013UNSPECIFIED\020\000\022\016\n\nBOT_UPDATE\020\001\022\017\n\013BOT_RE"
  "START\020\002\022\021\n\rBOT_TERMINATE\020\003\022\020\n\014HOST_RESTA"
  "RT\020\004\"{\n\027CreateBotSessionRequest\022\023\n\006paren"
  "t\030\001 \001(\tB\003\340A\002\022K\n\013bot_session\030\002 \001(\01321.goog"
  "le.devtools.remoteworkers.v1test2.BotSes"
  "sionB\003\340A\002\"\333\001\n\027UpdateBotSessionRequest\022=\n"
  "\004name\030\001 \001(\tB/\340A\002\372A)\n\'remoteworkers.googl"
  "eapis.com/BotSession\022K\n\013bot_session\030\002 \001("
  "\01321.google.devtools.remoteworkers.v1test"
  "2.BotSessionB\003\340A\002\0224\n\013update_mask\030\003 \001(\0132\032"
  ".google.protobuf.FieldMaskB\003\340A\002*y\n\tBotSt"
  "atus\022\032\n\026BOT_STATUS_UNSPECIFIED\020\000\022\006\n\002OK\020\001"
  "\022\r\n\tUNHEALTHY\020\002\022\022\n\016HOST_REBOOTING\020\003\022\023\n\017B"
  "OT_TERMINATING\020\004\022\020\n\014INITIALIZING\020\005*`\n\nLe"
  "aseState\022\033\n\027LEASE_STATE_UNSPECIFIED\020\000\022\013\n"
  "\007PENDING\020\001\022\n\n\006ACTIVE\020\002\022\r\n\tCOMPLETED\020\004\022\r\n"
  "\tCANCELLED\020\0052\331\003\n\004Bots\022\321\001\n\020CreateBotSessi"
  "on\022>.google.devtools.remoteworkers.v1tes"
  "t2.CreateBotSessionRequest\0321.google.devt"
  "ools.remoteworkers.v1test2.BotSession\"J\202"
  "\323\344\223\002/\" /v1test2/{parent=**}/botSessions:"
  "\013bot_session\332A\022parent,bot_session\022\333\001\n\020Up"
  "dateBotSession\022>.google.devtools.remotew"
  "orkers.v1test2.UpdateBotSessionRequest\0321"
  ".google.devtools.remoteworkers.v1test2.B"
  "otSession\"T\202\323\344\223\002/2 /v1test2/{name=**/bot"
  "Sessions/*}:\013bot_session\332A\034name,bot_sess"
  "ion,update_mask\032\037\312A\034remoteworkers.google"
  "apis.comB\301\001\n)com.google.devtools.remotew"
  "orkers.v1test2B\021RemoteWorkersBotsP\001ZRgoo"
  "gle.golang.org/genproto/googleapis/devto"
  "ols/remoteworkers/v1test2;remoteworkers\242"
  "\002\002RW\252\002%Google.DevTools.RemoteWorkers.V1T"
  "est2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_deps[9] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fapi_2fresource_2eproto,
  &::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto = {
  false, false, 2612, descriptor_table_protodef_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto, "google/devtools/remoteworkers/v1test2/bots.proto", 
  &descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_once, descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_deps, 9, 5,
  schemas, file_default_instances, TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto::offsets,
  file_level_metadata_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto, file_level_enum_descriptors_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto, file_level_service_descriptors_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto);
  return descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto(&descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto);
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdminTemp_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto);
  return file_level_enum_descriptors_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto[0];
}
bool AdminTemp_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AdminTemp_Command AdminTemp::UNSPECIFIED;
constexpr AdminTemp_Command AdminTemp::BOT_UPDATE;
constexpr AdminTemp_Command AdminTemp::BOT_RESTART;
constexpr AdminTemp_Command AdminTemp::BOT_TERMINATE;
constexpr AdminTemp_Command AdminTemp::HOST_RESTART;
constexpr AdminTemp_Command AdminTemp::Command_MIN;
constexpr AdminTemp_Command AdminTemp::Command_MAX;
constexpr int AdminTemp::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BotStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto);
  return file_level_enum_descriptors_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto[1];
}
bool BotStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeaseState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto);
  return file_level_enum_descriptors_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto[2];
}
bool LeaseState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BotSession::_Internal {
 public:
  static const ::google::devtools::remoteworkers::v1test2::Worker& worker(const BotSession* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expire_time(const BotSession* msg);
};

const ::google::devtools::remoteworkers::v1test2::Worker&
BotSession::_Internal::worker(const BotSession* msg) {
  return *msg->worker_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
BotSession::_Internal::expire_time(const BotSession* msg) {
  return *msg->expire_time_;
}
void BotSession::clear_worker() {
  if (GetArena() == nullptr && worker_ != nullptr) {
    delete worker_;
  }
  worker_ = nullptr;
}
void BotSession::clear_expire_time() {
  if (GetArena() == nullptr && expire_time_ != nullptr) {
    delete expire_time_;
  }
  expire_time_ = nullptr;
}
BotSession::BotSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.devtools.remoteworkers.v1test2.BotSession)
}
BotSession::BotSession(const BotSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  bot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bot_id().empty()) {
    bot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bot_id(), 
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  if (from._internal_has_worker()) {
    worker_ = new ::google::devtools::remoteworkers::v1test2::Worker(*from.worker_);
  } else {
    worker_ = nullptr;
  }
  if (from._internal_has_expire_time()) {
    expire_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expire_time_);
  } else {
    expire_time_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.remoteworkers.v1test2.BotSession)
}

void BotSession::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worker_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&worker_)) + sizeof(status_));
}

BotSession::~BotSession() {
  // @@protoc_insertion_point(destructor:google.devtools.remoteworkers.v1test2.BotSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BotSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete worker_;
  if (this != internal_default_instance()) delete expire_time_;
}

void BotSession::ArenaDtor(void* object) {
  BotSession* _this = reinterpret_cast< BotSession* >(object);
  (void)_this;
}
void BotSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BotSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BotSession::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.remoteworkers.v1test2.BotSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leases_.Clear();
  name_.ClearToEmpty();
  bot_id_.ClearToEmpty();
  version_.ClearToEmpty();
  if (GetArena() == nullptr && worker_ != nullptr) {
    delete worker_;
  }
  worker_ = nullptr;
  if (GetArena() == nullptr && expire_time_ != nullptr) {
    delete expire_time_;
  }
  expire_time_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BotSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.devtools.remoteworkers.v1test2.BotSession.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.devtools.remoteworkers.v1test2.BotSession.bot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.devtools.remoteworkers.v1test2.BotStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::google::devtools::remoteworkers::v1test2::BotStatus>(val));
        } else goto handle_unusual;
        continue;
      // .google.devtools.remoteworkers.v1test2.Worker worker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expire_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.devtools.remoteworkers.v1test2.BotSession.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BotSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.remoteworkers.v1test2.BotSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.devtools.remoteworkers.v1test2.BotSession.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string bot_id = 2;
  if (this->bot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bot_id().data(), static_cast<int>(this->_internal_bot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.devtools.remoteworkers.v1test2.BotSession.bot_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bot_id(), target);
  }

  // .google.devtools.remoteworkers.v1test2.BotStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // .google.devtools.remoteworkers.v1test2.Worker worker = 4;
  if (this->has_worker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::worker(this), target, stream);
  }

  // repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_leases(i), target, stream);
  }

  // .google.protobuf.Timestamp expire_time = 6;
  if (this->has_expire_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::expire_time(this), target, stream);
  }

  // string version = 7;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.devtools.remoteworkers.v1test2.BotSession.version");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.remoteworkers.v1test2.BotSession)
  return target;
}

size_t BotSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.remoteworkers.v1test2.BotSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;
  total_size += 1UL * this->_internal_leases_size();
  for (const auto& msg : this->leases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string bot_id = 2;
  if (this->bot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bot_id());
  }

  // string version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.devtools.remoteworkers.v1test2.Worker worker = 4;
  if (this->has_worker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worker_);
  }

  // .google.protobuf.Timestamp expire_time = 6;
  if (this->has_expire_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expire_time_);
  }

  // .google.devtools.remoteworkers.v1test2.BotStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BotSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.remoteworkers.v1test2.BotSession)
  GOOGLE_DCHECK_NE(&from, this);
  const BotSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BotSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.remoteworkers.v1test2.BotSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.remoteworkers.v1test2.BotSession)
    MergeFrom(*source);
  }
}

void BotSession::MergeFrom(const BotSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.remoteworkers.v1test2.BotSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leases_.MergeFrom(from.leases_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.bot_id().size() > 0) {
    _internal_set_bot_id(from._internal_bot_id());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_worker()) {
    _internal_mutable_worker()->::google::devtools::remoteworkers::v1test2::Worker::MergeFrom(from._internal_worker());
  }
  if (from.has_expire_time()) {
    _internal_mutable_expire_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expire_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void BotSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.remoteworkers.v1test2.BotSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotSession::CopyFrom(const BotSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.remoteworkers.v1test2.BotSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotSession::IsInitialized() const {
  return true;
}

void BotSession::InternalSwap(BotSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leases_.InternalSwap(&other->leases_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bot_id_.Swap(&other->bot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BotSession, status_)
      + sizeof(BotSession::status_)
      - PROTOBUF_FIELD_OFFSET(BotSession, worker_)>(
          reinterpret_cast<char*>(&worker_),
          reinterpret_cast<char*>(&other->worker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BotSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Lease::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& payload(const Lease* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& result(const Lease* msg);
  static const ::google::rpc::Status& status(const Lease* msg);
  static const ::google::devtools::remoteworkers::v1test2::Worker& requirements(const Lease* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expire_time(const Lease* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& inline_assignment(const Lease* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Lease::_Internal::payload(const Lease* msg) {
  return *msg->payload_;
}
const PROTOBUF_NAMESPACE_ID::Any&
Lease::_Internal::result(const Lease* msg) {
  return *msg->result_;
}
const ::google::rpc::Status&
Lease::_Internal::status(const Lease* msg) {
  return *msg->status_;
}
const ::google::devtools::remoteworkers::v1test2::Worker&
Lease::_Internal::requirements(const Lease* msg) {
  return *msg->requirements_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Lease::_Internal::expire_time(const Lease* msg) {
  return *msg->expire_time_;
}
const PROTOBUF_NAMESPACE_ID::Any&
Lease::_Internal::inline_assignment(const Lease* msg) {
  return *msg->inline_assignment_;
}
void Lease::clear_payload() {
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
void Lease::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
void Lease::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void Lease::clear_requirements() {
  if (GetArena() == nullptr && requirements_ != nullptr) {
    delete requirements_;
  }
  requirements_ = nullptr;
}
void Lease::clear_expire_time() {
  if (GetArena() == nullptr && expire_time_ != nullptr) {
    delete expire_time_;
  }
  expire_time_ = nullptr;
}
void Lease::clear_inline_assignment() {
  if (GetArena() == nullptr && inline_assignment_ != nullptr) {
    delete inline_assignment_;
  }
  inline_assignment_ = nullptr;
}
Lease::Lease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.devtools.remoteworkers.v1test2.Lease)
}
Lease::Lease(const Lease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assignment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assignment().empty()) {
    assignment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assignment(), 
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_requirements()) {
    requirements_ = new ::google::devtools::remoteworkers::v1test2::Worker(*from.requirements_);
  } else {
    requirements_ = nullptr;
  }
  if (from._internal_has_expire_time()) {
    expire_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expire_time_);
  } else {
    expire_time_ = nullptr;
  }
  if (from._internal_has_inline_assignment()) {
    inline_assignment_ = new PROTOBUF_NAMESPACE_ID::Any(*from.inline_assignment_);
  } else {
    inline_assignment_ = nullptr;
  }
  if (from._internal_has_payload()) {
    payload_ = new PROTOBUF_NAMESPACE_ID::Any(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  if (from._internal_has_result()) {
    result_ = new PROTOBUF_NAMESPACE_ID::Any(*from.result_);
  } else {
    result_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.remoteworkers.v1test2.Lease)
}

void Lease::SharedCtor() {
assignment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:google.devtools.remoteworkers.v1test2.Lease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  assignment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete requirements_;
  if (this != internal_default_instance()) delete expire_time_;
  if (this != internal_default_instance()) delete inline_assignment_;
  if (this != internal_default_instance()) delete payload_;
  if (this != internal_default_instance()) delete result_;
}

void Lease::ArenaDtor(void* object) {
  Lease* _this = reinterpret_cast< Lease* >(object);
  (void)_this;
}
void Lease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lease::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.remoteworkers.v1test2.Lease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assignment_.ClearToEmpty();
  id_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && requirements_ != nullptr) {
    delete requirements_;
  }
  requirements_ = nullptr;
  if (GetArena() == nullptr && expire_time_ != nullptr) {
    delete expire_time_;
  }
  expire_time_ = nullptr;
  if (GetArena() == nullptr && inline_assignment_ != nullptr) {
    delete inline_assignment_;
  }
  inline_assignment_ = nullptr;
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string assignment = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_assignment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.devtools.remoteworkers.v1test2.Lease.assignment"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.devtools.remoteworkers.v1test2.LeaseState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::google::devtools::remoteworkers::v1test2::LeaseState>(val));
        } else goto handle_unusual;
        continue;
      // .google.rpc.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.devtools.remoteworkers.v1test2.Worker requirements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_requirements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expire_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any inline_assignment = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inline_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.devtools.remoteworkers.v1test2.Lease.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any payload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any result = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.remoteworkers.v1test2.Lease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assignment = 1 [deprecated = true];
  if (this->assignment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assignment().data(), static_cast<int>(this->_internal_assignment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.devtools.remoteworkers.v1test2.Lease.assignment");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_assignment(), target);
  }

  // .google.devtools.remoteworkers.v1test2.LeaseState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .google.rpc.Status status = 3;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // .google.devtools.remoteworkers.v1test2.Worker requirements = 4;
  if (this->has_requirements()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::requirements(this), target, stream);
  }

  // .google.protobuf.Timestamp expire_time = 5;
  if (this->has_expire_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::expire_time(this), target, stream);
  }

  // .google.protobuf.Any inline_assignment = 6 [deprecated = true];
  if (this->has_inline_assignment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::inline_assignment(this), target, stream);
  }

  // string id = 7;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.devtools.remoteworkers.v1test2.Lease.id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id(), target);
  }

  // .google.protobuf.Any payload = 8;
  if (this->has_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::payload(this), target, stream);
  }

  // .google.protobuf.Any result = 9;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.remoteworkers.v1test2.Lease)
  return target;
}

size_t Lease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.remoteworkers.v1test2.Lease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assignment = 1 [deprecated = true];
  if (this->assignment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assignment());
  }

  // string id = 7;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.rpc.Status status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .google.devtools.remoteworkers.v1test2.Worker requirements = 4;
  if (this->has_requirements()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requirements_);
  }

  // .google.protobuf.Timestamp expire_time = 5;
  if (this->has_expire_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expire_time_);
  }

  // .google.protobuf.Any inline_assignment = 6 [deprecated = true];
  if (this->has_inline_assignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inline_assignment_);
  }

  // .google.protobuf.Any payload = 8;
  if (this->has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  // .google.protobuf.Any result = 9;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .google.devtools.remoteworkers.v1test2.LeaseState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.remoteworkers.v1test2.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  const Lease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.remoteworkers.v1test2.Lease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.remoteworkers.v1test2.Lease)
    MergeFrom(*source);
  }
}

void Lease::MergeFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.remoteworkers.v1test2.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assignment().size() > 0) {
    _internal_set_assignment(from._internal_assignment());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::google::rpc::Status::MergeFrom(from._internal_status());
  }
  if (from.has_requirements()) {
    _internal_mutable_requirements()->::google::devtools::remoteworkers::v1test2::Worker::MergeFrom(from._internal_requirements());
  }
  if (from.has_expire_time()) {
    _internal_mutable_expire_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expire_time());
  }
  if (from.has_inline_assignment()) {
    _internal_mutable_inline_assignment()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_inline_assignment());
  }
  if (from.has_payload()) {
    _internal_mutable_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_payload());
  }
  if (from.has_result()) {
    _internal_mutable_result()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_result());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void Lease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.remoteworkers.v1test2.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lease::CopyFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.remoteworkers.v1test2.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {
  return true;
}

void Lease::InternalSwap(Lease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assignment_.Swap(&other->assignment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lease, state_)
      + sizeof(Lease::state_)
      - PROTOBUF_FIELD_OFFSET(Lease, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Lease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdminTemp::_Internal {
 public:
};

AdminTemp::AdminTemp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.devtools.remoteworkers.v1test2.AdminTemp)
}
AdminTemp::AdminTemp(const AdminTemp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_arg().empty()) {
    arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_arg(), 
      GetArena());
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:google.devtools.remoteworkers.v1test2.AdminTemp)
}

void AdminTemp::SharedCtor() {
arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
command_ = 0;
}

AdminTemp::~AdminTemp() {
  // @@protoc_insertion_point(destructor:google.devtools.remoteworkers.v1test2.AdminTemp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdminTemp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  arg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdminTemp::ArenaDtor(void* object) {
  AdminTemp* _this = reinterpret_cast< AdminTemp* >(object);
  (void)_this;
}
void AdminTemp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminTemp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdminTemp::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.remoteworkers.v1test2.AdminTemp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_.ClearToEmpty();
  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminTemp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.devtools.remoteworkers.v1test2.AdminTemp.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::google::devtools::remoteworkers::v1test2::AdminTemp_Command>(val));
        } else goto handle_unusual;
        continue;
      // string arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_arg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.devtools.remoteworkers.v1test2.AdminTemp.arg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminTemp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.remoteworkers.v1test2.AdminTemp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.devtools.remoteworkers.v1test2.AdminTemp.Command command = 1;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // string arg = 2;
  if (this->arg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arg().data(), static_cast<int>(this->_internal_arg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.devtools.remoteworkers.v1test2.AdminTemp.arg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.remoteworkers.v1test2.AdminTemp)
  return target;
}

size_t AdminTemp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.remoteworkers.v1test2.AdminTemp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string arg = 2;
  if (this->arg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arg());
  }

  // .google.devtools.remoteworkers.v1test2.AdminTemp.Command command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminTemp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.remoteworkers.v1test2.AdminTemp)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminTemp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminTemp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.remoteworkers.v1test2.AdminTemp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.remoteworkers.v1test2.AdminTemp)
    MergeFrom(*source);
  }
}

void AdminTemp::MergeFrom(const AdminTemp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.remoteworkers.v1test2.AdminTemp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg().size() > 0) {
    _internal_set_arg(from._internal_arg());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void AdminTemp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.remoteworkers.v1test2.AdminTemp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminTemp::CopyFrom(const AdminTemp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.remoteworkers.v1test2.AdminTemp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminTemp::IsInitialized() const {
  return true;
}

void AdminTemp::InternalSwap(AdminTemp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arg_.Swap(&other->arg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminTemp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateBotSessionRequest::_Internal {
 public:
  static const ::google::devtools::remoteworkers::v1test2::BotSession& bot_session(const CreateBotSessionRequest* msg);
};

const ::google::devtools::remoteworkers::v1test2::BotSession&
CreateBotSessionRequest::_Internal::bot_session(const CreateBotSessionRequest* msg) {
  return *msg->bot_session_;
}
CreateBotSessionRequest::CreateBotSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
}
CreateBotSessionRequest::CreateBotSessionRequest(const CreateBotSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArena());
  }
  if (from._internal_has_bot_session()) {
    bot_session_ = new ::google::devtools::remoteworkers::v1test2::BotSession(*from.bot_session_);
  } else {
    bot_session_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
}

void CreateBotSessionRequest::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bot_session_ = nullptr;
}

CreateBotSessionRequest::~CreateBotSessionRequest() {
  // @@protoc_insertion_point(destructor:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateBotSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bot_session_;
}

void CreateBotSessionRequest::ArenaDtor(void* object) {
  CreateBotSessionRequest* _this = reinterpret_cast< CreateBotSessionRequest* >(object);
  (void)_this;
}
void CreateBotSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateBotSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateBotSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  if (GetArena() == nullptr && bot_session_ != nullptr) {
    delete bot_session_;
  }
  bot_session_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateBotSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1 [(.google.api.field_behavior) = REQUIRED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateBotSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_bot_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bot_session(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  return target;
}

size_t CreateBotSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [(.google.api.field_behavior) = REQUIRED];
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_bot_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bot_session_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateBotSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateBotSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateBotSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
    MergeFrom(*source);
  }
}

void CreateBotSessionRequest::MergeFrom(const CreateBotSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.has_bot_session()) {
    _internal_mutable_bot_session()->::google::devtools::remoteworkers::v1test2::BotSession::MergeFrom(from._internal_bot_session());
  }
}

void CreateBotSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateBotSessionRequest::CopyFrom(const CreateBotSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateBotSessionRequest::IsInitialized() const {
  return true;
}

void CreateBotSessionRequest::InternalSwap(CreateBotSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bot_session_, other->bot_session_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateBotSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateBotSessionRequest::_Internal {
 public:
  static const ::google::devtools::remoteworkers::v1test2::BotSession& bot_session(const UpdateBotSessionRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateBotSessionRequest* msg);
};

const ::google::devtools::remoteworkers::v1test2::BotSession&
UpdateBotSessionRequest::_Internal::bot_session(const UpdateBotSessionRequest* msg) {
  return *msg->bot_session_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateBotSessionRequest::_Internal::update_mask(const UpdateBotSessionRequest* msg) {
  return *msg->update_mask_;
}
void UpdateBotSessionRequest::clear_update_mask() {
  if (GetArena() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateBotSessionRequest::UpdateBotSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
}
UpdateBotSessionRequest::UpdateBotSessionRequest(const UpdateBotSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_bot_session()) {
    bot_session_ = new ::google::devtools::remoteworkers::v1test2::BotSession(*from.bot_session_);
  } else {
    bot_session_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
}

void UpdateBotSessionRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bot_session_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&update_mask_) -
    reinterpret_cast<char*>(&bot_session_)) + sizeof(update_mask_));
}

UpdateBotSessionRequest::~UpdateBotSessionRequest() {
  // @@protoc_insertion_point(destructor:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateBotSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bot_session_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateBotSessionRequest::ArenaDtor(void* object) {
  UpdateBotSessionRequest* _this = reinterpret_cast< UpdateBotSessionRequest* >(object);
  (void)_this;
}
void UpdateBotSessionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateBotSessionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateBotSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && bot_session_ != nullptr) {
    delete bot_session_;
  }
  bot_session_ = nullptr;
  if (GetArena() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateBotSessionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = REQUIRED];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBotSessionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_bot_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bot_session(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  return target;
}

size_t UpdateBotSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_bot_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bot_session_);
  }

  // .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = REQUIRED];
  if (this->has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBotSessionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBotSessionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBotSessionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
    MergeFrom(*source);
  }
}

void UpdateBotSessionRequest::MergeFrom(const UpdateBotSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_bot_session()) {
    _internal_mutable_bot_session()->::google::devtools::remoteworkers::v1test2::BotSession::MergeFrom(from._internal_bot_session());
  }
  if (from.has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
}

void UpdateBotSessionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBotSessionRequest::CopyFrom(const UpdateBotSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBotSessionRequest::IsInitialized() const {
  return true;
}

void UpdateBotSessionRequest::InternalSwap(UpdateBotSessionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateBotSessionRequest, update_mask_)
      + sizeof(UpdateBotSessionRequest::update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateBotSessionRequest, bot_session_)>(
          reinterpret_cast<char*>(&bot_session_),
          reinterpret_cast<char*>(&other->bot_session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBotSessionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::devtools::remoteworkers::v1test2::BotSession* Arena::CreateMaybeMessage< ::google::devtools::remoteworkers::v1test2::BotSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::devtools::remoteworkers::v1test2::BotSession >(arena);
}
template<> PROTOBUF_NOINLINE ::google::devtools::remoteworkers::v1test2::Lease* Arena::CreateMaybeMessage< ::google::devtools::remoteworkers::v1test2::Lease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::devtools::remoteworkers::v1test2::Lease >(arena);
}
template<> PROTOBUF_NOINLINE ::google::devtools::remoteworkers::v1test2::AdminTemp* Arena::CreateMaybeMessage< ::google::devtools::remoteworkers::v1test2::AdminTemp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::devtools::remoteworkers::v1test2::AdminTemp >(arena);
}
template<> PROTOBUF_NOINLINE ::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest* Arena::CreateMaybeMessage< ::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest* Arena::CreateMaybeMessage< ::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

UE_POP_MACRO("TEXT")
THIRD_PARTY_INCLUDES_END
