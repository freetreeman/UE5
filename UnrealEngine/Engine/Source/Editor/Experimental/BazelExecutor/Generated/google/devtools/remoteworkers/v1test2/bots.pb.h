//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/bots.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/resource.pb.h"
#include "google/devtools/remoteworkers/v1test2/worker.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_metadata_getter(int index);
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {
class AdminTemp;
struct AdminTempDefaultTypeInternal;
extern AdminTempDefaultTypeInternal _AdminTemp_default_instance_;
class BotSession;
struct BotSessionDefaultTypeInternal;
extern BotSessionDefaultTypeInternal _BotSession_default_instance_;
class CreateBotSessionRequest;
struct CreateBotSessionRequestDefaultTypeInternal;
extern CreateBotSessionRequestDefaultTypeInternal _CreateBotSessionRequest_default_instance_;
class Lease;
struct LeaseDefaultTypeInternal;
extern LeaseDefaultTypeInternal _Lease_default_instance_;
class UpdateBotSessionRequest;
struct UpdateBotSessionRequestDefaultTypeInternal;
extern UpdateBotSessionRequestDefaultTypeInternal _UpdateBotSessionRequest_default_instance_;
}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::devtools::remoteworkers::v1test2::AdminTemp* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::AdminTemp>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::BotSession* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::BotSession>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::CreateBotSessionRequest>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Lease* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Lease>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::UpdateBotSessionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {

enum AdminTemp_Command : int {
  AdminTemp_Command_UNSPECIFIED = 0,
  AdminTemp_Command_BOT_UPDATE = 1,
  AdminTemp_Command_BOT_RESTART = 2,
  AdminTemp_Command_BOT_TERMINATE = 3,
  AdminTemp_Command_HOST_RESTART = 4,
  AdminTemp_Command_AdminTemp_Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AdminTemp_Command_AdminTemp_Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AdminTemp_Command_IsValid(int value);
constexpr AdminTemp_Command AdminTemp_Command_Command_MIN = AdminTemp_Command_UNSPECIFIED;
constexpr AdminTemp_Command AdminTemp_Command_Command_MAX = AdminTemp_Command_HOST_RESTART;
constexpr int AdminTemp_Command_Command_ARRAYSIZE = AdminTemp_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdminTemp_Command_descriptor();
template<typename T>
inline const std::string& AdminTemp_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdminTemp_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdminTemp_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdminTemp_Command_descriptor(), enum_t_value);
}
inline bool AdminTemp_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdminTemp_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdminTemp_Command>(
    AdminTemp_Command_descriptor(), name, value);
}
enum BotStatus : int {
  BOT_STATUS_UNSPECIFIED = 0,
  OK = 1,
  UNHEALTHY = 2,
  HOST_REBOOTING = 3,
  BOT_TERMINATING = 4,
  INITIALIZING = 5,
  BotStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BotStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BotStatus_IsValid(int value);
constexpr BotStatus BotStatus_MIN = BOT_STATUS_UNSPECIFIED;
constexpr BotStatus BotStatus_MAX = INITIALIZING;
constexpr int BotStatus_ARRAYSIZE = BotStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BotStatus_descriptor();
template<typename T>
inline const std::string& BotStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BotStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BotStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BotStatus_descriptor(), enum_t_value);
}
inline bool BotStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BotStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BotStatus>(
    BotStatus_descriptor(), name, value);
}
enum LeaseState : int {
  LEASE_STATE_UNSPECIFIED = 0,
  PENDING = 1,
  ACTIVE = 2,
  COMPLETED = 4,
  CANCELLED = 5,
  LeaseState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LeaseState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LeaseState_IsValid(int value);
constexpr LeaseState LeaseState_MIN = LEASE_STATE_UNSPECIFIED;
constexpr LeaseState LeaseState_MAX = CANCELLED;
constexpr int LeaseState_ARRAYSIZE = LeaseState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LeaseState_descriptor();
template<typename T>
inline const std::string& LeaseState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LeaseState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LeaseState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LeaseState_descriptor(), enum_t_value);
}
inline bool LeaseState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LeaseState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LeaseState>(
    LeaseState_descriptor(), name, value);
}
// ===================================================================

class BotSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.BotSession) */ {
 public:
  inline BotSession() : BotSession(nullptr) {}
  virtual ~BotSession();
  explicit constexpr BotSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BotSession(const BotSession& from);
  BotSession(BotSession&& from) noexcept
    : BotSession() {
    *this = ::std::move(from);
  }

  inline BotSession& operator=(const BotSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotSession& operator=(BotSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BotSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const BotSession* internal_default_instance() {
    return reinterpret_cast<const BotSession*>(
               &_BotSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BotSession& a, BotSession& b) {
    a.Swap(&b);
  }
  inline void Swap(BotSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotSession* New() const final {
    return CreateMaybeMessage<BotSession>(nullptr);
  }

  BotSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotSession& from);
  void MergeFrom(const BotSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.BotSession";
  }
  protected:
  explicit BotSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeasesFieldNumber = 5,
    kNameFieldNumber = 1,
    kBotIdFieldNumber = 2,
    kVersionFieldNumber = 7,
    kWorkerFieldNumber = 4,
    kExpireTimeFieldNumber = 6,
    kStatusFieldNumber = 3,
  };
  // repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;
  int leases_size() const;
  private:
  int _internal_leases_size() const;
  public:
  void clear_leases();
  ::google::devtools::remoteworkers::v1test2::Lease* mutable_leases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease >*
      mutable_leases();
  private:
  const ::google::devtools::remoteworkers::v1test2::Lease& _internal_leases(int index) const;
  ::google::devtools::remoteworkers::v1test2::Lease* _internal_add_leases();
  public:
  const ::google::devtools::remoteworkers::v1test2::Lease& leases(int index) const;
  ::google::devtools::remoteworkers::v1test2::Lease* add_leases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease >&
      leases() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string bot_id = 2;
  void clear_bot_id();
  const std::string& bot_id() const;
  void set_bot_id(const std::string& value);
  void set_bot_id(std::string&& value);
  void set_bot_id(const char* value);
  void set_bot_id(const char* value, size_t size);
  std::string* mutable_bot_id();
  std::string* release_bot_id();
  void set_allocated_bot_id(std::string* bot_id);
  private:
  const std::string& _internal_bot_id() const;
  void _internal_set_bot_id(const std::string& value);
  std::string* _internal_mutable_bot_id();
  public:

  // string version = 7;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .google.devtools.remoteworkers.v1test2.Worker worker = 4;
  bool has_worker() const;
  private:
  bool _internal_has_worker() const;
  public:
  void clear_worker();
  const ::google::devtools::remoteworkers::v1test2::Worker& worker() const;
  ::google::devtools::remoteworkers::v1test2::Worker* release_worker();
  ::google::devtools::remoteworkers::v1test2::Worker* mutable_worker();
  void set_allocated_worker(::google::devtools::remoteworkers::v1test2::Worker* worker);
  private:
  const ::google::devtools::remoteworkers::v1test2::Worker& _internal_worker() const;
  ::google::devtools::remoteworkers::v1test2::Worker* _internal_mutable_worker();
  public:
  void unsafe_arena_set_allocated_worker(
      ::google::devtools::remoteworkers::v1test2::Worker* worker);
  ::google::devtools::remoteworkers::v1test2::Worker* unsafe_arena_release_worker();

  // .google.protobuf.Timestamp expire_time = 6;
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // .google.devtools.remoteworkers.v1test2.BotStatus status = 3;
  void clear_status();
  ::google::devtools::remoteworkers::v1test2::BotStatus status() const;
  void set_status(::google::devtools::remoteworkers::v1test2::BotStatus value);
  private:
  ::google::devtools::remoteworkers::v1test2::BotStatus _internal_status() const;
  void _internal_set_status(::google::devtools::remoteworkers::v1test2::BotStatus value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.BotSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease > leases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::google::devtools::remoteworkers::v1test2::Worker* worker_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto;
};
// -------------------------------------------------------------------

class Lease PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Lease) */ {
 public:
  inline Lease() : Lease(nullptr) {}
  virtual ~Lease();
  explicit constexpr Lease(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Lease(const Lease& from);
  Lease(Lease&& from) noexcept
    : Lease() {
    *this = ::std::move(from);
  }

  inline Lease& operator=(const Lease& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lease& operator=(Lease&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lease& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lease* internal_default_instance() {
    return reinterpret_cast<const Lease*>(
               &_Lease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Lease& a, Lease& b) {
    a.Swap(&b);
  }
  inline void Swap(Lease* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lease* New() const final {
    return CreateMaybeMessage<Lease>(nullptr);
  }

  Lease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lease>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lease& from);
  void MergeFrom(const Lease& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lease* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.Lease";
  }
  protected:
  explicit Lease(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
    kIdFieldNumber = 7,
    kStatusFieldNumber = 3,
    kRequirementsFieldNumber = 4,
    kExpireTimeFieldNumber = 5,
    kInlineAssignmentFieldNumber = 6,
    kPayloadFieldNumber = 8,
    kResultFieldNumber = 9,
    kStateFieldNumber = 2,
  };
  // string assignment = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_assignment();
  PROTOBUF_DEPRECATED const std::string& assignment() const;
  PROTOBUF_DEPRECATED void set_assignment(const std::string& value);
  PROTOBUF_DEPRECATED void set_assignment(std::string&& value);
  PROTOBUF_DEPRECATED void set_assignment(const char* value);
  PROTOBUF_DEPRECATED void set_assignment(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_assignment();
  PROTOBUF_DEPRECATED std::string* release_assignment();
  PROTOBUF_DEPRECATED void set_allocated_assignment(std::string* assignment);
  private:
  const std::string& _internal_assignment() const;
  void _internal_set_assignment(const std::string& value);
  std::string* _internal_mutable_assignment();
  public:

  // string id = 7;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.rpc.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // .google.devtools.remoteworkers.v1test2.Worker requirements = 4;
  bool has_requirements() const;
  private:
  bool _internal_has_requirements() const;
  public:
  void clear_requirements();
  const ::google::devtools::remoteworkers::v1test2::Worker& requirements() const;
  ::google::devtools::remoteworkers::v1test2::Worker* release_requirements();
  ::google::devtools::remoteworkers::v1test2::Worker* mutable_requirements();
  void set_allocated_requirements(::google::devtools::remoteworkers::v1test2::Worker* requirements);
  private:
  const ::google::devtools::remoteworkers::v1test2::Worker& _internal_requirements() const;
  ::google::devtools::remoteworkers::v1test2::Worker* _internal_mutable_requirements();
  public:
  void unsafe_arena_set_allocated_requirements(
      ::google::devtools::remoteworkers::v1test2::Worker* requirements);
  ::google::devtools::remoteworkers::v1test2::Worker* unsafe_arena_release_requirements();

  // .google.protobuf.Timestamp expire_time = 5;
  bool has_expire_time() const;
  private:
  bool _internal_has_expire_time() const;
  public:
  void clear_expire_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();

  // .google.protobuf.Any inline_assignment = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_inline_assignment() const;
  private:
  bool _internal_has_inline_assignment() const;
  public:
  PROTOBUF_DEPRECATED void clear_inline_assignment();
  PROTOBUF_DEPRECATED const PROTOBUF_NAMESPACE_ID::Any& inline_assignment() const;
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Any* release_inline_assignment();
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Any* mutable_inline_assignment();
  PROTOBUF_DEPRECATED void set_allocated_inline_assignment(PROTOBUF_NAMESPACE_ID::Any* inline_assignment);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_inline_assignment() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_inline_assignment();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_inline_assignment(
      PROTOBUF_NAMESPACE_ID::Any* inline_assignment);
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_inline_assignment();

  // .google.protobuf.Any payload = 8;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const PROTOBUF_NAMESPACE_ID::Any& payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_payload();
  void set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      PROTOBUF_NAMESPACE_ID::Any* payload);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_payload();

  // .google.protobuf.Any result = 9;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const PROTOBUF_NAMESPACE_ID::Any& result() const;
  PROTOBUF_NAMESPACE_ID::Any* release_result();
  PROTOBUF_NAMESPACE_ID::Any* mutable_result();
  void set_allocated_result(PROTOBUF_NAMESPACE_ID::Any* result);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_result() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      PROTOBUF_NAMESPACE_ID::Any* result);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_result();

  // .google.devtools.remoteworkers.v1test2.LeaseState state = 2;
  void clear_state();
  ::google::devtools::remoteworkers::v1test2::LeaseState state() const;
  void set_state(::google::devtools::remoteworkers::v1test2::LeaseState value);
  private:
  ::google::devtools::remoteworkers::v1test2::LeaseState _internal_state() const;
  void _internal_set_state(::google::devtools::remoteworkers::v1test2::LeaseState value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Lease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assignment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::google::rpc::Status* status_;
  ::google::devtools::remoteworkers::v1test2::Worker* requirements_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
  PROTOBUF_NAMESPACE_ID::Any* inline_assignment_;
  PROTOBUF_NAMESPACE_ID::Any* payload_;
  PROTOBUF_NAMESPACE_ID::Any* result_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto;
};
// -------------------------------------------------------------------

class AdminTemp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.AdminTemp) */ {
 public:
  inline AdminTemp() : AdminTemp(nullptr) {}
  virtual ~AdminTemp();
  explicit constexpr AdminTemp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdminTemp(const AdminTemp& from);
  AdminTemp(AdminTemp&& from) noexcept
    : AdminTemp() {
    *this = ::std::move(from);
  }

  inline AdminTemp& operator=(const AdminTemp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminTemp& operator=(AdminTemp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminTemp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdminTemp* internal_default_instance() {
    return reinterpret_cast<const AdminTemp*>(
               &_AdminTemp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AdminTemp& a, AdminTemp& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminTemp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminTemp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdminTemp* New() const final {
    return CreateMaybeMessage<AdminTemp>(nullptr);
  }

  AdminTemp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminTemp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminTemp& from);
  void MergeFrom(const AdminTemp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminTemp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.AdminTemp";
  }
  protected:
  explicit AdminTemp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef AdminTemp_Command Command;
  static constexpr Command UNSPECIFIED =
    AdminTemp_Command_UNSPECIFIED;
  static constexpr Command BOT_UPDATE =
    AdminTemp_Command_BOT_UPDATE;
  static constexpr Command BOT_RESTART =
    AdminTemp_Command_BOT_RESTART;
  static constexpr Command BOT_TERMINATE =
    AdminTemp_Command_BOT_TERMINATE;
  static constexpr Command HOST_RESTART =
    AdminTemp_Command_HOST_RESTART;
  static inline bool Command_IsValid(int value) {
    return AdminTemp_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    AdminTemp_Command_Command_MIN;
  static constexpr Command Command_MAX =
    AdminTemp_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    AdminTemp_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return AdminTemp_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return AdminTemp_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return AdminTemp_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 2,
    kCommandFieldNumber = 1,
  };
  // string arg = 2;
  void clear_arg();
  const std::string& arg() const;
  void set_arg(const std::string& value);
  void set_arg(std::string&& value);
  void set_arg(const char* value);
  void set_arg(const char* value, size_t size);
  std::string* mutable_arg();
  std::string* release_arg();
  void set_allocated_arg(std::string* arg);
  private:
  const std::string& _internal_arg() const;
  void _internal_set_arg(const std::string& value);
  std::string* _internal_mutable_arg();
  public:

  // .google.devtools.remoteworkers.v1test2.AdminTemp.Command command = 1;
  void clear_command();
  ::google::devtools::remoteworkers::v1test2::AdminTemp_Command command() const;
  void set_command(::google::devtools::remoteworkers::v1test2::AdminTemp_Command value);
  private:
  ::google::devtools::remoteworkers::v1test2::AdminTemp_Command _internal_command() const;
  void _internal_set_command(::google::devtools::remoteworkers::v1test2::AdminTemp_Command value);
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.AdminTemp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arg_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto;
};
// -------------------------------------------------------------------

class CreateBotSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest) */ {
 public:
  inline CreateBotSessionRequest() : CreateBotSessionRequest(nullptr) {}
  virtual ~CreateBotSessionRequest();
  explicit constexpr CreateBotSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateBotSessionRequest(const CreateBotSessionRequest& from);
  CreateBotSessionRequest(CreateBotSessionRequest&& from) noexcept
    : CreateBotSessionRequest() {
    *this = ::std::move(from);
  }

  inline CreateBotSessionRequest& operator=(const CreateBotSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateBotSessionRequest& operator=(CreateBotSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateBotSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateBotSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateBotSessionRequest*>(
               &_CreateBotSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateBotSessionRequest& a, CreateBotSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateBotSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateBotSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateBotSessionRequest* New() const final {
    return CreateMaybeMessage<CreateBotSessionRequest>(nullptr);
  }

  CreateBotSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateBotSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateBotSessionRequest& from);
  void MergeFrom(const CreateBotSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateBotSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.CreateBotSessionRequest";
  }
  protected:
  explicit CreateBotSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kBotSessionFieldNumber = 2,
  };
  // string parent = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_bot_session() const;
  private:
  bool _internal_has_bot_session() const;
  public:
  void clear_bot_session();
  const ::google::devtools::remoteworkers::v1test2::BotSession& bot_session() const;
  ::google::devtools::remoteworkers::v1test2::BotSession* release_bot_session();
  ::google::devtools::remoteworkers::v1test2::BotSession* mutable_bot_session();
  void set_allocated_bot_session(::google::devtools::remoteworkers::v1test2::BotSession* bot_session);
  private:
  const ::google::devtools::remoteworkers::v1test2::BotSession& _internal_bot_session() const;
  ::google::devtools::remoteworkers::v1test2::BotSession* _internal_mutable_bot_session();
  public:
  void unsafe_arena_set_allocated_bot_session(
      ::google::devtools::remoteworkers::v1test2::BotSession* bot_session);
  ::google::devtools::remoteworkers::v1test2::BotSession* unsafe_arena_release_bot_session();

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::google::devtools::remoteworkers::v1test2::BotSession* bot_session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto;
};
// -------------------------------------------------------------------

class UpdateBotSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest) */ {
 public:
  inline UpdateBotSessionRequest() : UpdateBotSessionRequest(nullptr) {}
  virtual ~UpdateBotSessionRequest();
  explicit constexpr UpdateBotSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateBotSessionRequest(const UpdateBotSessionRequest& from);
  UpdateBotSessionRequest(UpdateBotSessionRequest&& from) noexcept
    : UpdateBotSessionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateBotSessionRequest& operator=(const UpdateBotSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBotSessionRequest& operator=(UpdateBotSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBotSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateBotSessionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateBotSessionRequest*>(
               &_UpdateBotSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateBotSessionRequest& a, UpdateBotSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBotSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateBotSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBotSessionRequest* New() const final {
    return CreateMaybeMessage<UpdateBotSessionRequest>(nullptr);
  }

  UpdateBotSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBotSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBotSessionRequest& from);
  void MergeFrom(const UpdateBotSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBotSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest";
  }
  protected:
  explicit UpdateBotSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBotSessionFieldNumber = 2,
    kUpdateMaskFieldNumber = 3,
  };
  // string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_bot_session() const;
  private:
  bool _internal_has_bot_session() const;
  public:
  void clear_bot_session();
  const ::google::devtools::remoteworkers::v1test2::BotSession& bot_session() const;
  ::google::devtools::remoteworkers::v1test2::BotSession* release_bot_session();
  ::google::devtools::remoteworkers::v1test2::BotSession* mutable_bot_session();
  void set_allocated_bot_session(::google::devtools::remoteworkers::v1test2::BotSession* bot_session);
  private:
  const ::google::devtools::remoteworkers::v1test2::BotSession& _internal_bot_session() const;
  ::google::devtools::remoteworkers::v1test2::BotSession* _internal_mutable_bot_session();
  public:
  void unsafe_arena_set_allocated_bot_session(
      ::google::devtools::remoteworkers::v1test2::BotSession* bot_session);
  ::google::devtools::remoteworkers::v1test2::BotSession* unsafe_arena_release_bot_session();

  // .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::devtools::remoteworkers::v1test2::BotSession* bot_session_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BotSession

// string name = 1;
inline void BotSession::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BotSession::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.name)
  return _internal_name();
}
inline void BotSession::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.BotSession.name)
}
inline std::string* BotSession::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.name)
  return _internal_mutable_name();
}
inline const std::string& BotSession::_internal_name() const {
  return name_.Get();
}
inline void BotSession::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BotSession::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.BotSession.name)
}
inline void BotSession::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.BotSession.name)
}
inline void BotSession::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.BotSession.name)
}
inline std::string* BotSession::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BotSession::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BotSession::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.name)
}

// string bot_id = 2;
inline void BotSession::clear_bot_id() {
  bot_id_.ClearToEmpty();
}
inline const std::string& BotSession::bot_id() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
  return _internal_bot_id();
}
inline void BotSession::set_bot_id(const std::string& value) {
  _internal_set_bot_id(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}
inline std::string* BotSession::mutable_bot_id() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
  return _internal_mutable_bot_id();
}
inline const std::string& BotSession::_internal_bot_id() const {
  return bot_id_.Get();
}
inline void BotSession::_internal_set_bot_id(const std::string& value) {
  
  bot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BotSession::set_bot_id(std::string&& value) {
  
  bot_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}
inline void BotSession::set_bot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}
inline void BotSession::set_bot_id(const char* value,
    size_t size) {
  
  bot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}
inline std::string* BotSession::_internal_mutable_bot_id() {
  
  return bot_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BotSession::release_bot_id() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
  return bot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BotSession::set_allocated_bot_id(std::string* bot_id) {
  if (bot_id != nullptr) {
    
  } else {
    
  }
  bot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.bot_id)
}

// .google.devtools.remoteworkers.v1test2.BotStatus status = 3;
inline void BotSession::clear_status() {
  status_ = 0;
}
inline ::google::devtools::remoteworkers::v1test2::BotStatus BotSession::_internal_status() const {
  return static_cast< ::google::devtools::remoteworkers::v1test2::BotStatus >(status_);
}
inline ::google::devtools::remoteworkers::v1test2::BotStatus BotSession::status() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.status)
  return _internal_status();
}
inline void BotSession::_internal_set_status(::google::devtools::remoteworkers::v1test2::BotStatus value) {
  
  status_ = value;
}
inline void BotSession::set_status(::google::devtools::remoteworkers::v1test2::BotStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.BotSession.status)
}

// .google.devtools.remoteworkers.v1test2.Worker worker = 4;
inline bool BotSession::_internal_has_worker() const {
  return this != internal_default_instance() && worker_ != nullptr;
}
inline bool BotSession::has_worker() const {
  return _internal_has_worker();
}
inline const ::google::devtools::remoteworkers::v1test2::Worker& BotSession::_internal_worker() const {
  const ::google::devtools::remoteworkers::v1test2::Worker* p = worker_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::Worker&>(
      ::google::devtools::remoteworkers::v1test2::_Worker_default_instance_);
}
inline const ::google::devtools::remoteworkers::v1test2::Worker& BotSession::worker() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.worker)
  return _internal_worker();
}
inline void BotSession::unsafe_arena_set_allocated_worker(
    ::google::devtools::remoteworkers::v1test2::Worker* worker) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_);
  }
  worker_ = worker;
  if (worker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.worker)
}
inline ::google::devtools::remoteworkers::v1test2::Worker* BotSession::release_worker() {
  
  ::google::devtools::remoteworkers::v1test2::Worker* temp = worker_;
  worker_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Worker* BotSession::unsafe_arena_release_worker() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.worker)
  
  ::google::devtools::remoteworkers::v1test2::Worker* temp = worker_;
  worker_ = nullptr;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Worker* BotSession::_internal_mutable_worker() {
  
  if (worker_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker>(GetArena());
    worker_ = p;
  }
  return worker_;
}
inline ::google::devtools::remoteworkers::v1test2::Worker* BotSession::mutable_worker() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.worker)
  return _internal_mutable_worker();
}
inline void BotSession::set_allocated_worker(::google::devtools::remoteworkers::v1test2::Worker* worker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_);
  }
  if (worker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker)->GetArena();
    if (message_arena != submessage_arena) {
      worker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worker, submessage_arena);
    }
    
  } else {
    
  }
  worker_ = worker;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.worker)
}

// repeated .google.devtools.remoteworkers.v1test2.Lease leases = 5;
inline int BotSession::_internal_leases_size() const {
  return leases_.size();
}
inline int BotSession::leases_size() const {
  return _internal_leases_size();
}
inline void BotSession::clear_leases() {
  leases_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Lease* BotSession::mutable_leases(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return leases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease >*
BotSession::mutable_leases() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return &leases_;
}
inline const ::google::devtools::remoteworkers::v1test2::Lease& BotSession::_internal_leases(int index) const {
  return leases_.Get(index);
}
inline const ::google::devtools::remoteworkers::v1test2::Lease& BotSession::leases(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return _internal_leases(index);
}
inline ::google::devtools::remoteworkers::v1test2::Lease* BotSession::_internal_add_leases() {
  return leases_.Add();
}
inline ::google::devtools::remoteworkers::v1test2::Lease* BotSession::add_leases() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return _internal_add_leases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Lease >&
BotSession::leases() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.BotSession.leases)
  return leases_;
}

// .google.protobuf.Timestamp expire_time = 6;
inline bool BotSession::_internal_has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != nullptr;
}
inline bool BotSession::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BotSession::_internal_expire_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BotSession::expire_time() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
  return _internal_expire_time();
}
inline void BotSession::unsafe_arena_set_allocated_expire_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time_);
  }
  expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BotSession::release_expire_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BotSession::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BotSession::_internal_mutable_expire_time() {
  
  if (expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expire_time_ = p;
  }
  return expire_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BotSession::mutable_expire_time() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
  return _internal_mutable_expire_time();
}
inline void BotSession::set_allocated_expire_time(PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.expire_time)
}

// string version = 7;
inline void BotSession::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& BotSession::version() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.BotSession.version)
  return _internal_version();
}
inline void BotSession::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.BotSession.version)
}
inline std::string* BotSession::mutable_version() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.BotSession.version)
  return _internal_mutable_version();
}
inline const std::string& BotSession::_internal_version() const {
  return version_.Get();
}
inline void BotSession::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BotSession::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.BotSession.version)
}
inline void BotSession::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.BotSession.version)
}
inline void BotSession::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.BotSession.version)
}
inline std::string* BotSession::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BotSession::release_version() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.BotSession.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BotSession::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.BotSession.version)
}

// -------------------------------------------------------------------

// Lease

// string id = 7;
inline void Lease::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Lease::id() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.id)
  return _internal_id();
}
inline void Lease::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Lease.id)
}
inline std::string* Lease::mutable_id() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.id)
  return _internal_mutable_id();
}
inline const std::string& Lease::_internal_id() const {
  return id_.Get();
}
inline void Lease::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Lease::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Lease.id)
}
inline void Lease::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Lease.id)
}
inline void Lease::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Lease.id)
}
inline std::string* Lease::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Lease::release_id() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Lease::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.id)
}

// .google.protobuf.Any payload = 8;
inline bool Lease::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool Lease::has_payload() const {
  return _internal_has_payload();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Lease::_internal_payload() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Lease::payload() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.payload)
  return _internal_payload();
}
inline void Lease::unsafe_arena_set_allocated_payload(
    PROTOBUF_NAMESPACE_ID::Any* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.Lease.payload)
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::release_payload() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.payload)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.payload)
  return _internal_mutable_payload();
}
inline void Lease::set_allocated_payload(PROTOBUF_NAMESPACE_ID::Any* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload)->GetArena();
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.payload)
}

// .google.protobuf.Any result = 9;
inline bool Lease::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool Lease::has_result() const {
  return _internal_has_result();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Lease::_internal_result() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Lease::result() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.result)
  return _internal_result();
}
inline void Lease::unsafe_arena_set_allocated_result(
    PROTOBUF_NAMESPACE_ID::Any* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.Lease.result)
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::release_result() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.result)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = result_;
  result_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    result_ = p;
  }
  return result_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::mutable_result() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.result)
  return _internal_mutable_result();
}
inline void Lease::set_allocated_result(PROTOBUF_NAMESPACE_ID::Any* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.result)
}

// .google.devtools.remoteworkers.v1test2.LeaseState state = 2;
inline void Lease::clear_state() {
  state_ = 0;
}
inline ::google::devtools::remoteworkers::v1test2::LeaseState Lease::_internal_state() const {
  return static_cast< ::google::devtools::remoteworkers::v1test2::LeaseState >(state_);
}
inline ::google::devtools::remoteworkers::v1test2::LeaseState Lease::state() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.state)
  return _internal_state();
}
inline void Lease::_internal_set_state(::google::devtools::remoteworkers::v1test2::LeaseState value) {
  
  state_ = value;
}
inline void Lease::set_state(::google::devtools::remoteworkers::v1test2::LeaseState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Lease.state)
}

// .google.rpc.Status status = 3;
inline bool Lease::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Lease::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& Lease::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& Lease::status() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.status)
  return _internal_status();
}
inline void Lease::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.Lease.status)
}
inline ::google::rpc::Status* Lease::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* Lease::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* Lease::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* Lease::mutable_status() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.status)
  return _internal_mutable_status();
}
inline void Lease::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.status)
}

// .google.devtools.remoteworkers.v1test2.Worker requirements = 4;
inline bool Lease::_internal_has_requirements() const {
  return this != internal_default_instance() && requirements_ != nullptr;
}
inline bool Lease::has_requirements() const {
  return _internal_has_requirements();
}
inline const ::google::devtools::remoteworkers::v1test2::Worker& Lease::_internal_requirements() const {
  const ::google::devtools::remoteworkers::v1test2::Worker* p = requirements_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::Worker&>(
      ::google::devtools::remoteworkers::v1test2::_Worker_default_instance_);
}
inline const ::google::devtools::remoteworkers::v1test2::Worker& Lease::requirements() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.requirements)
  return _internal_requirements();
}
inline void Lease::unsafe_arena_set_allocated_requirements(
    ::google::devtools::remoteworkers::v1test2::Worker* requirements) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requirements_);
  }
  requirements_ = requirements;
  if (requirements) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.Lease.requirements)
}
inline ::google::devtools::remoteworkers::v1test2::Worker* Lease::release_requirements() {
  
  ::google::devtools::remoteworkers::v1test2::Worker* temp = requirements_;
  requirements_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Worker* Lease::unsafe_arena_release_requirements() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.requirements)
  
  ::google::devtools::remoteworkers::v1test2::Worker* temp = requirements_;
  requirements_ = nullptr;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::Worker* Lease::_internal_mutable_requirements() {
  
  if (requirements_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker>(GetArena());
    requirements_ = p;
  }
  return requirements_;
}
inline ::google::devtools::remoteworkers::v1test2::Worker* Lease::mutable_requirements() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.requirements)
  return _internal_mutable_requirements();
}
inline void Lease::set_allocated_requirements(::google::devtools::remoteworkers::v1test2::Worker* requirements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(requirements_);
  }
  if (requirements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requirements)->GetArena();
    if (message_arena != submessage_arena) {
      requirements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requirements, submessage_arena);
    }
    
  } else {
    
  }
  requirements_ = requirements;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.requirements)
}

// .google.protobuf.Timestamp expire_time = 5;
inline bool Lease::_internal_has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != nullptr;
}
inline bool Lease::has_expire_time() const {
  return _internal_has_expire_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Lease::_internal_expire_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Lease::expire_time() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.expire_time)
  return _internal_expire_time();
}
inline void Lease::unsafe_arena_set_allocated_expire_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time_);
  }
  expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.Lease.expire_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Lease::release_expire_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Lease::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.expire_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expire_time_;
  expire_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Lease::_internal_mutable_expire_time() {
  
  if (expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expire_time_ = p;
  }
  return expire_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Lease::mutable_expire_time() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.expire_time)
  return _internal_mutable_expire_time();
}
inline void Lease::set_allocated_expire_time(PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.expire_time)
}

// string assignment = 1 [deprecated = true];
inline void Lease::clear_assignment() {
  assignment_.ClearToEmpty();
}
inline const std::string& Lease::assignment() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.assignment)
  return _internal_assignment();
}
inline void Lease::set_assignment(const std::string& value) {
  _internal_set_assignment(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Lease.assignment)
}
inline std::string* Lease::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.assignment)
  return _internal_mutable_assignment();
}
inline const std::string& Lease::_internal_assignment() const {
  return assignment_.Get();
}
inline void Lease::_internal_set_assignment(const std::string& value) {
  
  assignment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Lease::set_assignment(std::string&& value) {
  
  assignment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Lease.assignment)
}
inline void Lease::set_assignment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assignment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Lease.assignment)
}
inline void Lease::set_assignment(const char* value,
    size_t size) {
  
  assignment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Lease.assignment)
}
inline std::string* Lease::_internal_mutable_assignment() {
  
  return assignment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Lease::release_assignment() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.assignment)
  return assignment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Lease::set_allocated_assignment(std::string* assignment) {
  if (assignment != nullptr) {
    
  } else {
    
  }
  assignment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assignment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.assignment)
}

// .google.protobuf.Any inline_assignment = 6 [deprecated = true];
inline bool Lease::_internal_has_inline_assignment() const {
  return this != internal_default_instance() && inline_assignment_ != nullptr;
}
inline bool Lease::has_inline_assignment() const {
  return _internal_has_inline_assignment();
}
inline const PROTOBUF_NAMESPACE_ID::Any& Lease::_internal_inline_assignment() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = inline_assignment_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& Lease::inline_assignment() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
  return _internal_inline_assignment();
}
inline void Lease::unsafe_arena_set_allocated_inline_assignment(
    PROTOBUF_NAMESPACE_ID::Any* inline_assignment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inline_assignment_);
  }
  inline_assignment_ = inline_assignment;
  if (inline_assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::release_inline_assignment() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = inline_assignment_;
  inline_assignment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::unsafe_arena_release_inline_assignment() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = inline_assignment_;
  inline_assignment_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::_internal_mutable_inline_assignment() {
  
  if (inline_assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    inline_assignment_ = p;
  }
  return inline_assignment_;
}
inline PROTOBUF_NAMESPACE_ID::Any* Lease::mutable_inline_assignment() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
  return _internal_mutable_inline_assignment();
}
inline void Lease::set_allocated_inline_assignment(PROTOBUF_NAMESPACE_ID::Any* inline_assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inline_assignment_);
  }
  if (inline_assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inline_assignment)->GetArena();
    if (message_arena != submessage_arena) {
      inline_assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inline_assignment, submessage_arena);
    }
    
  } else {
    
  }
  inline_assignment_ = inline_assignment;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Lease.inline_assignment)
}

// -------------------------------------------------------------------

// AdminTemp

// .google.devtools.remoteworkers.v1test2.AdminTemp.Command command = 1;
inline void AdminTemp::clear_command() {
  command_ = 0;
}
inline ::google::devtools::remoteworkers::v1test2::AdminTemp_Command AdminTemp::_internal_command() const {
  return static_cast< ::google::devtools::remoteworkers::v1test2::AdminTemp_Command >(command_);
}
inline ::google::devtools::remoteworkers::v1test2::AdminTemp_Command AdminTemp::command() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.AdminTemp.command)
  return _internal_command();
}
inline void AdminTemp::_internal_set_command(::google::devtools::remoteworkers::v1test2::AdminTemp_Command value) {
  
  command_ = value;
}
inline void AdminTemp::set_command(::google::devtools::remoteworkers::v1test2::AdminTemp_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.AdminTemp.command)
}

// string arg = 2;
inline void AdminTemp::clear_arg() {
  arg_.ClearToEmpty();
}
inline const std::string& AdminTemp::arg() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
  return _internal_arg();
}
inline void AdminTemp::set_arg(const std::string& value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}
inline std::string* AdminTemp::mutable_arg() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
  return _internal_mutable_arg();
}
inline const std::string& AdminTemp::_internal_arg() const {
  return arg_.Get();
}
inline void AdminTemp::_internal_set_arg(const std::string& value) {
  
  arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AdminTemp::set_arg(std::string&& value) {
  
  arg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}
inline void AdminTemp::set_arg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}
inline void AdminTemp::set_arg(const char* value,
    size_t size) {
  
  arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}
inline std::string* AdminTemp::_internal_mutable_arg() {
  
  return arg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AdminTemp::release_arg() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
  return arg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdminTemp::set_allocated_arg(std::string* arg) {
  if (arg != nullptr) {
    
  } else {
    
  }
  arg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.AdminTemp.arg)
}

// -------------------------------------------------------------------

// CreateBotSessionRequest

// string parent = 1 [(.google.api.field_behavior) = REQUIRED];
inline void CreateBotSessionRequest::clear_parent() {
  parent_.ClearToEmpty();
}
inline const std::string& CreateBotSessionRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
  return _internal_parent();
}
inline void CreateBotSessionRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}
inline std::string* CreateBotSessionRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateBotSessionRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateBotSessionRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateBotSessionRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}
inline void CreateBotSessionRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}
inline void CreateBotSessionRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}
inline std::string* CreateBotSessionRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateBotSessionRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateBotSessionRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.parent)
}

// .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateBotSessionRequest::_internal_has_bot_session() const {
  return this != internal_default_instance() && bot_session_ != nullptr;
}
inline bool CreateBotSessionRequest::has_bot_session() const {
  return _internal_has_bot_session();
}
inline void CreateBotSessionRequest::clear_bot_session() {
  if (GetArena() == nullptr && bot_session_ != nullptr) {
    delete bot_session_;
  }
  bot_session_ = nullptr;
}
inline const ::google::devtools::remoteworkers::v1test2::BotSession& CreateBotSessionRequest::_internal_bot_session() const {
  const ::google::devtools::remoteworkers::v1test2::BotSession* p = bot_session_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::BotSession&>(
      ::google::devtools::remoteworkers::v1test2::_BotSession_default_instance_);
}
inline const ::google::devtools::remoteworkers::v1test2::BotSession& CreateBotSessionRequest::bot_session() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
  return _internal_bot_session();
}
inline void CreateBotSessionRequest::unsafe_arena_set_allocated_bot_session(
    ::google::devtools::remoteworkers::v1test2::BotSession* bot_session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_session_);
  }
  bot_session_ = bot_session;
  if (bot_session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* CreateBotSessionRequest::release_bot_session() {
  
  ::google::devtools::remoteworkers::v1test2::BotSession* temp = bot_session_;
  bot_session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* CreateBotSessionRequest::unsafe_arena_release_bot_session() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
  
  ::google::devtools::remoteworkers::v1test2::BotSession* temp = bot_session_;
  bot_session_ = nullptr;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* CreateBotSessionRequest::_internal_mutable_bot_session() {
  
  if (bot_session_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::BotSession>(GetArena());
    bot_session_ = p;
  }
  return bot_session_;
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* CreateBotSessionRequest::mutable_bot_session() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
  return _internal_mutable_bot_session();
}
inline void CreateBotSessionRequest::set_allocated_bot_session(::google::devtools::remoteworkers::v1test2::BotSession* bot_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bot_session_;
  }
  if (bot_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_session);
    if (message_arena != submessage_arena) {
      bot_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_session, submessage_arena);
    }
    
  } else {
    
  }
  bot_session_ = bot_session;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.bot_session)
}

// -------------------------------------------------------------------

// UpdateBotSessionRequest

// string name = 1 [(.google.api.field_behavior) = REQUIRED, (.google.api.resource_reference) = {
inline void UpdateBotSessionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UpdateBotSessionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
  return _internal_name();
}
inline void UpdateBotSessionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}
inline std::string* UpdateBotSessionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateBotSessionRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateBotSessionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateBotSessionRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}
inline void UpdateBotSessionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}
inline void UpdateBotSessionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}
inline std::string* UpdateBotSessionRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateBotSessionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateBotSessionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.name)
}

// .google.devtools.remoteworkers.v1test2.BotSession bot_session = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateBotSessionRequest::_internal_has_bot_session() const {
  return this != internal_default_instance() && bot_session_ != nullptr;
}
inline bool UpdateBotSessionRequest::has_bot_session() const {
  return _internal_has_bot_session();
}
inline void UpdateBotSessionRequest::clear_bot_session() {
  if (GetArena() == nullptr && bot_session_ != nullptr) {
    delete bot_session_;
  }
  bot_session_ = nullptr;
}
inline const ::google::devtools::remoteworkers::v1test2::BotSession& UpdateBotSessionRequest::_internal_bot_session() const {
  const ::google::devtools::remoteworkers::v1test2::BotSession* p = bot_session_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::devtools::remoteworkers::v1test2::BotSession&>(
      ::google::devtools::remoteworkers::v1test2::_BotSession_default_instance_);
}
inline const ::google::devtools::remoteworkers::v1test2::BotSession& UpdateBotSessionRequest::bot_session() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
  return _internal_bot_session();
}
inline void UpdateBotSessionRequest::unsafe_arena_set_allocated_bot_session(
    ::google::devtools::remoteworkers::v1test2::BotSession* bot_session) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bot_session_);
  }
  bot_session_ = bot_session;
  if (bot_session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* UpdateBotSessionRequest::release_bot_session() {
  
  ::google::devtools::remoteworkers::v1test2::BotSession* temp = bot_session_;
  bot_session_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* UpdateBotSessionRequest::unsafe_arena_release_bot_session() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
  
  ::google::devtools::remoteworkers::v1test2::BotSession* temp = bot_session_;
  bot_session_ = nullptr;
  return temp;
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* UpdateBotSessionRequest::_internal_mutable_bot_session() {
  
  if (bot_session_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::BotSession>(GetArena());
    bot_session_ = p;
  }
  return bot_session_;
}
inline ::google::devtools::remoteworkers::v1test2::BotSession* UpdateBotSessionRequest::mutable_bot_session() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
  return _internal_mutable_bot_session();
}
inline void UpdateBotSessionRequest::set_allocated_bot_session(::google::devtools::remoteworkers::v1test2::BotSession* bot_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bot_session_;
  }
  if (bot_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bot_session);
    if (message_arena != submessage_arena) {
      bot_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_session, submessage_arena);
    }
    
  } else {
    
  }
  bot_session_ = bot_session;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.bot_session)
}

// .google.protobuf.FieldMask update_mask = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateBotSessionRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateBotSessionRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBotSessionRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask&>(
      PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateBotSessionRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateBotSessionRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBotSessionRequest::release_update_mask() {
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBotSessionRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBotSessionRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateBotSessionRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateBotSessionRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.update_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::devtools::remoteworkers::v1test2::AdminTemp_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::remoteworkers::v1test2::AdminTemp_Command>() {
  return ::google::devtools::remoteworkers::v1test2::AdminTemp_Command_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::remoteworkers::v1test2::BotStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::remoteworkers::v1test2::BotStatus>() {
  return ::google::devtools::remoteworkers::v1test2::BotStatus_descriptor();
}
template <> struct is_proto_enum< ::google::devtools::remoteworkers::v1test2::LeaseState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::devtools::remoteworkers::v1test2::LeaseState>() {
  return ::google::devtools::remoteworkers::v1test2::LeaseState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fbots_2eproto
