//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/devtools/remoteworkers/v1test2/worker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto_metadata_getter(int index);
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Device_Property;
struct Device_PropertyDefaultTypeInternal;
extern Device_PropertyDefaultTypeInternal _Device_Property_default_instance_;
class Worker;
struct WorkerDefaultTypeInternal;
extern WorkerDefaultTypeInternal _Worker_default_instance_;
class Worker_Config;
struct Worker_ConfigDefaultTypeInternal;
extern Worker_ConfigDefaultTypeInternal _Worker_Config_default_instance_;
class Worker_Property;
struct Worker_PropertyDefaultTypeInternal;
extern Worker_PropertyDefaultTypeInternal _Worker_Property_default_instance_;
}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::devtools::remoteworkers::v1test2::Device* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Device>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Device_Property* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Device_Property>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Worker* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Worker_Config* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker_Config>(Arena*);
template<> ::google::devtools::remoteworkers::v1test2::Worker_Property* Arena::CreateMaybeMessage<::google::devtools::remoteworkers::v1test2::Worker_Property>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace devtools {
namespace remoteworkers {
namespace v1test2 {

// ===================================================================

class Worker_Property PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Worker.Property) */ {
 public:
  inline Worker_Property() : Worker_Property(nullptr) {}
  virtual ~Worker_Property();
  explicit constexpr Worker_Property(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Worker_Property(const Worker_Property& from);
  Worker_Property(Worker_Property&& from) noexcept
    : Worker_Property() {
    *this = ::std::move(from);
  }

  inline Worker_Property& operator=(const Worker_Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Worker_Property& operator=(Worker_Property&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Worker_Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Worker_Property* internal_default_instance() {
    return reinterpret_cast<const Worker_Property*>(
               &_Worker_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Worker_Property& a, Worker_Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Worker_Property* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Worker_Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Worker_Property* New() const final {
    return CreateMaybeMessage<Worker_Property>(nullptr);
  }

  Worker_Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Worker_Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Worker_Property& from);
  void MergeFrom(const Worker_Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worker_Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.Worker.Property";
  }
  protected:
  explicit Worker_Property(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker.Property)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto;
};
// -------------------------------------------------------------------

class Worker_Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Worker.Config) */ {
 public:
  inline Worker_Config() : Worker_Config(nullptr) {}
  virtual ~Worker_Config();
  explicit constexpr Worker_Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Worker_Config(const Worker_Config& from);
  Worker_Config(Worker_Config&& from) noexcept
    : Worker_Config() {
    *this = ::std::move(from);
  }

  inline Worker_Config& operator=(const Worker_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Worker_Config& operator=(Worker_Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Worker_Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Worker_Config* internal_default_instance() {
    return reinterpret_cast<const Worker_Config*>(
               &_Worker_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Worker_Config& a, Worker_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Worker_Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Worker_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Worker_Config* New() const final {
    return CreateMaybeMessage<Worker_Config>(nullptr);
  }

  Worker_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Worker_Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Worker_Config& from);
  void MergeFrom(const Worker_Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worker_Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.Worker.Config";
  }
  protected:
  explicit Worker_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto;
};
// -------------------------------------------------------------------

class Worker PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Worker) */ {
 public:
  inline Worker() : Worker(nullptr) {}
  virtual ~Worker();
  explicit constexpr Worker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Worker(const Worker& from);
  Worker(Worker&& from) noexcept
    : Worker() {
    *this = ::std::move(from);
  }

  inline Worker& operator=(const Worker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Worker& operator=(Worker&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Worker& default_instance() {
    return *internal_default_instance();
  }
  static inline const Worker* internal_default_instance() {
    return reinterpret_cast<const Worker*>(
               &_Worker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Worker& a, Worker& b) {
    a.Swap(&b);
  }
  inline void Swap(Worker* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Worker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Worker* New() const final {
    return CreateMaybeMessage<Worker>(nullptr);
  }

  Worker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Worker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Worker& from);
  void MergeFrom(const Worker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.Worker";
  }
  protected:
  explicit Worker(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Worker_Property Property;
  typedef Worker_Config Config;

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
    kPropertiesFieldNumber = 2,
    kConfigsFieldNumber = 3,
  };
  // repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::google::devtools::remoteworkers::v1test2::Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device >*
      mutable_devices();
  private:
  const ::google::devtools::remoteworkers::v1test2::Device& _internal_devices(int index) const;
  ::google::devtools::remoteworkers::v1test2::Device* _internal_add_devices();
  public:
  const ::google::devtools::remoteworkers::v1test2::Device& devices(int index) const;
  ::google::devtools::remoteworkers::v1test2::Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device >&
      devices() const;

  // repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::google::devtools::remoteworkers::v1test2::Worker_Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property >*
      mutable_properties();
  private:
  const ::google::devtools::remoteworkers::v1test2::Worker_Property& _internal_properties(int index) const;
  ::google::devtools::remoteworkers::v1test2::Worker_Property* _internal_add_properties();
  public:
  const ::google::devtools::remoteworkers::v1test2::Worker_Property& properties(int index) const;
  ::google::devtools::remoteworkers::v1test2::Worker_Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property >&
      properties() const;

  // repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;
  int configs_size() const;
  private:
  int _internal_configs_size() const;
  public:
  void clear_configs();
  ::google::devtools::remoteworkers::v1test2::Worker_Config* mutable_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config >*
      mutable_configs();
  private:
  const ::google::devtools::remoteworkers::v1test2::Worker_Config& _internal_configs(int index) const;
  ::google::devtools::remoteworkers::v1test2::Worker_Config* _internal_add_configs();
  public:
  const ::google::devtools::remoteworkers::v1test2::Worker_Config& configs(int index) const;
  ::google::devtools::remoteworkers::v1test2::Worker_Config* add_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config >&
      configs() const;

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Worker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device > devices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property > properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config > configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto;
};
// -------------------------------------------------------------------

class Device_Property PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Device.Property) */ {
 public:
  inline Device_Property() : Device_Property(nullptr) {}
  virtual ~Device_Property();
  explicit constexpr Device_Property(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device_Property(const Device_Property& from);
  Device_Property(Device_Property&& from) noexcept
    : Device_Property() {
    *this = ::std::move(from);
  }

  inline Device_Property& operator=(const Device_Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device_Property& operator=(Device_Property&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device_Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device_Property* internal_default_instance() {
    return reinterpret_cast<const Device_Property*>(
               &_Device_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Device_Property& a, Device_Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Device_Property* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device_Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device_Property* New() const final {
    return CreateMaybeMessage<Device_Property>(nullptr);
  }

  Device_Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device_Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device_Property& from);
  void MergeFrom(const Device_Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device_Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.Device.Property";
  }
  protected:
  explicit Device_Property(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Device.Property)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto;
};
// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.devtools.remoteworkers.v1test2.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  virtual ~Device();
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.devtools.remoteworkers.v1test2.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Device_Property Property;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kHandleFieldNumber = 1,
  };
  // repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::google::devtools::remoteworkers::v1test2::Device_Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property >*
      mutable_properties();
  private:
  const ::google::devtools::remoteworkers::v1test2::Device_Property& _internal_properties(int index) const;
  ::google::devtools::remoteworkers::v1test2::Device_Property* _internal_add_properties();
  public:
  const ::google::devtools::remoteworkers::v1test2::Device_Property& properties(int index) const;
  ::google::devtools::remoteworkers::v1test2::Device_Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property >&
      properties() const;

  // string handle = 1;
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // @@protoc_insertion_point(class_scope:google.devtools.remoteworkers.v1test2.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Worker_Property

// string key = 1;
inline void Worker_Property::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Worker_Property::key() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.Property.key)
  return _internal_key();
}
inline void Worker_Property::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}
inline std::string* Worker_Property::mutable_key() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.Property.key)
  return _internal_mutable_key();
}
inline const std::string& Worker_Property::_internal_key() const {
  return key_.Get();
}
inline void Worker_Property::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Worker_Property::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}
inline void Worker_Property::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}
inline void Worker_Property::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}
inline std::string* Worker_Property::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Worker_Property::release_key() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Worker.Property.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Worker_Property::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Worker.Property.key)
}

// string value = 2;
inline void Worker_Property::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Worker_Property::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.Property.value)
  return _internal_value();
}
inline void Worker_Property::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}
inline std::string* Worker_Property::mutable_value() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.Property.value)
  return _internal_mutable_value();
}
inline const std::string& Worker_Property::_internal_value() const {
  return value_.Get();
}
inline void Worker_Property::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Worker_Property::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}
inline void Worker_Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}
inline void Worker_Property::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}
inline std::string* Worker_Property::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Worker_Property::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Worker.Property.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Worker_Property::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Worker.Property.value)
}

// -------------------------------------------------------------------

// Worker_Config

// string key = 1;
inline void Worker_Config::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Worker_Config::key() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.Config.key)
  return _internal_key();
}
inline void Worker_Config::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}
inline std::string* Worker_Config::mutable_key() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.Config.key)
  return _internal_mutable_key();
}
inline const std::string& Worker_Config::_internal_key() const {
  return key_.Get();
}
inline void Worker_Config::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Worker_Config::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}
inline void Worker_Config::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}
inline void Worker_Config::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}
inline std::string* Worker_Config::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Worker_Config::release_key() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Worker.Config.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Worker_Config::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Worker.Config.key)
}

// string value = 2;
inline void Worker_Config::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Worker_Config::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.Config.value)
  return _internal_value();
}
inline void Worker_Config::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}
inline std::string* Worker_Config::mutable_value() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.Config.value)
  return _internal_mutable_value();
}
inline const std::string& Worker_Config::_internal_value() const {
  return value_.Get();
}
inline void Worker_Config::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Worker_Config::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}
inline void Worker_Config::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}
inline void Worker_Config::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}
inline std::string* Worker_Config::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Worker_Config::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Worker.Config.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Worker_Config::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Worker.Config.value)
}

// -------------------------------------------------------------------

// Worker

// repeated .google.devtools.remoteworkers.v1test2.Device devices = 1;
inline int Worker::_internal_devices_size() const {
  return devices_.size();
}
inline int Worker::devices_size() const {
  return _internal_devices_size();
}
inline void Worker::clear_devices() {
  devices_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Device* Worker::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device >*
Worker::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Worker.devices)
  return &devices_;
}
inline const ::google::devtools::remoteworkers::v1test2::Device& Worker::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::google::devtools::remoteworkers::v1test2::Device& Worker::devices(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.devices)
  return _internal_devices(index);
}
inline ::google::devtools::remoteworkers::v1test2::Device* Worker::_internal_add_devices() {
  return devices_.Add();
}
inline ::google::devtools::remoteworkers::v1test2::Device* Worker::add_devices() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Worker.devices)
  return _internal_add_devices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device >&
Worker::devices() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Worker.devices)
  return devices_;
}

// repeated .google.devtools.remoteworkers.v1test2.Worker.Property properties = 2;
inline int Worker::_internal_properties_size() const {
  return properties_.size();
}
inline int Worker::properties_size() const {
  return _internal_properties_size();
}
inline void Worker::clear_properties() {
  properties_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Property* Worker::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property >*
Worker::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Worker.properties)
  return &properties_;
}
inline const ::google::devtools::remoteworkers::v1test2::Worker_Property& Worker::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::google::devtools::remoteworkers::v1test2::Worker_Property& Worker::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.properties)
  return _internal_properties(index);
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Property* Worker::_internal_add_properties() {
  return properties_.Add();
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Property* Worker::add_properties() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Worker.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Property >&
Worker::properties() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Worker.properties)
  return properties_;
}

// repeated .google.devtools.remoteworkers.v1test2.Worker.Config configs = 3;
inline int Worker::_internal_configs_size() const {
  return configs_.size();
}
inline int Worker::configs_size() const {
  return _internal_configs_size();
}
inline void Worker::clear_configs() {
  configs_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Config* Worker::mutable_configs(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Worker.configs)
  return configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config >*
Worker::mutable_configs() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Worker.configs)
  return &configs_;
}
inline const ::google::devtools::remoteworkers::v1test2::Worker_Config& Worker::_internal_configs(int index) const {
  return configs_.Get(index);
}
inline const ::google::devtools::remoteworkers::v1test2::Worker_Config& Worker::configs(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Worker.configs)
  return _internal_configs(index);
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Config* Worker::_internal_add_configs() {
  return configs_.Add();
}
inline ::google::devtools::remoteworkers::v1test2::Worker_Config* Worker::add_configs() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Worker.configs)
  return _internal_add_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Worker_Config >&
Worker::configs() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Worker.configs)
  return configs_;
}

// -------------------------------------------------------------------

// Device_Property

// string key = 1;
inline void Device_Property::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Device_Property::key() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Device.Property.key)
  return _internal_key();
}
inline void Device_Property::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Device.Property.key)
}
inline std::string* Device_Property::mutable_key() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Device.Property.key)
  return _internal_mutable_key();
}
inline const std::string& Device_Property::_internal_key() const {
  return key_.Get();
}
inline void Device_Property::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device_Property::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Device.Property.key)
}
inline void Device_Property::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Device.Property.key)
}
inline void Device_Property::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Device.Property.key)
}
inline std::string* Device_Property::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device_Property::release_key() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Device.Property.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device_Property::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Device.Property.key)
}

// string value = 2;
inline void Device_Property::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Device_Property::value() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Device.Property.value)
  return _internal_value();
}
inline void Device_Property::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Device.Property.value)
}
inline std::string* Device_Property::mutable_value() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Device.Property.value)
  return _internal_mutable_value();
}
inline const std::string& Device_Property::_internal_value() const {
  return value_.Get();
}
inline void Device_Property::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device_Property::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Device.Property.value)
}
inline void Device_Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Device.Property.value)
}
inline void Device_Property::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Device.Property.value)
}
inline std::string* Device_Property::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device_Property::release_value() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Device.Property.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device_Property::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Device.Property.value)
}

// -------------------------------------------------------------------

// Device

// string handle = 1;
inline void Device::clear_handle() {
  handle_.ClearToEmpty();
}
inline const std::string& Device::handle() const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Device.handle)
  return _internal_handle();
}
inline void Device::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:google.devtools.remoteworkers.v1test2.Device.handle)
}
inline std::string* Device::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Device.handle)
  return _internal_mutable_handle();
}
inline const std::string& Device::_internal_handle() const {
  return handle_.Get();
}
inline void Device::_internal_set_handle(const std::string& value) {
  
  handle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_handle(std::string&& value) {
  
  handle_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:google.devtools.remoteworkers.v1test2.Device.handle)
}
inline void Device::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:google.devtools.remoteworkers.v1test2.Device.handle)
}
inline void Device::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:google.devtools.remoteworkers.v1test2.Device.handle)
}
inline std::string* Device::_internal_mutable_handle() {
  
  return handle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_handle() {
  // @@protoc_insertion_point(field_release:google.devtools.remoteworkers.v1test2.Device.handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:google.devtools.remoteworkers.v1test2.Device.handle)
}

// repeated .google.devtools.remoteworkers.v1test2.Device.Property properties = 2;
inline int Device::_internal_properties_size() const {
  return properties_.size();
}
inline int Device::properties_size() const {
  return _internal_properties_size();
}
inline void Device::clear_properties() {
  properties_.Clear();
}
inline ::google::devtools::remoteworkers::v1test2::Device_Property* Device::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:google.devtools.remoteworkers.v1test2.Device.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property >*
Device::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:google.devtools.remoteworkers.v1test2.Device.properties)
  return &properties_;
}
inline const ::google::devtools::remoteworkers::v1test2::Device_Property& Device::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::google::devtools::remoteworkers::v1test2::Device_Property& Device::properties(int index) const {
  // @@protoc_insertion_point(field_get:google.devtools.remoteworkers.v1test2.Device.properties)
  return _internal_properties(index);
}
inline ::google::devtools::remoteworkers::v1test2::Device_Property* Device::_internal_add_properties() {
  return properties_.Add();
}
inline ::google::devtools::remoteworkers::v1test2::Device_Property* Device::add_properties() {
  // @@protoc_insertion_point(field_add:google.devtools.remoteworkers.v1test2.Device.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::devtools::remoteworkers::v1test2::Device_Property >&
Device::properties() const {
  // @@protoc_insertion_point(field_list:google.devtools.remoteworkers.v1test2.Device.properties)
  return properties_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1test2
}  // namespace remoteworkers
}  // namespace devtools
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fdevtools_2fremoteworkers_2fv1test2_2fworker_2eproto
