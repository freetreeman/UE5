//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/bytestream/bytestream.proto
// Original file comments:
// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fbytestream_2fbytestream_2eproto__INCLUDED
#define GRPC_google_2fbytestream_2fbytestream_2eproto__INCLUDED

#include "google/bytestream/bytestream.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace bytestream {

// #### Introduction
//
// The Byte Stream API enables a client to read and write a stream of bytes to
// and from a resource. Resources have names, and these names are supplied in
// the API calls below to identify the resource that is being read from or
// written to.
//
// All implementations of the Byte Stream API export the interface defined here:
//
// * `Read()`: Reads the contents of a resource.
//
// * `Write()`: Writes the contents of a resource. The client can call `Write()`
//   multiple times with the same resource and can check the status of the write
//   by calling `QueryWriteStatus()`.
//
// #### Service parameters and metadata
//
// The ByteStream API provides no direct way to access/modify any metadata
// associated with the resource.
//
// #### Errors
//
// The errors returned by the service are in the Google canonical error space.
class ByteStream final {
 public:
  static constexpr char const* service_full_name() {
    return "google.bytestream.ByteStream";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // `Read()` is used to retrieve the contents of a resource as a sequence
    // of bytes. The bytes are returned in a sequence of responses, and the
    // responses are delivered as the results of a server-side streaming RPC.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::google::bytestream::ReadResponse>> Read(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::google::bytestream::ReadResponse>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bytestream::ReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bytestream::ReadResponse>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bytestream::ReadResponse>> PrepareAsyncRead(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::google::bytestream::ReadResponse>>(PrepareAsyncReadRaw(context, request, cq));
    }
    // `Write()` is used to send the contents of a resource as a sequence of
    // bytes. The bytes are sent in a sequence of request protos of a client-side
    // streaming RPC.
    //
    // A `Write()` action is resumable. If there is an error or the connection is
    // broken during the `Write()`, the client should check the status of the
    // `Write()` by calling `QueryWriteStatus()` and continue writing from the
    // returned `committed_size`. This may be less than the amount of data the
    // client previously sent.
    //
    // Calling `Write()` on a resource name that was previously written and
    // finalized could cause an error, depending on whether the underlying service
    // allows over-writing of previously written resources.
    //
    // When the client closes the request channel, the service will respond with
    // a `WriteResponse`. The service will not view the resource as `complete`
    // until the client has sent a `WriteRequest` with `finish_write` set to
    // `true`. Sending any requests on a stream after sending a request with
    // `finish_write` set to `true` will cause an error. The client **should**
    // check the `WriteResponse` it receives to determine how much data the
    // service was able to commit and whether the service views the resource as
    // `complete` or not.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::google::bytestream::WriteRequest>> Write(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::google::bytestream::WriteRequest>>(WriteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::google::bytestream::WriteRequest>> AsyncWrite(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::google::bytestream::WriteRequest>>(AsyncWriteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::google::bytestream::WriteRequest>> PrepareAsyncWrite(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::google::bytestream::WriteRequest>>(PrepareAsyncWriteRaw(context, response, cq));
    }
    // `QueryWriteStatus()` is used to find the `committed_size` for a resource
    // that is being written, which can then be used as the `write_offset` for
    // the next `Write()` call.
    //
    // If the resource does not exist (i.e., the resource has been deleted, or the
    // first `Write()` has not yet reached the service), this method returns the
    // error `NOT_FOUND`.
    //
    // The client **may** call `QueryWriteStatus()` at any time to determine how
    // much data has been processed for this resource. This is useful if the
    // client is buffering data and needs to know which data can be safely
    // evicted. For any sequence of `QueryWriteStatus()` calls for a given
    // resource name, the sequence of returned `committed_size` values will be
    // non-decreasing.
    virtual ::grpc::Status QueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::google::bytestream::QueryWriteStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bytestream::QueryWriteStatusResponse>> AsyncQueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bytestream::QueryWriteStatusResponse>>(AsyncQueryWriteStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bytestream::QueryWriteStatusResponse>> PrepareAsyncQueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bytestream::QueryWriteStatusResponse>>(PrepareAsyncQueryWriteStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // `Read()` is used to retrieve the contents of a resource as a sequence
      // of bytes. The bytes are returned in a sequence of responses, and the
      // responses are delivered as the results of a server-side streaming RPC.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest* request, ::grpc::ClientReadReactor< ::google::bytestream::ReadResponse>* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest* request, ::grpc::experimental::ClientReadReactor< ::google::bytestream::ReadResponse>* reactor) = 0;
      #endif
      // `Write()` is used to send the contents of a resource as a sequence of
      // bytes. The bytes are sent in a sequence of request protos of a client-side
      // streaming RPC.
      //
      // A `Write()` action is resumable. If there is an error or the connection is
      // broken during the `Write()`, the client should check the status of the
      // `Write()` by calling `QueryWriteStatus()` and continue writing from the
      // returned `committed_size`. This may be less than the amount of data the
      // client previously sent.
      //
      // Calling `Write()` on a resource name that was previously written and
      // finalized could cause an error, depending on whether the underlying service
      // allows over-writing of previously written resources.
      //
      // When the client closes the request channel, the service will respond with
      // a `WriteResponse`. The service will not view the resource as `complete`
      // until the client has sent a `WriteRequest` with `finish_write` set to
      // `true`. Sending any requests on a stream after sending a request with
      // `finish_write` set to `true` will cause an error. The client **should**
      // check the `WriteResponse` it receives to determine how much data the
      // service was able to commit and whether the service views the resource as
      // `complete` or not.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Write(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::ClientWriteReactor< ::google::bytestream::WriteRequest>* reactor) = 0;
      #else
      virtual void Write(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::experimental::ClientWriteReactor< ::google::bytestream::WriteRequest>* reactor) = 0;
      #endif
      // `QueryWriteStatus()` is used to find the `committed_size` for a resource
      // that is being written, which can then be used as the `write_offset` for
      // the next `Write()` call.
      //
      // If the resource does not exist (i.e., the resource has been deleted, or the
      // first `Write()` has not yet reached the service), this method returns the
      // error `NOT_FOUND`.
      //
      // The client **may** call `QueryWriteStatus()` at any time to determine how
      // much data has been processed for this resource. This is useful if the
      // client is buffering data and needs to know which data can be safely
      // evicted. For any sequence of `QueryWriteStatus()` calls for a given
      // resource name, the sequence of returned `committed_size` values will be
      // non-decreasing.
      virtual void QueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest* request, ::google::bytestream::QueryWriteStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest* request, ::google::bytestream::QueryWriteStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest* request, ::google::bytestream::QueryWriteStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::google::bytestream::ReadResponse>* ReadRaw(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::bytestream::ReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::google::bytestream::ReadResponse>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::google::bytestream::WriteRequest>* WriteRaw(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::google::bytestream::WriteRequest>* AsyncWriteRaw(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::google::bytestream::WriteRequest>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bytestream::QueryWriteStatusResponse>* AsyncQueryWriteStatusRaw(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bytestream::QueryWriteStatusResponse>* PrepareAsyncQueryWriteStatusRaw(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::google::bytestream::ReadResponse>> Read(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::google::bytestream::ReadResponse>>(ReadRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bytestream::ReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bytestream::ReadResponse>>(AsyncReadRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bytestream::ReadResponse>> PrepareAsyncRead(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::google::bytestream::ReadResponse>>(PrepareAsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::google::bytestream::WriteRequest>> Write(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::google::bytestream::WriteRequest>>(WriteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::google::bytestream::WriteRequest>> AsyncWrite(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::google::bytestream::WriteRequest>>(AsyncWriteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::google::bytestream::WriteRequest>> PrepareAsyncWrite(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::google::bytestream::WriteRequest>>(PrepareAsyncWriteRaw(context, response, cq));
    }
    ::grpc::Status QueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::google::bytestream::QueryWriteStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bytestream::QueryWriteStatusResponse>> AsyncQueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bytestream::QueryWriteStatusResponse>>(AsyncQueryWriteStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bytestream::QueryWriteStatusResponse>> PrepareAsyncQueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bytestream::QueryWriteStatusResponse>>(PrepareAsyncQueryWriteStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest* request, ::grpc::ClientReadReactor< ::google::bytestream::ReadResponse>* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest* request, ::grpc::experimental::ClientReadReactor< ::google::bytestream::ReadResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Write(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::ClientWriteReactor< ::google::bytestream::WriteRequest>* reactor) override;
      #else
      void Write(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::experimental::ClientWriteReactor< ::google::bytestream::WriteRequest>* reactor) override;
      #endif
      void QueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest* request, ::google::bytestream::QueryWriteStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest* request, ::google::bytestream::QueryWriteStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryWriteStatus(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest* request, ::google::bytestream::QueryWriteStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::google::bytestream::ReadResponse>* ReadRaw(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request) override;
    ::grpc::ClientAsyncReader< ::google::bytestream::ReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::google::bytestream::ReadResponse>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::google::bytestream::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::google::bytestream::WriteRequest>* WriteRaw(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response) override;
    ::grpc::ClientAsyncWriter< ::google::bytestream::WriteRequest>* AsyncWriteRaw(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::google::bytestream::WriteRequest>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, ::google::bytestream::WriteResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bytestream::QueryWriteStatusResponse>* AsyncQueryWriteStatusRaw(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bytestream::QueryWriteStatusResponse>* PrepareAsyncQueryWriteStatusRaw(::grpc::ClientContext* context, const ::google::bytestream::QueryWriteStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryWriteStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // `Read()` is used to retrieve the contents of a resource as a sequence
    // of bytes. The bytes are returned in a sequence of responses, and the
    // responses are delivered as the results of a server-side streaming RPC.
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::google::bytestream::ReadRequest* request, ::grpc::ServerWriter< ::google::bytestream::ReadResponse>* writer);
    // `Write()` is used to send the contents of a resource as a sequence of
    // bytes. The bytes are sent in a sequence of request protos of a client-side
    // streaming RPC.
    //
    // A `Write()` action is resumable. If there is an error or the connection is
    // broken during the `Write()`, the client should check the status of the
    // `Write()` by calling `QueryWriteStatus()` and continue writing from the
    // returned `committed_size`. This may be less than the amount of data the
    // client previously sent.
    //
    // Calling `Write()` on a resource name that was previously written and
    // finalized could cause an error, depending on whether the underlying service
    // allows over-writing of previously written resources.
    //
    // When the client closes the request channel, the service will respond with
    // a `WriteResponse`. The service will not view the resource as `complete`
    // until the client has sent a `WriteRequest` with `finish_write` set to
    // `true`. Sending any requests on a stream after sending a request with
    // `finish_write` set to `true` will cause an error. The client **should**
    // check the `WriteResponse` it receives to determine how much data the
    // service was able to commit and whether the service views the resource as
    // `complete` or not.
    virtual ::grpc::Status Write(::grpc::ServerContext* context, ::grpc::ServerReader< ::google::bytestream::WriteRequest>* reader, ::google::bytestream::WriteResponse* response);
    // `QueryWriteStatus()` is used to find the `committed_size` for a resource
    // that is being written, which can then be used as the `write_offset` for
    // the next `Write()` call.
    //
    // If the resource does not exist (i.e., the resource has been deleted, or the
    // first `Write()` has not yet reached the service), this method returns the
    // error `NOT_FOUND`.
    //
    // The client **may** call `QueryWriteStatus()` at any time to determine how
    // much data has been processed for this resource. This is useful if the
    // client is buffering data and needs to know which data can be safely
    // evicted. For any sequence of `QueryWriteStatus()` calls for a given
    // resource name, the sequence of returned `committed_size` values will be
    // non-decreasing.
    virtual ::grpc::Status QueryWriteStatus(::grpc::ServerContext* context, const ::google::bytestream::QueryWriteStatusRequest* request, ::google::bytestream::QueryWriteStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::google::bytestream::ReadRequest* /*request*/, ::grpc::ServerWriter< ::google::bytestream::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::google::bytestream::ReadRequest* request, ::grpc::ServerAsyncWriter< ::google::bytestream::ReadResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::google::bytestream::WriteRequest>* /*reader*/, ::google::bytestream::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::google::bytestream::WriteResponse, ::google::bytestream::WriteRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryWriteStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryWriteStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryWriteStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryWriteStatus(::grpc::ServerContext* /*context*/, const ::google::bytestream::QueryWriteStatusRequest* /*request*/, ::google::bytestream::QueryWriteStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryWriteStatus(::grpc::ServerContext* context, ::google::bytestream::QueryWriteStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::bytestream::QueryWriteStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Read<WithAsyncMethod_Write<WithAsyncMethod_QueryWriteStatus<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::bytestream::ReadRequest, ::google::bytestream::ReadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::bytestream::ReadRequest* request) { return this->Read(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::google::bytestream::ReadRequest* /*request*/, ::grpc::ServerWriter< ::google::bytestream::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::google::bytestream::ReadResponse>* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::google::bytestream::ReadRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::google::bytestream::ReadResponse>* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::bytestream::ReadRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::google::bytestream::WriteRequest, ::google::bytestream::WriteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::google::bytestream::WriteResponse* response) { return this->Write(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::google::bytestream::WriteRequest>* /*reader*/, ::google::bytestream::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::google::bytestream::WriteRequest>* Write(
      ::grpc::CallbackServerContext* /*context*/, ::google::bytestream::WriteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::google::bytestream::WriteRequest>* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::google::bytestream::WriteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryWriteStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryWriteStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::bytestream::QueryWriteStatusRequest, ::google::bytestream::QueryWriteStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::bytestream::QueryWriteStatusRequest* request, ::google::bytestream::QueryWriteStatusResponse* response) { return this->QueryWriteStatus(context, request, response); }));}
    void SetMessageAllocatorFor_QueryWriteStatus(
        ::grpc::experimental::MessageAllocator< ::google::bytestream::QueryWriteStatusRequest, ::google::bytestream::QueryWriteStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::bytestream::QueryWriteStatusRequest, ::google::bytestream::QueryWriteStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryWriteStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryWriteStatus(::grpc::ServerContext* /*context*/, const ::google::bytestream::QueryWriteStatusRequest* /*request*/, ::google::bytestream::QueryWriteStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryWriteStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::google::bytestream::QueryWriteStatusRequest* /*request*/, ::google::bytestream::QueryWriteStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryWriteStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::bytestream::QueryWriteStatusRequest* /*request*/, ::google::bytestream::QueryWriteStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_QueryWriteStatus<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_QueryWriteStatus<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::google::bytestream::ReadRequest* /*request*/, ::grpc::ServerWriter< ::google::bytestream::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::google::bytestream::WriteRequest>* /*reader*/, ::google::bytestream::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryWriteStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryWriteStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryWriteStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryWriteStatus(::grpc::ServerContext* /*context*/, const ::google::bytestream::QueryWriteStatusRequest* /*request*/, ::google::bytestream::QueryWriteStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::google::bytestream::ReadRequest* /*request*/, ::grpc::ServerWriter< ::google::bytestream::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::google::bytestream::WriteRequest>* /*reader*/, ::google::bytestream::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryWriteStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryWriteStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryWriteStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryWriteStatus(::grpc::ServerContext* /*context*/, const ::google::bytestream::QueryWriteStatusRequest* /*request*/, ::google::bytestream::QueryWriteStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryWriteStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Read(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::google::bytestream::ReadRequest* /*request*/, ::grpc::ServerWriter< ::google::bytestream::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->Write(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::google::bytestream::WriteRequest>* /*reader*/, ::google::bytestream::WriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Write(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryWriteStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryWriteStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryWriteStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryWriteStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryWriteStatus(::grpc::ServerContext* /*context*/, const ::google::bytestream::QueryWriteStatusRequest* /*request*/, ::google::bytestream::QueryWriteStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryWriteStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryWriteStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryWriteStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryWriteStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::bytestream::QueryWriteStatusRequest, ::google::bytestream::QueryWriteStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::bytestream::QueryWriteStatusRequest, ::google::bytestream::QueryWriteStatusResponse>* streamer) {
                       return this->StreamedQueryWriteStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QueryWriteStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryWriteStatus(::grpc::ServerContext* /*context*/, const ::google::bytestream::QueryWriteStatusRequest* /*request*/, ::google::bytestream::QueryWriteStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryWriteStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::bytestream::QueryWriteStatusRequest,::google::bytestream::QueryWriteStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_QueryWriteStatus<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::bytestream::ReadRequest, ::google::bytestream::ReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::bytestream::ReadRequest, ::google::bytestream::ReadResponse>* streamer) {
                       return this->StreamedRead(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::google::bytestream::ReadRequest* /*request*/, ::grpc::ServerWriter< ::google::bytestream::ReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::bytestream::ReadRequest,::google::bytestream::ReadResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Read<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Read<WithStreamedUnaryMethod_QueryWriteStatus<Service > > StreamedService;
};

}  // namespace bytestream
}  // namespace google


#endif  // GRPC_google_2fbytestream_2fbytestream_2eproto__INCLUDED
