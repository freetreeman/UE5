//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/semver/semver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_build_2fbazel_2fsemver_2fsemver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_build_2fbazel_2fsemver_2fsemver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_build_2fbazel_2fsemver_2fsemver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_build_2fbazel_2fsemver_2fsemver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto_metadata_getter(int index);
namespace build {
namespace bazel {
namespace semver {
class SemVer;
struct SemVerDefaultTypeInternal;
extern SemVerDefaultTypeInternal _SemVer_default_instance_;
}  // namespace semver
}  // namespace bazel
}  // namespace build
PROTOBUF_NAMESPACE_OPEN
template<> ::build::bazel::semver::SemVer* Arena::CreateMaybeMessage<::build::bazel::semver::SemVer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace build {
namespace bazel {
namespace semver {

// ===================================================================

class SemVer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.semver.SemVer) */ {
 public:
  inline SemVer() : SemVer(nullptr) {}
  virtual ~SemVer();
  explicit constexpr SemVer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SemVer(const SemVer& from);
  SemVer(SemVer&& from) noexcept
    : SemVer() {
    *this = ::std::move(from);
  }

  inline SemVer& operator=(const SemVer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SemVer& operator=(SemVer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SemVer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SemVer* internal_default_instance() {
    return reinterpret_cast<const SemVer*>(
               &_SemVer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SemVer& a, SemVer& b) {
    a.Swap(&b);
  }
  inline void Swap(SemVer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SemVer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SemVer* New() const final {
    return CreateMaybeMessage<SemVer>(nullptr);
  }

  SemVer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SemVer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SemVer& from);
  void MergeFrom(const SemVer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SemVer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.semver.SemVer";
  }
  protected:
  explicit SemVer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrereleaseFieldNumber = 4,
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // string prerelease = 4;
  void clear_prerelease();
  const std::string& prerelease() const;
  void set_prerelease(const std::string& value);
  void set_prerelease(std::string&& value);
  void set_prerelease(const char* value);
  void set_prerelease(const char* value, size_t size);
  std::string* mutable_prerelease();
  std::string* release_prerelease();
  void set_allocated_prerelease(std::string* prerelease);
  private:
  const std::string& _internal_prerelease() const;
  void _internal_set_prerelease(const std::string& value);
  std::string* _internal_mutable_prerelease();
  public:

  // int32 major = 1;
  void clear_major();
  ::PROTOBUF_NAMESPACE_ID::int32 major() const;
  void set_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_major() const;
  void _internal_set_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minor = 2;
  void clear_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 minor() const;
  void set_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minor() const;
  void _internal_set_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 patch = 3;
  void clear_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 patch() const;
  void set_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_patch() const;
  void _internal_set_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.semver.SemVer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prerelease_;
  ::PROTOBUF_NAMESPACE_ID::int32 major_;
  ::PROTOBUF_NAMESPACE_ID::int32 minor_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fsemver_2fsemver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SemVer

// int32 major = 1;
inline void SemVer::clear_major() {
  major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemVer::_internal_major() const {
  return major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemVer::major() const {
  // @@protoc_insertion_point(field_get:build.bazel.semver.SemVer.major)
  return _internal_major();
}
inline void SemVer::_internal_set_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  major_ = value;
}
inline void SemVer::set_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:build.bazel.semver.SemVer.major)
}

// int32 minor = 2;
inline void SemVer::clear_minor() {
  minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemVer::_internal_minor() const {
  return minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemVer::minor() const {
  // @@protoc_insertion_point(field_get:build.bazel.semver.SemVer.minor)
  return _internal_minor();
}
inline void SemVer::_internal_set_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minor_ = value;
}
inline void SemVer::set_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:build.bazel.semver.SemVer.minor)
}

// int32 patch = 3;
inline void SemVer::clear_patch() {
  patch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemVer::_internal_patch() const {
  return patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SemVer::patch() const {
  // @@protoc_insertion_point(field_get:build.bazel.semver.SemVer.patch)
  return _internal_patch();
}
inline void SemVer::_internal_set_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  patch_ = value;
}
inline void SemVer::set_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:build.bazel.semver.SemVer.patch)
}

// string prerelease = 4;
inline void SemVer::clear_prerelease() {
  prerelease_.ClearToEmpty();
}
inline const std::string& SemVer::prerelease() const {
  // @@protoc_insertion_point(field_get:build.bazel.semver.SemVer.prerelease)
  return _internal_prerelease();
}
inline void SemVer::set_prerelease(const std::string& value) {
  _internal_set_prerelease(value);
  // @@protoc_insertion_point(field_set:build.bazel.semver.SemVer.prerelease)
}
inline std::string* SemVer::mutable_prerelease() {
  // @@protoc_insertion_point(field_mutable:build.bazel.semver.SemVer.prerelease)
  return _internal_mutable_prerelease();
}
inline const std::string& SemVer::_internal_prerelease() const {
  return prerelease_.Get();
}
inline void SemVer::_internal_set_prerelease(const std::string& value) {
  
  prerelease_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SemVer::set_prerelease(std::string&& value) {
  
  prerelease_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.semver.SemVer.prerelease)
}
inline void SemVer::set_prerelease(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prerelease_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.semver.SemVer.prerelease)
}
inline void SemVer::set_prerelease(const char* value,
    size_t size) {
  
  prerelease_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.semver.SemVer.prerelease)
}
inline std::string* SemVer::_internal_mutable_prerelease() {
  
  return prerelease_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SemVer::release_prerelease() {
  // @@protoc_insertion_point(field_release:build.bazel.semver.SemVer.prerelease)
  return prerelease_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SemVer::set_allocated_prerelease(std::string* prerelease) {
  if (prerelease != nullptr) {
    
  } else {
    
  }
  prerelease_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prerelease,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.semver.SemVer.prerelease)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace semver
}  // namespace bazel
}  // namespace build

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_build_2fbazel_2fsemver_2fsemver_2eproto
