//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/remote/execution/v2/remote_execution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "build/bazel/semver/semver.pb.h"
#include "google/api/annotations.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[51]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(int index);
namespace build {
namespace bazel {
namespace remote {
namespace execution {
namespace v2 {
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ActionCacheUpdateCapabilities;
struct ActionCacheUpdateCapabilitiesDefaultTypeInternal;
extern ActionCacheUpdateCapabilitiesDefaultTypeInternal _ActionCacheUpdateCapabilities_default_instance_;
class ActionResult;
struct ActionResultDefaultTypeInternal;
extern ActionResultDefaultTypeInternal _ActionResult_default_instance_;
class BatchReadBlobsRequest;
struct BatchReadBlobsRequestDefaultTypeInternal;
extern BatchReadBlobsRequestDefaultTypeInternal _BatchReadBlobsRequest_default_instance_;
class BatchReadBlobsResponse;
struct BatchReadBlobsResponseDefaultTypeInternal;
extern BatchReadBlobsResponseDefaultTypeInternal _BatchReadBlobsResponse_default_instance_;
class BatchReadBlobsResponse_Response;
struct BatchReadBlobsResponse_ResponseDefaultTypeInternal;
extern BatchReadBlobsResponse_ResponseDefaultTypeInternal _BatchReadBlobsResponse_Response_default_instance_;
class BatchUpdateBlobsRequest;
struct BatchUpdateBlobsRequestDefaultTypeInternal;
extern BatchUpdateBlobsRequestDefaultTypeInternal _BatchUpdateBlobsRequest_default_instance_;
class BatchUpdateBlobsRequest_Request;
struct BatchUpdateBlobsRequest_RequestDefaultTypeInternal;
extern BatchUpdateBlobsRequest_RequestDefaultTypeInternal _BatchUpdateBlobsRequest_Request_default_instance_;
class BatchUpdateBlobsResponse;
struct BatchUpdateBlobsResponseDefaultTypeInternal;
extern BatchUpdateBlobsResponseDefaultTypeInternal _BatchUpdateBlobsResponse_default_instance_;
class BatchUpdateBlobsResponse_Response;
struct BatchUpdateBlobsResponse_ResponseDefaultTypeInternal;
extern BatchUpdateBlobsResponse_ResponseDefaultTypeInternal _BatchUpdateBlobsResponse_Response_default_instance_;
class CacheCapabilities;
struct CacheCapabilitiesDefaultTypeInternal;
extern CacheCapabilitiesDefaultTypeInternal _CacheCapabilities_default_instance_;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_EnvironmentVariable;
struct Command_EnvironmentVariableDefaultTypeInternal;
extern Command_EnvironmentVariableDefaultTypeInternal _Command_EnvironmentVariable_default_instance_;
class Digest;
struct DigestDefaultTypeInternal;
extern DigestDefaultTypeInternal _Digest_default_instance_;
class DigestFunction;
struct DigestFunctionDefaultTypeInternal;
extern DigestFunctionDefaultTypeInternal _DigestFunction_default_instance_;
class Directory;
struct DirectoryDefaultTypeInternal;
extern DirectoryDefaultTypeInternal _Directory_default_instance_;
class DirectoryNode;
struct DirectoryNodeDefaultTypeInternal;
extern DirectoryNodeDefaultTypeInternal _DirectoryNode_default_instance_;
class ExecuteOperationMetadata;
struct ExecuteOperationMetadataDefaultTypeInternal;
extern ExecuteOperationMetadataDefaultTypeInternal _ExecuteOperationMetadata_default_instance_;
class ExecuteRequest;
struct ExecuteRequestDefaultTypeInternal;
extern ExecuteRequestDefaultTypeInternal _ExecuteRequest_default_instance_;
class ExecuteResponse;
struct ExecuteResponseDefaultTypeInternal;
extern ExecuteResponseDefaultTypeInternal _ExecuteResponse_default_instance_;
class ExecuteResponse_ServerLogsEntry_DoNotUse;
struct ExecuteResponse_ServerLogsEntry_DoNotUseDefaultTypeInternal;
extern ExecuteResponse_ServerLogsEntry_DoNotUseDefaultTypeInternal _ExecuteResponse_ServerLogsEntry_DoNotUse_default_instance_;
class ExecutedActionMetadata;
struct ExecutedActionMetadataDefaultTypeInternal;
extern ExecutedActionMetadataDefaultTypeInternal _ExecutedActionMetadata_default_instance_;
class ExecutionCapabilities;
struct ExecutionCapabilitiesDefaultTypeInternal;
extern ExecutionCapabilitiesDefaultTypeInternal _ExecutionCapabilities_default_instance_;
class ExecutionPolicy;
struct ExecutionPolicyDefaultTypeInternal;
extern ExecutionPolicyDefaultTypeInternal _ExecutionPolicy_default_instance_;
class ExecutionStage;
struct ExecutionStageDefaultTypeInternal;
extern ExecutionStageDefaultTypeInternal _ExecutionStage_default_instance_;
class FileNode;
struct FileNodeDefaultTypeInternal;
extern FileNodeDefaultTypeInternal _FileNode_default_instance_;
class FindMissingBlobsRequest;
struct FindMissingBlobsRequestDefaultTypeInternal;
extern FindMissingBlobsRequestDefaultTypeInternal _FindMissingBlobsRequest_default_instance_;
class FindMissingBlobsResponse;
struct FindMissingBlobsResponseDefaultTypeInternal;
extern FindMissingBlobsResponseDefaultTypeInternal _FindMissingBlobsResponse_default_instance_;
class GetActionResultRequest;
struct GetActionResultRequestDefaultTypeInternal;
extern GetActionResultRequestDefaultTypeInternal _GetActionResultRequest_default_instance_;
class GetCapabilitiesRequest;
struct GetCapabilitiesRequestDefaultTypeInternal;
extern GetCapabilitiesRequestDefaultTypeInternal _GetCapabilitiesRequest_default_instance_;
class GetTreeRequest;
struct GetTreeRequestDefaultTypeInternal;
extern GetTreeRequestDefaultTypeInternal _GetTreeRequest_default_instance_;
class GetTreeResponse;
struct GetTreeResponseDefaultTypeInternal;
extern GetTreeResponseDefaultTypeInternal _GetTreeResponse_default_instance_;
class LogFile;
struct LogFileDefaultTypeInternal;
extern LogFileDefaultTypeInternal _LogFile_default_instance_;
class NodeProperties;
struct NodePropertiesDefaultTypeInternal;
extern NodePropertiesDefaultTypeInternal _NodeProperties_default_instance_;
class NodeProperty;
struct NodePropertyDefaultTypeInternal;
extern NodePropertyDefaultTypeInternal _NodeProperty_default_instance_;
class OutputDirectory;
struct OutputDirectoryDefaultTypeInternal;
extern OutputDirectoryDefaultTypeInternal _OutputDirectory_default_instance_;
class OutputFile;
struct OutputFileDefaultTypeInternal;
extern OutputFileDefaultTypeInternal _OutputFile_default_instance_;
class OutputSymlink;
struct OutputSymlinkDefaultTypeInternal;
extern OutputSymlinkDefaultTypeInternal _OutputSymlink_default_instance_;
class Platform;
struct PlatformDefaultTypeInternal;
extern PlatformDefaultTypeInternal _Platform_default_instance_;
class Platform_Property;
struct Platform_PropertyDefaultTypeInternal;
extern Platform_PropertyDefaultTypeInternal _Platform_Property_default_instance_;
class PriorityCapabilities;
struct PriorityCapabilitiesDefaultTypeInternal;
extern PriorityCapabilitiesDefaultTypeInternal _PriorityCapabilities_default_instance_;
class PriorityCapabilities_PriorityRange;
struct PriorityCapabilities_PriorityRangeDefaultTypeInternal;
extern PriorityCapabilities_PriorityRangeDefaultTypeInternal _PriorityCapabilities_PriorityRange_default_instance_;
class RequestMetadata;
struct RequestMetadataDefaultTypeInternal;
extern RequestMetadataDefaultTypeInternal _RequestMetadata_default_instance_;
class ResultsCachePolicy;
struct ResultsCachePolicyDefaultTypeInternal;
extern ResultsCachePolicyDefaultTypeInternal _ResultsCachePolicy_default_instance_;
class ServerCapabilities;
struct ServerCapabilitiesDefaultTypeInternal;
extern ServerCapabilitiesDefaultTypeInternal _ServerCapabilities_default_instance_;
class SymlinkAbsolutePathStrategy;
struct SymlinkAbsolutePathStrategyDefaultTypeInternal;
extern SymlinkAbsolutePathStrategyDefaultTypeInternal _SymlinkAbsolutePathStrategy_default_instance_;
class SymlinkNode;
struct SymlinkNodeDefaultTypeInternal;
extern SymlinkNodeDefaultTypeInternal _SymlinkNode_default_instance_;
class ToolDetails;
struct ToolDetailsDefaultTypeInternal;
extern ToolDetailsDefaultTypeInternal _ToolDetails_default_instance_;
class Tree;
struct TreeDefaultTypeInternal;
extern TreeDefaultTypeInternal _Tree_default_instance_;
class UpdateActionResultRequest;
struct UpdateActionResultRequestDefaultTypeInternal;
extern UpdateActionResultRequestDefaultTypeInternal _UpdateActionResultRequest_default_instance_;
class WaitExecutionRequest;
struct WaitExecutionRequestDefaultTypeInternal;
extern WaitExecutionRequestDefaultTypeInternal _WaitExecutionRequest_default_instance_;
}  // namespace v2
}  // namespace execution
}  // namespace remote
}  // namespace bazel
}  // namespace build
PROTOBUF_NAMESPACE_OPEN
template<> ::build::bazel::remote::execution::v2::Action* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::Action>(Arena*);
template<> ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities>(Arena*);
template<> ::build::bazel::remote::execution::v2::ActionResult* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ActionResult>(Arena*);
template<> ::build::bazel::remote::execution::v2::BatchReadBlobsRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::BatchReadBlobsRequest>(Arena*);
template<> ::build::bazel::remote::execution::v2::BatchReadBlobsResponse* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::BatchReadBlobsResponse>(Arena*);
template<> ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response>(Arena*);
template<> ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest>(Arena*);
template<> ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request>(Arena*);
template<> ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse>(Arena*);
template<> ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response>(Arena*);
template<> ::build::bazel::remote::execution::v2::CacheCapabilities* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::CacheCapabilities>(Arena*);
template<> ::build::bazel::remote::execution::v2::Command* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::Command>(Arena*);
template<> ::build::bazel::remote::execution::v2::Command_EnvironmentVariable* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::Command_EnvironmentVariable>(Arena*);
template<> ::build::bazel::remote::execution::v2::Digest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(Arena*);
template<> ::build::bazel::remote::execution::v2::DigestFunction* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::DigestFunction>(Arena*);
template<> ::build::bazel::remote::execution::v2::Directory* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::Directory>(Arena*);
template<> ::build::bazel::remote::execution::v2::DirectoryNode* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::DirectoryNode>(Arena*);
template<> ::build::bazel::remote::execution::v2::ExecuteOperationMetadata* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecuteOperationMetadata>(Arena*);
template<> ::build::bazel::remote::execution::v2::ExecuteRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecuteRequest>(Arena*);
template<> ::build::bazel::remote::execution::v2::ExecuteResponse* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecuteResponse>(Arena*);
template<> ::build::bazel::remote::execution::v2::ExecuteResponse_ServerLogsEntry_DoNotUse* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecuteResponse_ServerLogsEntry_DoNotUse>(Arena*);
template<> ::build::bazel::remote::execution::v2::ExecutedActionMetadata* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecutedActionMetadata>(Arena*);
template<> ::build::bazel::remote::execution::v2::ExecutionCapabilities* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecutionCapabilities>(Arena*);
template<> ::build::bazel::remote::execution::v2::ExecutionPolicy* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecutionPolicy>(Arena*);
template<> ::build::bazel::remote::execution::v2::ExecutionStage* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecutionStage>(Arena*);
template<> ::build::bazel::remote::execution::v2::FileNode* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::FileNode>(Arena*);
template<> ::build::bazel::remote::execution::v2::FindMissingBlobsRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::FindMissingBlobsRequest>(Arena*);
template<> ::build::bazel::remote::execution::v2::FindMissingBlobsResponse* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::FindMissingBlobsResponse>(Arena*);
template<> ::build::bazel::remote::execution::v2::GetActionResultRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::GetActionResultRequest>(Arena*);
template<> ::build::bazel::remote::execution::v2::GetCapabilitiesRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::GetCapabilitiesRequest>(Arena*);
template<> ::build::bazel::remote::execution::v2::GetTreeRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::GetTreeRequest>(Arena*);
template<> ::build::bazel::remote::execution::v2::GetTreeResponse* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::GetTreeResponse>(Arena*);
template<> ::build::bazel::remote::execution::v2::LogFile* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::LogFile>(Arena*);
template<> ::build::bazel::remote::execution::v2::NodeProperties* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::NodeProperties>(Arena*);
template<> ::build::bazel::remote::execution::v2::NodeProperty* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::NodeProperty>(Arena*);
template<> ::build::bazel::remote::execution::v2::OutputDirectory* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::OutputDirectory>(Arena*);
template<> ::build::bazel::remote::execution::v2::OutputFile* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::OutputFile>(Arena*);
template<> ::build::bazel::remote::execution::v2::OutputSymlink* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::OutputSymlink>(Arena*);
template<> ::build::bazel::remote::execution::v2::Platform* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::Platform>(Arena*);
template<> ::build::bazel::remote::execution::v2::Platform_Property* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::Platform_Property>(Arena*);
template<> ::build::bazel::remote::execution::v2::PriorityCapabilities* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::PriorityCapabilities>(Arena*);
template<> ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange>(Arena*);
template<> ::build::bazel::remote::execution::v2::RequestMetadata* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::RequestMetadata>(Arena*);
template<> ::build::bazel::remote::execution::v2::ResultsCachePolicy* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ResultsCachePolicy>(Arena*);
template<> ::build::bazel::remote::execution::v2::ServerCapabilities* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ServerCapabilities>(Arena*);
template<> ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy>(Arena*);
template<> ::build::bazel::remote::execution::v2::SymlinkNode* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::SymlinkNode>(Arena*);
template<> ::build::bazel::remote::execution::v2::ToolDetails* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::ToolDetails>(Arena*);
template<> ::build::bazel::remote::execution::v2::Tree* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::Tree>(Arena*);
template<> ::build::bazel::remote::execution::v2::UpdateActionResultRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::UpdateActionResultRequest>(Arena*);
template<> ::build::bazel::remote::execution::v2::WaitExecutionRequest* Arena::CreateMaybeMessage<::build::bazel::remote::execution::v2::WaitExecutionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace build {
namespace bazel {
namespace remote {
namespace execution {
namespace v2 {

enum ExecutionStage_Value : int {
  ExecutionStage_Value_UNKNOWN = 0,
  ExecutionStage_Value_CACHE_CHECK = 1,
  ExecutionStage_Value_QUEUED = 2,
  ExecutionStage_Value_EXECUTING = 3,
  ExecutionStage_Value_COMPLETED = 4,
  ExecutionStage_Value_ExecutionStage_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ExecutionStage_Value_ExecutionStage_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExecutionStage_Value_IsValid(int value);
constexpr ExecutionStage_Value ExecutionStage_Value_Value_MIN = ExecutionStage_Value_UNKNOWN;
constexpr ExecutionStage_Value ExecutionStage_Value_Value_MAX = ExecutionStage_Value_COMPLETED;
constexpr int ExecutionStage_Value_Value_ARRAYSIZE = ExecutionStage_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionStage_Value_descriptor();
template<typename T>
inline const std::string& ExecutionStage_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExecutionStage_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExecutionStage_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExecutionStage_Value_descriptor(), enum_t_value);
}
inline bool ExecutionStage_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExecutionStage_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExecutionStage_Value>(
    ExecutionStage_Value_descriptor(), name, value);
}
enum DigestFunction_Value : int {
  DigestFunction_Value_UNKNOWN = 0,
  DigestFunction_Value_SHA256 = 1,
  DigestFunction_Value_SHA1 = 2,
  DigestFunction_Value_MD5 = 3,
  DigestFunction_Value_VSO = 4,
  DigestFunction_Value_SHA384 = 5,
  DigestFunction_Value_SHA512 = 6,
  DigestFunction_Value_MURMUR3 = 7,
  DigestFunction_Value_DigestFunction_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DigestFunction_Value_DigestFunction_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DigestFunction_Value_IsValid(int value);
constexpr DigestFunction_Value DigestFunction_Value_Value_MIN = DigestFunction_Value_UNKNOWN;
constexpr DigestFunction_Value DigestFunction_Value_Value_MAX = DigestFunction_Value_MURMUR3;
constexpr int DigestFunction_Value_Value_ARRAYSIZE = DigestFunction_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DigestFunction_Value_descriptor();
template<typename T>
inline const std::string& DigestFunction_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DigestFunction_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DigestFunction_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DigestFunction_Value_descriptor(), enum_t_value);
}
inline bool DigestFunction_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DigestFunction_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DigestFunction_Value>(
    DigestFunction_Value_descriptor(), name, value);
}
enum SymlinkAbsolutePathStrategy_Value : int {
  SymlinkAbsolutePathStrategy_Value_UNKNOWN = 0,
  SymlinkAbsolutePathStrategy_Value_DISALLOWED = 1,
  SymlinkAbsolutePathStrategy_Value_ALLOWED = 2,
  SymlinkAbsolutePathStrategy_Value_SymlinkAbsolutePathStrategy_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SymlinkAbsolutePathStrategy_Value_SymlinkAbsolutePathStrategy_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SymlinkAbsolutePathStrategy_Value_IsValid(int value);
constexpr SymlinkAbsolutePathStrategy_Value SymlinkAbsolutePathStrategy_Value_Value_MIN = SymlinkAbsolutePathStrategy_Value_UNKNOWN;
constexpr SymlinkAbsolutePathStrategy_Value SymlinkAbsolutePathStrategy_Value_Value_MAX = SymlinkAbsolutePathStrategy_Value_ALLOWED;
constexpr int SymlinkAbsolutePathStrategy_Value_Value_ARRAYSIZE = SymlinkAbsolutePathStrategy_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SymlinkAbsolutePathStrategy_Value_descriptor();
template<typename T>
inline const std::string& SymlinkAbsolutePathStrategy_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SymlinkAbsolutePathStrategy_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SymlinkAbsolutePathStrategy_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SymlinkAbsolutePathStrategy_Value_descriptor(), enum_t_value);
}
inline bool SymlinkAbsolutePathStrategy_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SymlinkAbsolutePathStrategy_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SymlinkAbsolutePathStrategy_Value>(
    SymlinkAbsolutePathStrategy_Value_descriptor(), name, value);
}
// ===================================================================

class Action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.Action) */ {
 public:
  inline Action() : Action(nullptr) {}
  virtual ~Action();
  explicit constexpr Action(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance() {
    return *internal_default_instance();
  }
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaltFieldNumber = 9,
    kCommandDigestFieldNumber = 1,
    kInputRootDigestFieldNumber = 2,
    kTimeoutFieldNumber = 6,
    kPlatformFieldNumber = 10,
    kDoNotCacheFieldNumber = 7,
  };
  // bytes salt = 9;
  void clear_salt();
  const std::string& salt() const;
  void set_salt(const std::string& value);
  void set_salt(std::string&& value);
  void set_salt(const char* value);
  void set_salt(const void* value, size_t size);
  std::string* mutable_salt();
  std::string* release_salt();
  void set_allocated_salt(std::string* salt);
  private:
  const std::string& _internal_salt() const;
  void _internal_set_salt(const std::string& value);
  std::string* _internal_mutable_salt();
  public:

  // .build.bazel.remote.execution.v2.Digest command_digest = 1;
  bool has_command_digest() const;
  private:
  bool _internal_has_command_digest() const;
  public:
  void clear_command_digest();
  const ::build::bazel::remote::execution::v2::Digest& command_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_command_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_command_digest();
  void set_allocated_command_digest(::build::bazel::remote::execution::v2::Digest* command_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_command_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_command_digest();
  public:
  void unsafe_arena_set_allocated_command_digest(
      ::build::bazel::remote::execution::v2::Digest* command_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_command_digest();

  // .build.bazel.remote.execution.v2.Digest input_root_digest = 2;
  bool has_input_root_digest() const;
  private:
  bool _internal_has_input_root_digest() const;
  public:
  void clear_input_root_digest();
  const ::build::bazel::remote::execution::v2::Digest& input_root_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_input_root_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_input_root_digest();
  void set_allocated_input_root_digest(::build::bazel::remote::execution::v2::Digest* input_root_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_input_root_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_input_root_digest();
  public:
  void unsafe_arena_set_allocated_input_root_digest(
      ::build::bazel::remote::execution::v2::Digest* input_root_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_input_root_digest();

  // .google.protobuf.Duration timeout = 6;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  const PROTOBUF_NAMESPACE_ID::Duration& timeout() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_timeout();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_timeout();
  void set_allocated_timeout(PROTOBUF_NAMESPACE_ID::Duration* timeout);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_timeout() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeout();
  public:
  void unsafe_arena_set_allocated_timeout(
      PROTOBUF_NAMESPACE_ID::Duration* timeout);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeout();

  // .build.bazel.remote.execution.v2.Platform platform = 10;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  const ::build::bazel::remote::execution::v2::Platform& platform() const;
  ::build::bazel::remote::execution::v2::Platform* release_platform();
  ::build::bazel::remote::execution::v2::Platform* mutable_platform();
  void set_allocated_platform(::build::bazel::remote::execution::v2::Platform* platform);
  private:
  const ::build::bazel::remote::execution::v2::Platform& _internal_platform() const;
  ::build::bazel::remote::execution::v2::Platform* _internal_mutable_platform();
  public:
  void unsafe_arena_set_allocated_platform(
      ::build::bazel::remote::execution::v2::Platform* platform);
  ::build::bazel::remote::execution::v2::Platform* unsafe_arena_release_platform();

  // bool do_not_cache = 7;
  void clear_do_not_cache();
  bool do_not_cache() const;
  void set_do_not_cache(bool value);
  private:
  bool _internal_do_not_cache() const;
  void _internal_set_do_not_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_;
  ::build::bazel::remote::execution::v2::Digest* command_digest_;
  ::build::bazel::remote::execution::v2::Digest* input_root_digest_;
  PROTOBUF_NAMESPACE_ID::Duration* timeout_;
  ::build::bazel::remote::execution::v2::Platform* platform_;
  bool do_not_cache_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class Command_EnvironmentVariable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.Command.EnvironmentVariable) */ {
 public:
  inline Command_EnvironmentVariable() : Command_EnvironmentVariable(nullptr) {}
  virtual ~Command_EnvironmentVariable();
  explicit constexpr Command_EnvironmentVariable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_EnvironmentVariable(const Command_EnvironmentVariable& from);
  Command_EnvironmentVariable(Command_EnvironmentVariable&& from) noexcept
    : Command_EnvironmentVariable() {
    *this = ::std::move(from);
  }

  inline Command_EnvironmentVariable& operator=(const Command_EnvironmentVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_EnvironmentVariable& operator=(Command_EnvironmentVariable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command_EnvironmentVariable& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_EnvironmentVariable* internal_default_instance() {
    return reinterpret_cast<const Command_EnvironmentVariable*>(
               &_Command_EnvironmentVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Command_EnvironmentVariable& a, Command_EnvironmentVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_EnvironmentVariable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_EnvironmentVariable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command_EnvironmentVariable* New() const final {
    return CreateMaybeMessage<Command_EnvironmentVariable>(nullptr);
  }

  Command_EnvironmentVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command_EnvironmentVariable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command_EnvironmentVariable& from);
  void MergeFrom(const Command_EnvironmentVariable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_EnvironmentVariable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.Command.EnvironmentVariable";
  }
  protected:
  explicit Command_EnvironmentVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Command.EnvironmentVariable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  virtual ~Command();
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Command_EnvironmentVariable EnvironmentVariable;

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 1,
    kEnvironmentVariablesFieldNumber = 2,
    kOutputFilesFieldNumber = 3,
    kOutputDirectoriesFieldNumber = 4,
    kOutputPathsFieldNumber = 7,
    kOutputNodePropertiesFieldNumber = 8,
    kWorkingDirectoryFieldNumber = 6,
    kPlatformFieldNumber = 5,
  };
  // repeated string arguments = 1;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  const std::string& arguments(int index) const;
  std::string* mutable_arguments(int index);
  void set_arguments(int index, const std::string& value);
  void set_arguments(int index, std::string&& value);
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const char* value, size_t size);
  std::string* add_arguments();
  void add_arguments(const std::string& value);
  void add_arguments(std::string&& value);
  void add_arguments(const char* value);
  void add_arguments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arguments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arguments();
  private:
  const std::string& _internal_arguments(int index) const;
  std::string* _internal_add_arguments();
  public:

  // repeated .build.bazel.remote.execution.v2.Command.EnvironmentVariable environment_variables = 2;
  int environment_variables_size() const;
  private:
  int _internal_environment_variables_size() const;
  public:
  void clear_environment_variables();
  ::build::bazel::remote::execution::v2::Command_EnvironmentVariable* mutable_environment_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Command_EnvironmentVariable >*
      mutable_environment_variables();
  private:
  const ::build::bazel::remote::execution::v2::Command_EnvironmentVariable& _internal_environment_variables(int index) const;
  ::build::bazel::remote::execution::v2::Command_EnvironmentVariable* _internal_add_environment_variables();
  public:
  const ::build::bazel::remote::execution::v2::Command_EnvironmentVariable& environment_variables(int index) const;
  ::build::bazel::remote::execution::v2::Command_EnvironmentVariable* add_environment_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Command_EnvironmentVariable >&
      environment_variables() const;

  // repeated string output_files = 3;
  int output_files_size() const;
  private:
  int _internal_output_files_size() const;
  public:
  void clear_output_files();
  const std::string& output_files(int index) const;
  std::string* mutable_output_files(int index);
  void set_output_files(int index, const std::string& value);
  void set_output_files(int index, std::string&& value);
  void set_output_files(int index, const char* value);
  void set_output_files(int index, const char* value, size_t size);
  std::string* add_output_files();
  void add_output_files(const std::string& value);
  void add_output_files(std::string&& value);
  void add_output_files(const char* value);
  void add_output_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_files();
  private:
  const std::string& _internal_output_files(int index) const;
  std::string* _internal_add_output_files();
  public:

  // repeated string output_directories = 4;
  int output_directories_size() const;
  private:
  int _internal_output_directories_size() const;
  public:
  void clear_output_directories();
  const std::string& output_directories(int index) const;
  std::string* mutable_output_directories(int index);
  void set_output_directories(int index, const std::string& value);
  void set_output_directories(int index, std::string&& value);
  void set_output_directories(int index, const char* value);
  void set_output_directories(int index, const char* value, size_t size);
  std::string* add_output_directories();
  void add_output_directories(const std::string& value);
  void add_output_directories(std::string&& value);
  void add_output_directories(const char* value);
  void add_output_directories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_directories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_directories();
  private:
  const std::string& _internal_output_directories(int index) const;
  std::string* _internal_add_output_directories();
  public:

  // repeated string output_paths = 7;
  int output_paths_size() const;
  private:
  int _internal_output_paths_size() const;
  public:
  void clear_output_paths();
  const std::string& output_paths(int index) const;
  std::string* mutable_output_paths(int index);
  void set_output_paths(int index, const std::string& value);
  void set_output_paths(int index, std::string&& value);
  void set_output_paths(int index, const char* value);
  void set_output_paths(int index, const char* value, size_t size);
  std::string* add_output_paths();
  void add_output_paths(const std::string& value);
  void add_output_paths(std::string&& value);
  void add_output_paths(const char* value);
  void add_output_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_paths();
  private:
  const std::string& _internal_output_paths(int index) const;
  std::string* _internal_add_output_paths();
  public:

  // repeated string output_node_properties = 8;
  int output_node_properties_size() const;
  private:
  int _internal_output_node_properties_size() const;
  public:
  void clear_output_node_properties();
  const std::string& output_node_properties(int index) const;
  std::string* mutable_output_node_properties(int index);
  void set_output_node_properties(int index, const std::string& value);
  void set_output_node_properties(int index, std::string&& value);
  void set_output_node_properties(int index, const char* value);
  void set_output_node_properties(int index, const char* value, size_t size);
  std::string* add_output_node_properties();
  void add_output_node_properties(const std::string& value);
  void add_output_node_properties(std::string&& value);
  void add_output_node_properties(const char* value);
  void add_output_node_properties(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_node_properties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_node_properties();
  private:
  const std::string& _internal_output_node_properties(int index) const;
  std::string* _internal_add_output_node_properties();
  public:

  // string working_directory = 6;
  void clear_working_directory();
  const std::string& working_directory() const;
  void set_working_directory(const std::string& value);
  void set_working_directory(std::string&& value);
  void set_working_directory(const char* value);
  void set_working_directory(const char* value, size_t size);
  std::string* mutable_working_directory();
  std::string* release_working_directory();
  void set_allocated_working_directory(std::string* working_directory);
  private:
  const std::string& _internal_working_directory() const;
  void _internal_set_working_directory(const std::string& value);
  std::string* _internal_mutable_working_directory();
  public:

  // .build.bazel.remote.execution.v2.Platform platform = 5;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  const ::build::bazel::remote::execution::v2::Platform& platform() const;
  ::build::bazel::remote::execution::v2::Platform* release_platform();
  ::build::bazel::remote::execution::v2::Platform* mutable_platform();
  void set_allocated_platform(::build::bazel::remote::execution::v2::Platform* platform);
  private:
  const ::build::bazel::remote::execution::v2::Platform& _internal_platform() const;
  ::build::bazel::remote::execution::v2::Platform* _internal_mutable_platform();
  public:
  void unsafe_arena_set_allocated_platform(
      ::build::bazel::remote::execution::v2::Platform* platform);
  ::build::bazel::remote::execution::v2::Platform* unsafe_arena_release_platform();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arguments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Command_EnvironmentVariable > environment_variables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_directories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_paths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_node_properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr working_directory_;
  ::build::bazel::remote::execution::v2::Platform* platform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class Platform_Property PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.Platform.Property) */ {
 public:
  inline Platform_Property() : Platform_Property(nullptr) {}
  virtual ~Platform_Property();
  explicit constexpr Platform_Property(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Platform_Property(const Platform_Property& from);
  Platform_Property(Platform_Property&& from) noexcept
    : Platform_Property() {
    *this = ::std::move(from);
  }

  inline Platform_Property& operator=(const Platform_Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Platform_Property& operator=(Platform_Property&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Platform_Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Platform_Property* internal_default_instance() {
    return reinterpret_cast<const Platform_Property*>(
               &_Platform_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Platform_Property& a, Platform_Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Platform_Property* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Platform_Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Platform_Property* New() const final {
    return CreateMaybeMessage<Platform_Property>(nullptr);
  }

  Platform_Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Platform_Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Platform_Property& from);
  void MergeFrom(const Platform_Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Platform_Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.Platform.Property";
  }
  protected:
  explicit Platform_Property(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Platform.Property)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class Platform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.Platform) */ {
 public:
  inline Platform() : Platform(nullptr) {}
  virtual ~Platform();
  explicit constexpr Platform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Platform(const Platform& from);
  Platform(Platform&& from) noexcept
    : Platform() {
    *this = ::std::move(from);
  }

  inline Platform& operator=(const Platform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Platform& operator=(Platform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Platform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Platform* internal_default_instance() {
    return reinterpret_cast<const Platform*>(
               &_Platform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Platform& a, Platform& b) {
    a.Swap(&b);
  }
  inline void Swap(Platform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Platform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Platform* New() const final {
    return CreateMaybeMessage<Platform>(nullptr);
  }

  Platform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Platform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Platform& from);
  void MergeFrom(const Platform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Platform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.Platform";
  }
  protected:
  explicit Platform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Platform_Property Property;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // repeated .build.bazel.remote.execution.v2.Platform.Property properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::build::bazel::remote::execution::v2::Platform_Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Platform_Property >*
      mutable_properties();
  private:
  const ::build::bazel::remote::execution::v2::Platform_Property& _internal_properties(int index) const;
  ::build::bazel::remote::execution::v2::Platform_Property* _internal_add_properties();
  public:
  const ::build::bazel::remote::execution::v2::Platform_Property& properties(int index) const;
  ::build::bazel::remote::execution::v2::Platform_Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Platform_Property >&
      properties() const;

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Platform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Platform_Property > properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class Directory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.Directory) */ {
 public:
  inline Directory() : Directory(nullptr) {}
  virtual ~Directory();
  explicit constexpr Directory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Directory(const Directory& from);
  Directory(Directory&& from) noexcept
    : Directory() {
    *this = ::std::move(from);
  }

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Directory& operator=(Directory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Directory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Directory* internal_default_instance() {
    return reinterpret_cast<const Directory*>(
               &_Directory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Directory& a, Directory& b) {
    a.Swap(&b);
  }
  inline void Swap(Directory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Directory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Directory* New() const final {
    return CreateMaybeMessage<Directory>(nullptr);
  }

  Directory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Directory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Directory& from);
  void MergeFrom(const Directory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Directory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.Directory";
  }
  protected:
  explicit Directory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
    kDirectoriesFieldNumber = 2,
    kSymlinksFieldNumber = 3,
    kNodePropertiesFieldNumber = 5,
  };
  // repeated .build.bazel.remote.execution.v2.FileNode files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::build::bazel::remote::execution::v2::FileNode* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::FileNode >*
      mutable_files();
  private:
  const ::build::bazel::remote::execution::v2::FileNode& _internal_files(int index) const;
  ::build::bazel::remote::execution::v2::FileNode* _internal_add_files();
  public:
  const ::build::bazel::remote::execution::v2::FileNode& files(int index) const;
  ::build::bazel::remote::execution::v2::FileNode* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::FileNode >&
      files() const;

  // repeated .build.bazel.remote.execution.v2.DirectoryNode directories = 2;
  int directories_size() const;
  private:
  int _internal_directories_size() const;
  public:
  void clear_directories();
  ::build::bazel::remote::execution::v2::DirectoryNode* mutable_directories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::DirectoryNode >*
      mutable_directories();
  private:
  const ::build::bazel::remote::execution::v2::DirectoryNode& _internal_directories(int index) const;
  ::build::bazel::remote::execution::v2::DirectoryNode* _internal_add_directories();
  public:
  const ::build::bazel::remote::execution::v2::DirectoryNode& directories(int index) const;
  ::build::bazel::remote::execution::v2::DirectoryNode* add_directories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::DirectoryNode >&
      directories() const;

  // repeated .build.bazel.remote.execution.v2.SymlinkNode symlinks = 3;
  int symlinks_size() const;
  private:
  int _internal_symlinks_size() const;
  public:
  void clear_symlinks();
  ::build::bazel::remote::execution::v2::SymlinkNode* mutable_symlinks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::SymlinkNode >*
      mutable_symlinks();
  private:
  const ::build::bazel::remote::execution::v2::SymlinkNode& _internal_symlinks(int index) const;
  ::build::bazel::remote::execution::v2::SymlinkNode* _internal_add_symlinks();
  public:
  const ::build::bazel::remote::execution::v2::SymlinkNode& symlinks(int index) const;
  ::build::bazel::remote::execution::v2::SymlinkNode* add_symlinks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::SymlinkNode >&
      symlinks() const;

  // .build.bazel.remote.execution.v2.NodeProperties node_properties = 5;
  bool has_node_properties() const;
  private:
  bool _internal_has_node_properties() const;
  public:
  void clear_node_properties();
  const ::build::bazel::remote::execution::v2::NodeProperties& node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* release_node_properties();
  ::build::bazel::remote::execution::v2::NodeProperties* mutable_node_properties();
  void set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  private:
  const ::build::bazel::remote::execution::v2::NodeProperties& _internal_node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* _internal_mutable_node_properties();
  public:
  void unsafe_arena_set_allocated_node_properties(
      ::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  ::build::bazel::remote::execution::v2::NodeProperties* unsafe_arena_release_node_properties();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Directory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::FileNode > files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::DirectoryNode > directories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::SymlinkNode > symlinks_;
  ::build::bazel::remote::execution::v2::NodeProperties* node_properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeProperty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.NodeProperty) */ {
 public:
  inline NodeProperty() : NodeProperty(nullptr) {}
  virtual ~NodeProperty();
  explicit constexpr NodeProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeProperty(const NodeProperty& from);
  NodeProperty(NodeProperty&& from) noexcept
    : NodeProperty() {
    *this = ::std::move(from);
  }

  inline NodeProperty& operator=(const NodeProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeProperty& operator=(NodeProperty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeProperty* internal_default_instance() {
    return reinterpret_cast<const NodeProperty*>(
               &_NodeProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NodeProperty& a, NodeProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeProperty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeProperty* New() const final {
    return CreateMaybeMessage<NodeProperty>(nullptr);
  }

  NodeProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeProperty& from);
  void MergeFrom(const NodeProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.NodeProperty";
  }
  protected:
  explicit NodeProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.NodeProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class NodeProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.NodeProperties) */ {
 public:
  inline NodeProperties() : NodeProperties(nullptr) {}
  virtual ~NodeProperties();
  explicit constexpr NodeProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeProperties(const NodeProperties& from);
  NodeProperties(NodeProperties&& from) noexcept
    : NodeProperties() {
    *this = ::std::move(from);
  }

  inline NodeProperties& operator=(const NodeProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeProperties& operator=(NodeProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeProperties* internal_default_instance() {
    return reinterpret_cast<const NodeProperties*>(
               &_NodeProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NodeProperties& a, NodeProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeProperties* New() const final {
    return CreateMaybeMessage<NodeProperties>(nullptr);
  }

  NodeProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeProperties& from);
  void MergeFrom(const NodeProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.NodeProperties";
  }
  protected:
  explicit NodeProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
    kMtimeFieldNumber = 2,
    kUnixModeFieldNumber = 3,
  };
  // repeated .build.bazel.remote.execution.v2.NodeProperty properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::build::bazel::remote::execution::v2::NodeProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::NodeProperty >*
      mutable_properties();
  private:
  const ::build::bazel::remote::execution::v2::NodeProperty& _internal_properties(int index) const;
  ::build::bazel::remote::execution::v2::NodeProperty* _internal_add_properties();
  public:
  const ::build::bazel::remote::execution::v2::NodeProperty& properties(int index) const;
  ::build::bazel::remote::execution::v2::NodeProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::NodeProperty >&
      properties() const;

  // .google.protobuf.Timestamp mtime = 2;
  bool has_mtime() const;
  private:
  bool _internal_has_mtime() const;
  public:
  void clear_mtime();
  const PROTOBUF_NAMESPACE_ID::Timestamp& mtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_mtime();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_mtime();
  void set_allocated_mtime(PROTOBUF_NAMESPACE_ID::Timestamp* mtime);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_mtime() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_mtime();
  public:
  void unsafe_arena_set_allocated_mtime(
      PROTOBUF_NAMESPACE_ID::Timestamp* mtime);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_mtime();

  // .google.protobuf.UInt32Value unix_mode = 3;
  bool has_unix_mode() const;
  private:
  bool _internal_has_unix_mode() const;
  public:
  void clear_unix_mode();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& unix_mode() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_unix_mode();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_unix_mode();
  void set_allocated_unix_mode(PROTOBUF_NAMESPACE_ID::UInt32Value* unix_mode);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_unix_mode() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_unix_mode();
  public:
  void unsafe_arena_set_allocated_unix_mode(
      PROTOBUF_NAMESPACE_ID::UInt32Value* unix_mode);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_unix_mode();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.NodeProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::NodeProperty > properties_;
  PROTOBUF_NAMESPACE_ID::Timestamp* mtime_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* unix_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class FileNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.FileNode) */ {
 public:
  inline FileNode() : FileNode(nullptr) {}
  virtual ~FileNode();
  explicit constexpr FileNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileNode(const FileNode& from);
  FileNode(FileNode&& from) noexcept
    : FileNode() {
    *this = ::std::move(from);
  }

  inline FileNode& operator=(const FileNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileNode& operator=(FileNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileNode* internal_default_instance() {
    return reinterpret_cast<const FileNode*>(
               &_FileNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FileNode& a, FileNode& b) {
    a.Swap(&b);
  }
  inline void Swap(FileNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileNode* New() const final {
    return CreateMaybeMessage<FileNode>(nullptr);
  }

  FileNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileNode& from);
  void MergeFrom(const FileNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.FileNode";
  }
  protected:
  explicit FileNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDigestFieldNumber = 2,
    kNodePropertiesFieldNumber = 6,
    kIsExecutableFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .build.bazel.remote.execution.v2.Digest digest = 2;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const ::build::bazel::remote::execution::v2::Digest& digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_digest();
  void set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_digest();
  public:
  void unsafe_arena_set_allocated_digest(
      ::build::bazel::remote::execution::v2::Digest* digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_digest();

  // .build.bazel.remote.execution.v2.NodeProperties node_properties = 6;
  bool has_node_properties() const;
  private:
  bool _internal_has_node_properties() const;
  public:
  void clear_node_properties();
  const ::build::bazel::remote::execution::v2::NodeProperties& node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* release_node_properties();
  ::build::bazel::remote::execution::v2::NodeProperties* mutable_node_properties();
  void set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  private:
  const ::build::bazel::remote::execution::v2::NodeProperties& _internal_node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* _internal_mutable_node_properties();
  public:
  void unsafe_arena_set_allocated_node_properties(
      ::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  ::build::bazel::remote::execution::v2::NodeProperties* unsafe_arena_release_node_properties();

  // bool is_executable = 4;
  void clear_is_executable();
  bool is_executable() const;
  void set_is_executable(bool value);
  private:
  bool _internal_is_executable() const;
  void _internal_set_is_executable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.FileNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::build::bazel::remote::execution::v2::Digest* digest_;
  ::build::bazel::remote::execution::v2::NodeProperties* node_properties_;
  bool is_executable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class DirectoryNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.DirectoryNode) */ {
 public:
  inline DirectoryNode() : DirectoryNode(nullptr) {}
  virtual ~DirectoryNode();
  explicit constexpr DirectoryNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectoryNode(const DirectoryNode& from);
  DirectoryNode(DirectoryNode&& from) noexcept
    : DirectoryNode() {
    *this = ::std::move(from);
  }

  inline DirectoryNode& operator=(const DirectoryNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectoryNode& operator=(DirectoryNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectoryNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectoryNode* internal_default_instance() {
    return reinterpret_cast<const DirectoryNode*>(
               &_DirectoryNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DirectoryNode& a, DirectoryNode& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectoryNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectoryNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectoryNode* New() const final {
    return CreateMaybeMessage<DirectoryNode>(nullptr);
  }

  DirectoryNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectoryNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectoryNode& from);
  void MergeFrom(const DirectoryNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.DirectoryNode";
  }
  protected:
  explicit DirectoryNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDigestFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .build.bazel.remote.execution.v2.Digest digest = 2;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const ::build::bazel::remote::execution::v2::Digest& digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_digest();
  void set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_digest();
  public:
  void unsafe_arena_set_allocated_digest(
      ::build::bazel::remote::execution::v2::Digest* digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_digest();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.DirectoryNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::build::bazel::remote::execution::v2::Digest* digest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class SymlinkNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.SymlinkNode) */ {
 public:
  inline SymlinkNode() : SymlinkNode(nullptr) {}
  virtual ~SymlinkNode();
  explicit constexpr SymlinkNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SymlinkNode(const SymlinkNode& from);
  SymlinkNode(SymlinkNode&& from) noexcept
    : SymlinkNode() {
    *this = ::std::move(from);
  }

  inline SymlinkNode& operator=(const SymlinkNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymlinkNode& operator=(SymlinkNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SymlinkNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymlinkNode* internal_default_instance() {
    return reinterpret_cast<const SymlinkNode*>(
               &_SymlinkNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SymlinkNode& a, SymlinkNode& b) {
    a.Swap(&b);
  }
  inline void Swap(SymlinkNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymlinkNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SymlinkNode* New() const final {
    return CreateMaybeMessage<SymlinkNode>(nullptr);
  }

  SymlinkNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SymlinkNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SymlinkNode& from);
  void MergeFrom(const SymlinkNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymlinkNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.SymlinkNode";
  }
  protected:
  explicit SymlinkNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTargetFieldNumber = 2,
    kNodePropertiesFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string target = 2;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // .build.bazel.remote.execution.v2.NodeProperties node_properties = 4;
  bool has_node_properties() const;
  private:
  bool _internal_has_node_properties() const;
  public:
  void clear_node_properties();
  const ::build::bazel::remote::execution::v2::NodeProperties& node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* release_node_properties();
  ::build::bazel::remote::execution::v2::NodeProperties* mutable_node_properties();
  void set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  private:
  const ::build::bazel::remote::execution::v2::NodeProperties& _internal_node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* _internal_mutable_node_properties();
  public:
  void unsafe_arena_set_allocated_node_properties(
      ::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  ::build::bazel::remote::execution::v2::NodeProperties* unsafe_arena_release_node_properties();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.SymlinkNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::build::bazel::remote::execution::v2::NodeProperties* node_properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class Digest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.Digest) */ {
 public:
  inline Digest() : Digest(nullptr) {}
  virtual ~Digest();
  explicit constexpr Digest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Digest(const Digest& from);
  Digest(Digest&& from) noexcept
    : Digest() {
    *this = ::std::move(from);
  }

  inline Digest& operator=(const Digest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Digest& operator=(Digest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Digest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Digest* internal_default_instance() {
    return reinterpret_cast<const Digest*>(
               &_Digest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Digest& a, Digest& b) {
    a.Swap(&b);
  }
  inline void Swap(Digest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Digest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Digest* New() const final {
    return CreateMaybeMessage<Digest>(nullptr);
  }

  Digest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Digest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Digest& from);
  void MergeFrom(const Digest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Digest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.Digest";
  }
  protected:
  explicit Digest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kSizeBytesFieldNumber = 2,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // int64 size_bytes = 2;
  void clear_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 size_bytes() const;
  void set_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size_bytes() const;
  void _internal_set_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Digest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutedActionMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ExecutedActionMetadata) */ {
 public:
  inline ExecutedActionMetadata() : ExecutedActionMetadata(nullptr) {}
  virtual ~ExecutedActionMetadata();
  explicit constexpr ExecutedActionMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutedActionMetadata(const ExecutedActionMetadata& from);
  ExecutedActionMetadata(ExecutedActionMetadata&& from) noexcept
    : ExecutedActionMetadata() {
    *this = ::std::move(from);
  }

  inline ExecutedActionMetadata& operator=(const ExecutedActionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutedActionMetadata& operator=(ExecutedActionMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecutedActionMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutedActionMetadata* internal_default_instance() {
    return reinterpret_cast<const ExecutedActionMetadata*>(
               &_ExecutedActionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ExecutedActionMetadata& a, ExecutedActionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutedActionMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutedActionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutedActionMetadata* New() const final {
    return CreateMaybeMessage<ExecutedActionMetadata>(nullptr);
  }

  ExecutedActionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutedActionMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecutedActionMetadata& from);
  void MergeFrom(const ExecutedActionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutedActionMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ExecutedActionMetadata";
  }
  protected:
  explicit ExecutedActionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuxiliaryMetadataFieldNumber = 11,
    kWorkerFieldNumber = 1,
    kQueuedTimestampFieldNumber = 2,
    kWorkerStartTimestampFieldNumber = 3,
    kWorkerCompletedTimestampFieldNumber = 4,
    kInputFetchStartTimestampFieldNumber = 5,
    kInputFetchCompletedTimestampFieldNumber = 6,
    kExecutionStartTimestampFieldNumber = 7,
    kExecutionCompletedTimestampFieldNumber = 8,
    kOutputUploadStartTimestampFieldNumber = 9,
    kOutputUploadCompletedTimestampFieldNumber = 10,
  };
  // repeated .google.protobuf.Any auxiliary_metadata = 11;
  int auxiliary_metadata_size() const;
  private:
  int _internal_auxiliary_metadata_size() const;
  public:
  void clear_auxiliary_metadata();
  PROTOBUF_NAMESPACE_ID::Any* mutable_auxiliary_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_auxiliary_metadata();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_auxiliary_metadata(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_auxiliary_metadata();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& auxiliary_metadata(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_auxiliary_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      auxiliary_metadata() const;

  // string worker = 1;
  void clear_worker();
  const std::string& worker() const;
  void set_worker(const std::string& value);
  void set_worker(std::string&& value);
  void set_worker(const char* value);
  void set_worker(const char* value, size_t size);
  std::string* mutable_worker();
  std::string* release_worker();
  void set_allocated_worker(std::string* worker);
  private:
  const std::string& _internal_worker() const;
  void _internal_set_worker(const std::string& value);
  std::string* _internal_mutable_worker();
  public:

  // .google.protobuf.Timestamp queued_timestamp = 2;
  bool has_queued_timestamp() const;
  private:
  bool _internal_has_queued_timestamp() const;
  public:
  void clear_queued_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& queued_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_queued_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_queued_timestamp();
  void set_allocated_queued_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* queued_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_queued_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_queued_timestamp();
  public:
  void unsafe_arena_set_allocated_queued_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* queued_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_queued_timestamp();

  // .google.protobuf.Timestamp worker_start_timestamp = 3;
  bool has_worker_start_timestamp() const;
  private:
  bool _internal_has_worker_start_timestamp() const;
  public:
  void clear_worker_start_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& worker_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_worker_start_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_worker_start_timestamp();
  void set_allocated_worker_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* worker_start_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_worker_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_worker_start_timestamp();
  public:
  void unsafe_arena_set_allocated_worker_start_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* worker_start_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_worker_start_timestamp();

  // .google.protobuf.Timestamp worker_completed_timestamp = 4;
  bool has_worker_completed_timestamp() const;
  private:
  bool _internal_has_worker_completed_timestamp() const;
  public:
  void clear_worker_completed_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& worker_completed_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_worker_completed_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_worker_completed_timestamp();
  void set_allocated_worker_completed_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* worker_completed_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_worker_completed_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_worker_completed_timestamp();
  public:
  void unsafe_arena_set_allocated_worker_completed_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* worker_completed_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_worker_completed_timestamp();

  // .google.protobuf.Timestamp input_fetch_start_timestamp = 5;
  bool has_input_fetch_start_timestamp() const;
  private:
  bool _internal_has_input_fetch_start_timestamp() const;
  public:
  void clear_input_fetch_start_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& input_fetch_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_input_fetch_start_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_input_fetch_start_timestamp();
  void set_allocated_input_fetch_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_start_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_input_fetch_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_input_fetch_start_timestamp();
  public:
  void unsafe_arena_set_allocated_input_fetch_start_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_start_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_input_fetch_start_timestamp();

  // .google.protobuf.Timestamp input_fetch_completed_timestamp = 6;
  bool has_input_fetch_completed_timestamp() const;
  private:
  bool _internal_has_input_fetch_completed_timestamp() const;
  public:
  void clear_input_fetch_completed_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& input_fetch_completed_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_input_fetch_completed_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_input_fetch_completed_timestamp();
  void set_allocated_input_fetch_completed_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_completed_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_input_fetch_completed_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_input_fetch_completed_timestamp();
  public:
  void unsafe_arena_set_allocated_input_fetch_completed_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_completed_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_input_fetch_completed_timestamp();

  // .google.protobuf.Timestamp execution_start_timestamp = 7;
  bool has_execution_start_timestamp() const;
  private:
  bool _internal_has_execution_start_timestamp() const;
  public:
  void clear_execution_start_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& execution_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_execution_start_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_execution_start_timestamp();
  void set_allocated_execution_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_execution_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_execution_start_timestamp();
  public:
  void unsafe_arena_set_allocated_execution_start_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_execution_start_timestamp();

  // .google.protobuf.Timestamp execution_completed_timestamp = 8;
  bool has_execution_completed_timestamp() const;
  private:
  bool _internal_has_execution_completed_timestamp() const;
  public:
  void clear_execution_completed_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& execution_completed_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_execution_completed_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_execution_completed_timestamp();
  void set_allocated_execution_completed_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* execution_completed_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_execution_completed_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_execution_completed_timestamp();
  public:
  void unsafe_arena_set_allocated_execution_completed_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* execution_completed_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_execution_completed_timestamp();

  // .google.protobuf.Timestamp output_upload_start_timestamp = 9;
  bool has_output_upload_start_timestamp() const;
  private:
  bool _internal_has_output_upload_start_timestamp() const;
  public:
  void clear_output_upload_start_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& output_upload_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_output_upload_start_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_output_upload_start_timestamp();
  void set_allocated_output_upload_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_start_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_output_upload_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_output_upload_start_timestamp();
  public:
  void unsafe_arena_set_allocated_output_upload_start_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_start_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_output_upload_start_timestamp();

  // .google.protobuf.Timestamp output_upload_completed_timestamp = 10;
  bool has_output_upload_completed_timestamp() const;
  private:
  bool _internal_has_output_upload_completed_timestamp() const;
  public:
  void clear_output_upload_completed_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& output_upload_completed_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_output_upload_completed_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_output_upload_completed_timestamp();
  void set_allocated_output_upload_completed_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_completed_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_output_upload_completed_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_output_upload_completed_timestamp();
  public:
  void unsafe_arena_set_allocated_output_upload_completed_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_completed_timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_output_upload_completed_timestamp();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ExecutedActionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > auxiliary_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worker_;
  PROTOBUF_NAMESPACE_ID::Timestamp* queued_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* worker_start_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* worker_completed_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_start_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_completed_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* execution_completed_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_start_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_completed_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ActionResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ActionResult) */ {
 public:
  inline ActionResult() : ActionResult(nullptr) {}
  virtual ~ActionResult();
  explicit constexpr ActionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionResult(const ActionResult& from);
  ActionResult(ActionResult&& from) noexcept
    : ActionResult() {
    *this = ::std::move(from);
  }

  inline ActionResult& operator=(const ActionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionResult& operator=(ActionResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionResult* internal_default_instance() {
    return reinterpret_cast<const ActionResult*>(
               &_ActionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ActionResult& a, ActionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionResult* New() const final {
    return CreateMaybeMessage<ActionResult>(nullptr);
  }

  ActionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionResult& from);
  void MergeFrom(const ActionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ActionResult";
  }
  protected:
  explicit ActionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFilesFieldNumber = 2,
    kOutputDirectoriesFieldNumber = 3,
    kOutputFileSymlinksFieldNumber = 10,
    kOutputDirectorySymlinksFieldNumber = 11,
    kOutputSymlinksFieldNumber = 12,
    kStdoutRawFieldNumber = 5,
    kStderrRawFieldNumber = 7,
    kStdoutDigestFieldNumber = 6,
    kStderrDigestFieldNumber = 8,
    kExecutionMetadataFieldNumber = 9,
    kExitCodeFieldNumber = 4,
  };
  // repeated .build.bazel.remote.execution.v2.OutputFile output_files = 2;
  int output_files_size() const;
  private:
  int _internal_output_files_size() const;
  public:
  void clear_output_files();
  ::build::bazel::remote::execution::v2::OutputFile* mutable_output_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputFile >*
      mutable_output_files();
  private:
  const ::build::bazel::remote::execution::v2::OutputFile& _internal_output_files(int index) const;
  ::build::bazel::remote::execution::v2::OutputFile* _internal_add_output_files();
  public:
  const ::build::bazel::remote::execution::v2::OutputFile& output_files(int index) const;
  ::build::bazel::remote::execution::v2::OutputFile* add_output_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputFile >&
      output_files() const;

  // repeated .build.bazel.remote.execution.v2.OutputDirectory output_directories = 3;
  int output_directories_size() const;
  private:
  int _internal_output_directories_size() const;
  public:
  void clear_output_directories();
  ::build::bazel::remote::execution::v2::OutputDirectory* mutable_output_directories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputDirectory >*
      mutable_output_directories();
  private:
  const ::build::bazel::remote::execution::v2::OutputDirectory& _internal_output_directories(int index) const;
  ::build::bazel::remote::execution::v2::OutputDirectory* _internal_add_output_directories();
  public:
  const ::build::bazel::remote::execution::v2::OutputDirectory& output_directories(int index) const;
  ::build::bazel::remote::execution::v2::OutputDirectory* add_output_directories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputDirectory >&
      output_directories() const;

  // repeated .build.bazel.remote.execution.v2.OutputSymlink output_file_symlinks = 10;
  int output_file_symlinks_size() const;
  private:
  int _internal_output_file_symlinks_size() const;
  public:
  void clear_output_file_symlinks();
  ::build::bazel::remote::execution::v2::OutputSymlink* mutable_output_file_symlinks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >*
      mutable_output_file_symlinks();
  private:
  const ::build::bazel::remote::execution::v2::OutputSymlink& _internal_output_file_symlinks(int index) const;
  ::build::bazel::remote::execution::v2::OutputSymlink* _internal_add_output_file_symlinks();
  public:
  const ::build::bazel::remote::execution::v2::OutputSymlink& output_file_symlinks(int index) const;
  ::build::bazel::remote::execution::v2::OutputSymlink* add_output_file_symlinks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >&
      output_file_symlinks() const;

  // repeated .build.bazel.remote.execution.v2.OutputSymlink output_directory_symlinks = 11;
  int output_directory_symlinks_size() const;
  private:
  int _internal_output_directory_symlinks_size() const;
  public:
  void clear_output_directory_symlinks();
  ::build::bazel::remote::execution::v2::OutputSymlink* mutable_output_directory_symlinks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >*
      mutable_output_directory_symlinks();
  private:
  const ::build::bazel::remote::execution::v2::OutputSymlink& _internal_output_directory_symlinks(int index) const;
  ::build::bazel::remote::execution::v2::OutputSymlink* _internal_add_output_directory_symlinks();
  public:
  const ::build::bazel::remote::execution::v2::OutputSymlink& output_directory_symlinks(int index) const;
  ::build::bazel::remote::execution::v2::OutputSymlink* add_output_directory_symlinks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >&
      output_directory_symlinks() const;

  // repeated .build.bazel.remote.execution.v2.OutputSymlink output_symlinks = 12;
  int output_symlinks_size() const;
  private:
  int _internal_output_symlinks_size() const;
  public:
  void clear_output_symlinks();
  ::build::bazel::remote::execution::v2::OutputSymlink* mutable_output_symlinks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >*
      mutable_output_symlinks();
  private:
  const ::build::bazel::remote::execution::v2::OutputSymlink& _internal_output_symlinks(int index) const;
  ::build::bazel::remote::execution::v2::OutputSymlink* _internal_add_output_symlinks();
  public:
  const ::build::bazel::remote::execution::v2::OutputSymlink& output_symlinks(int index) const;
  ::build::bazel::remote::execution::v2::OutputSymlink* add_output_symlinks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >&
      output_symlinks() const;

  // bytes stdout_raw = 5;
  void clear_stdout_raw();
  const std::string& stdout_raw() const;
  void set_stdout_raw(const std::string& value);
  void set_stdout_raw(std::string&& value);
  void set_stdout_raw(const char* value);
  void set_stdout_raw(const void* value, size_t size);
  std::string* mutable_stdout_raw();
  std::string* release_stdout_raw();
  void set_allocated_stdout_raw(std::string* stdout_raw);
  private:
  const std::string& _internal_stdout_raw() const;
  void _internal_set_stdout_raw(const std::string& value);
  std::string* _internal_mutable_stdout_raw();
  public:

  // bytes stderr_raw = 7;
  void clear_stderr_raw();
  const std::string& stderr_raw() const;
  void set_stderr_raw(const std::string& value);
  void set_stderr_raw(std::string&& value);
  void set_stderr_raw(const char* value);
  void set_stderr_raw(const void* value, size_t size);
  std::string* mutable_stderr_raw();
  std::string* release_stderr_raw();
  void set_allocated_stderr_raw(std::string* stderr_raw);
  private:
  const std::string& _internal_stderr_raw() const;
  void _internal_set_stderr_raw(const std::string& value);
  std::string* _internal_mutable_stderr_raw();
  public:

  // .build.bazel.remote.execution.v2.Digest stdout_digest = 6;
  bool has_stdout_digest() const;
  private:
  bool _internal_has_stdout_digest() const;
  public:
  void clear_stdout_digest();
  const ::build::bazel::remote::execution::v2::Digest& stdout_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_stdout_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_stdout_digest();
  void set_allocated_stdout_digest(::build::bazel::remote::execution::v2::Digest* stdout_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_stdout_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_stdout_digest();
  public:
  void unsafe_arena_set_allocated_stdout_digest(
      ::build::bazel::remote::execution::v2::Digest* stdout_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_stdout_digest();

  // .build.bazel.remote.execution.v2.Digest stderr_digest = 8;
  bool has_stderr_digest() const;
  private:
  bool _internal_has_stderr_digest() const;
  public:
  void clear_stderr_digest();
  const ::build::bazel::remote::execution::v2::Digest& stderr_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_stderr_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_stderr_digest();
  void set_allocated_stderr_digest(::build::bazel::remote::execution::v2::Digest* stderr_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_stderr_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_stderr_digest();
  public:
  void unsafe_arena_set_allocated_stderr_digest(
      ::build::bazel::remote::execution::v2::Digest* stderr_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_stderr_digest();

  // .build.bazel.remote.execution.v2.ExecutedActionMetadata execution_metadata = 9;
  bool has_execution_metadata() const;
  private:
  bool _internal_has_execution_metadata() const;
  public:
  void clear_execution_metadata();
  const ::build::bazel::remote::execution::v2::ExecutedActionMetadata& execution_metadata() const;
  ::build::bazel::remote::execution::v2::ExecutedActionMetadata* release_execution_metadata();
  ::build::bazel::remote::execution::v2::ExecutedActionMetadata* mutable_execution_metadata();
  void set_allocated_execution_metadata(::build::bazel::remote::execution::v2::ExecutedActionMetadata* execution_metadata);
  private:
  const ::build::bazel::remote::execution::v2::ExecutedActionMetadata& _internal_execution_metadata() const;
  ::build::bazel::remote::execution::v2::ExecutedActionMetadata* _internal_mutable_execution_metadata();
  public:
  void unsafe_arena_set_allocated_execution_metadata(
      ::build::bazel::remote::execution::v2::ExecutedActionMetadata* execution_metadata);
  ::build::bazel::remote::execution::v2::ExecutedActionMetadata* unsafe_arena_release_execution_metadata();

  // int32 exit_code = 4;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ActionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputFile > output_files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputDirectory > output_directories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink > output_file_symlinks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink > output_directory_symlinks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink > output_symlinks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_raw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_raw_;
  ::build::bazel::remote::execution::v2::Digest* stdout_digest_;
  ::build::bazel::remote::execution::v2::Digest* stderr_digest_;
  ::build::bazel::remote::execution::v2::ExecutedActionMetadata* execution_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class OutputFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.OutputFile) */ {
 public:
  inline OutputFile() : OutputFile(nullptr) {}
  virtual ~OutputFile();
  explicit constexpr OutputFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputFile(const OutputFile& from);
  OutputFile(OutputFile&& from) noexcept
    : OutputFile() {
    *this = ::std::move(from);
  }

  inline OutputFile& operator=(const OutputFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputFile& operator=(OutputFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputFile* internal_default_instance() {
    return reinterpret_cast<const OutputFile*>(
               &_OutputFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OutputFile& a, OutputFile& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputFile* New() const final {
    return CreateMaybeMessage<OutputFile>(nullptr);
  }

  OutputFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputFile& from);
  void MergeFrom(const OutputFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.OutputFile";
  }
  protected:
  explicit OutputFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kContentsFieldNumber = 5,
    kDigestFieldNumber = 2,
    kNodePropertiesFieldNumber = 7,
    kIsExecutableFieldNumber = 4,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bytes contents = 5;
  void clear_contents();
  const std::string& contents() const;
  void set_contents(const std::string& value);
  void set_contents(std::string&& value);
  void set_contents(const char* value);
  void set_contents(const void* value, size_t size);
  std::string* mutable_contents();
  std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // .build.bazel.remote.execution.v2.Digest digest = 2;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const ::build::bazel::remote::execution::v2::Digest& digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_digest();
  void set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_digest();
  public:
  void unsafe_arena_set_allocated_digest(
      ::build::bazel::remote::execution::v2::Digest* digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_digest();

  // .build.bazel.remote.execution.v2.NodeProperties node_properties = 7;
  bool has_node_properties() const;
  private:
  bool _internal_has_node_properties() const;
  public:
  void clear_node_properties();
  const ::build::bazel::remote::execution::v2::NodeProperties& node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* release_node_properties();
  ::build::bazel::remote::execution::v2::NodeProperties* mutable_node_properties();
  void set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  private:
  const ::build::bazel::remote::execution::v2::NodeProperties& _internal_node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* _internal_mutable_node_properties();
  public:
  void unsafe_arena_set_allocated_node_properties(
      ::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  ::build::bazel::remote::execution::v2::NodeProperties* unsafe_arena_release_node_properties();

  // bool is_executable = 4;
  void clear_is_executable();
  bool is_executable() const;
  void set_is_executable(bool value);
  private:
  bool _internal_is_executable() const;
  void _internal_set_is_executable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.OutputFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  ::build::bazel::remote::execution::v2::Digest* digest_;
  ::build::bazel::remote::execution::v2::NodeProperties* node_properties_;
  bool is_executable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class Tree PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.Tree) */ {
 public:
  inline Tree() : Tree(nullptr) {}
  virtual ~Tree();
  explicit constexpr Tree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tree(const Tree& from);
  Tree(Tree&& from) noexcept
    : Tree() {
    *this = ::std::move(from);
  }

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tree& operator=(Tree&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tree& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tree* internal_default_instance() {
    return reinterpret_cast<const Tree*>(
               &_Tree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Tree& a, Tree& b) {
    a.Swap(&b);
  }
  inline void Swap(Tree* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tree* New() const final {
    return CreateMaybeMessage<Tree>(nullptr);
  }

  Tree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tree& from);
  void MergeFrom(const Tree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.Tree";
  }
  protected:
  explicit Tree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 2,
    kRootFieldNumber = 1,
  };
  // repeated .build.bazel.remote.execution.v2.Directory children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::build::bazel::remote::execution::v2::Directory* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory >*
      mutable_children();
  private:
  const ::build::bazel::remote::execution::v2::Directory& _internal_children(int index) const;
  ::build::bazel::remote::execution::v2::Directory* _internal_add_children();
  public:
  const ::build::bazel::remote::execution::v2::Directory& children(int index) const;
  ::build::bazel::remote::execution::v2::Directory* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory >&
      children() const;

  // .build.bazel.remote.execution.v2.Directory root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::build::bazel::remote::execution::v2::Directory& root() const;
  ::build::bazel::remote::execution::v2::Directory* release_root();
  ::build::bazel::remote::execution::v2::Directory* mutable_root();
  void set_allocated_root(::build::bazel::remote::execution::v2::Directory* root);
  private:
  const ::build::bazel::remote::execution::v2::Directory& _internal_root() const;
  ::build::bazel::remote::execution::v2::Directory* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::build::bazel::remote::execution::v2::Directory* root);
  ::build::bazel::remote::execution::v2::Directory* unsafe_arena_release_root();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.Tree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory > children_;
  ::build::bazel::remote::execution::v2::Directory* root_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class OutputDirectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.OutputDirectory) */ {
 public:
  inline OutputDirectory() : OutputDirectory(nullptr) {}
  virtual ~OutputDirectory();
  explicit constexpr OutputDirectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputDirectory(const OutputDirectory& from);
  OutputDirectory(OutputDirectory&& from) noexcept
    : OutputDirectory() {
    *this = ::std::move(from);
  }

  inline OutputDirectory& operator=(const OutputDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputDirectory& operator=(OutputDirectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputDirectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputDirectory* internal_default_instance() {
    return reinterpret_cast<const OutputDirectory*>(
               &_OutputDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(OutputDirectory& a, OutputDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputDirectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputDirectory* New() const final {
    return CreateMaybeMessage<OutputDirectory>(nullptr);
  }

  OutputDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputDirectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputDirectory& from);
  void MergeFrom(const OutputDirectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputDirectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.OutputDirectory";
  }
  protected:
  explicit OutputDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kTreeDigestFieldNumber = 3,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .build.bazel.remote.execution.v2.Digest tree_digest = 3;
  bool has_tree_digest() const;
  private:
  bool _internal_has_tree_digest() const;
  public:
  void clear_tree_digest();
  const ::build::bazel::remote::execution::v2::Digest& tree_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_tree_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_tree_digest();
  void set_allocated_tree_digest(::build::bazel::remote::execution::v2::Digest* tree_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_tree_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_tree_digest();
  public:
  void unsafe_arena_set_allocated_tree_digest(
      ::build::bazel::remote::execution::v2::Digest* tree_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_tree_digest();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.OutputDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::build::bazel::remote::execution::v2::Digest* tree_digest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class OutputSymlink PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.OutputSymlink) */ {
 public:
  inline OutputSymlink() : OutputSymlink(nullptr) {}
  virtual ~OutputSymlink();
  explicit constexpr OutputSymlink(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputSymlink(const OutputSymlink& from);
  OutputSymlink(OutputSymlink&& from) noexcept
    : OutputSymlink() {
    *this = ::std::move(from);
  }

  inline OutputSymlink& operator=(const OutputSymlink& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputSymlink& operator=(OutputSymlink&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputSymlink& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputSymlink* internal_default_instance() {
    return reinterpret_cast<const OutputSymlink*>(
               &_OutputSymlink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OutputSymlink& a, OutputSymlink& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputSymlink* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputSymlink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputSymlink* New() const final {
    return CreateMaybeMessage<OutputSymlink>(nullptr);
  }

  OutputSymlink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputSymlink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputSymlink& from);
  void MergeFrom(const OutputSymlink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputSymlink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.OutputSymlink";
  }
  protected:
  explicit OutputSymlink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kTargetFieldNumber = 2,
    kNodePropertiesFieldNumber = 4,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string target = 2;
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // .build.bazel.remote.execution.v2.NodeProperties node_properties = 4;
  bool has_node_properties() const;
  private:
  bool _internal_has_node_properties() const;
  public:
  void clear_node_properties();
  const ::build::bazel::remote::execution::v2::NodeProperties& node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* release_node_properties();
  ::build::bazel::remote::execution::v2::NodeProperties* mutable_node_properties();
  void set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  private:
  const ::build::bazel::remote::execution::v2::NodeProperties& _internal_node_properties() const;
  ::build::bazel::remote::execution::v2::NodeProperties* _internal_mutable_node_properties();
  public:
  void unsafe_arena_set_allocated_node_properties(
      ::build::bazel::remote::execution::v2::NodeProperties* node_properties);
  ::build::bazel::remote::execution::v2::NodeProperties* unsafe_arena_release_node_properties();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.OutputSymlink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::build::bazel::remote::execution::v2::NodeProperties* node_properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionPolicy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ExecutionPolicy) */ {
 public:
  inline ExecutionPolicy() : ExecutionPolicy(nullptr) {}
  virtual ~ExecutionPolicy();
  explicit constexpr ExecutionPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionPolicy(const ExecutionPolicy& from);
  ExecutionPolicy(ExecutionPolicy&& from) noexcept
    : ExecutionPolicy() {
    *this = ::std::move(from);
  }

  inline ExecutionPolicy& operator=(const ExecutionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionPolicy& operator=(ExecutionPolicy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecutionPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionPolicy* internal_default_instance() {
    return reinterpret_cast<const ExecutionPolicy*>(
               &_ExecutionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ExecutionPolicy& a, ExecutionPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionPolicy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionPolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutionPolicy* New() const final {
    return CreateMaybeMessage<ExecutionPolicy>(nullptr);
  }

  ExecutionPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecutionPolicy& from);
  void MergeFrom(const ExecutionPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ExecutionPolicy";
  }
  protected:
  explicit ExecutionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 1,
  };
  // int32 priority = 1;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ExecutionPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ResultsCachePolicy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ResultsCachePolicy) */ {
 public:
  inline ResultsCachePolicy() : ResultsCachePolicy(nullptr) {}
  virtual ~ResultsCachePolicy();
  explicit constexpr ResultsCachePolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultsCachePolicy(const ResultsCachePolicy& from);
  ResultsCachePolicy(ResultsCachePolicy&& from) noexcept
    : ResultsCachePolicy() {
    *this = ::std::move(from);
  }

  inline ResultsCachePolicy& operator=(const ResultsCachePolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultsCachePolicy& operator=(ResultsCachePolicy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultsCachePolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultsCachePolicy* internal_default_instance() {
    return reinterpret_cast<const ResultsCachePolicy*>(
               &_ResultsCachePolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ResultsCachePolicy& a, ResultsCachePolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultsCachePolicy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultsCachePolicy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultsCachePolicy* New() const final {
    return CreateMaybeMessage<ResultsCachePolicy>(nullptr);
  }

  ResultsCachePolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultsCachePolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultsCachePolicy& from);
  void MergeFrom(const ResultsCachePolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultsCachePolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ResultsCachePolicy";
  }
  protected:
  explicit ResultsCachePolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityFieldNumber = 1,
  };
  // int32 priority = 1;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ResultsCachePolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecuteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ExecuteRequest) */ {
 public:
  inline ExecuteRequest() : ExecuteRequest(nullptr) {}
  virtual ~ExecuteRequest();
  explicit constexpr ExecuteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteRequest(const ExecuteRequest& from);
  ExecuteRequest(ExecuteRequest&& from) noexcept
    : ExecuteRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteRequest& operator=(const ExecuteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteRequest& operator=(ExecuteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteRequest*>(
               &_ExecuteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ExecuteRequest& a, ExecuteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteRequest* New() const final {
    return CreateMaybeMessage<ExecuteRequest>(nullptr);
  }

  ExecuteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteRequest& from);
  void MergeFrom(const ExecuteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ExecuteRequest";
  }
  protected:
  explicit ExecuteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceNameFieldNumber = 1,
    kActionDigestFieldNumber = 6,
    kExecutionPolicyFieldNumber = 7,
    kResultsCachePolicyFieldNumber = 8,
    kSkipCacheLookupFieldNumber = 3,
  };
  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // .build.bazel.remote.execution.v2.Digest action_digest = 6;
  bool has_action_digest() const;
  private:
  bool _internal_has_action_digest() const;
  public:
  void clear_action_digest();
  const ::build::bazel::remote::execution::v2::Digest& action_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_action_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_action_digest();
  void set_allocated_action_digest(::build::bazel::remote::execution::v2::Digest* action_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_action_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_action_digest();
  public:
  void unsafe_arena_set_allocated_action_digest(
      ::build::bazel::remote::execution::v2::Digest* action_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_action_digest();

  // .build.bazel.remote.execution.v2.ExecutionPolicy execution_policy = 7;
  bool has_execution_policy() const;
  private:
  bool _internal_has_execution_policy() const;
  public:
  void clear_execution_policy();
  const ::build::bazel::remote::execution::v2::ExecutionPolicy& execution_policy() const;
  ::build::bazel::remote::execution::v2::ExecutionPolicy* release_execution_policy();
  ::build::bazel::remote::execution::v2::ExecutionPolicy* mutable_execution_policy();
  void set_allocated_execution_policy(::build::bazel::remote::execution::v2::ExecutionPolicy* execution_policy);
  private:
  const ::build::bazel::remote::execution::v2::ExecutionPolicy& _internal_execution_policy() const;
  ::build::bazel::remote::execution::v2::ExecutionPolicy* _internal_mutable_execution_policy();
  public:
  void unsafe_arena_set_allocated_execution_policy(
      ::build::bazel::remote::execution::v2::ExecutionPolicy* execution_policy);
  ::build::bazel::remote::execution::v2::ExecutionPolicy* unsafe_arena_release_execution_policy();

  // .build.bazel.remote.execution.v2.ResultsCachePolicy results_cache_policy = 8;
  bool has_results_cache_policy() const;
  private:
  bool _internal_has_results_cache_policy() const;
  public:
  void clear_results_cache_policy();
  const ::build::bazel::remote::execution::v2::ResultsCachePolicy& results_cache_policy() const;
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* release_results_cache_policy();
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* mutable_results_cache_policy();
  void set_allocated_results_cache_policy(::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy);
  private:
  const ::build::bazel::remote::execution::v2::ResultsCachePolicy& _internal_results_cache_policy() const;
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* _internal_mutable_results_cache_policy();
  public:
  void unsafe_arena_set_allocated_results_cache_policy(
      ::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy);
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* unsafe_arena_release_results_cache_policy();

  // bool skip_cache_lookup = 3;
  void clear_skip_cache_lookup();
  bool skip_cache_lookup() const;
  void set_skip_cache_lookup(bool value);
  private:
  bool _internal_skip_cache_lookup() const;
  void _internal_set_skip_cache_lookup(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ExecuteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::build::bazel::remote::execution::v2::Digest* action_digest_;
  ::build::bazel::remote::execution::v2::ExecutionPolicy* execution_policy_;
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy_;
  bool skip_cache_lookup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class LogFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.LogFile) */ {
 public:
  inline LogFile() : LogFile(nullptr) {}
  virtual ~LogFile();
  explicit constexpr LogFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogFile(const LogFile& from);
  LogFile(LogFile&& from) noexcept
    : LogFile() {
    *this = ::std::move(from);
  }

  inline LogFile& operator=(const LogFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogFile& operator=(LogFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogFile* internal_default_instance() {
    return reinterpret_cast<const LogFile*>(
               &_LogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(LogFile& a, LogFile& b) {
    a.Swap(&b);
  }
  inline void Swap(LogFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogFile* New() const final {
    return CreateMaybeMessage<LogFile>(nullptr);
  }

  LogFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogFile& from);
  void MergeFrom(const LogFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.LogFile";
  }
  protected:
  explicit LogFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFieldNumber = 1,
    kHumanReadableFieldNumber = 2,
  };
  // .build.bazel.remote.execution.v2.Digest digest = 1;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const ::build::bazel::remote::execution::v2::Digest& digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_digest();
  void set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_digest();
  public:
  void unsafe_arena_set_allocated_digest(
      ::build::bazel::remote::execution::v2::Digest* digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_digest();

  // bool human_readable = 2;
  void clear_human_readable();
  bool human_readable() const;
  void set_human_readable(bool value);
  private:
  bool _internal_human_readable() const;
  void _internal_set_human_readable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.LogFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::build::bazel::remote::execution::v2::Digest* digest_;
  bool human_readable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecuteResponse_ServerLogsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExecuteResponse_ServerLogsEntry_DoNotUse, 
    std::string, ::build::bazel::remote::execution::v2::LogFile,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ExecuteResponse_ServerLogsEntry_DoNotUse, 
    std::string, ::build::bazel::remote::execution::v2::LogFile,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ExecuteResponse_ServerLogsEntry_DoNotUse();
  explicit constexpr ExecuteResponse_ServerLogsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ExecuteResponse_ServerLogsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ExecuteResponse_ServerLogsEntry_DoNotUse& other);
  static const ExecuteResponse_ServerLogsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExecuteResponse_ServerLogsEntry_DoNotUse*>(&_ExecuteResponse_ServerLogsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "build.bazel.remote.execution.v2.ExecuteResponse.ServerLogsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto);
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto.file_level_metadata[22];
  }

  public:
};

// -------------------------------------------------------------------

class ExecuteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ExecuteResponse) */ {
 public:
  inline ExecuteResponse() : ExecuteResponse(nullptr) {}
  virtual ~ExecuteResponse();
  explicit constexpr ExecuteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteResponse(const ExecuteResponse& from);
  ExecuteResponse(ExecuteResponse&& from) noexcept
    : ExecuteResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteResponse& operator=(const ExecuteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteResponse& operator=(ExecuteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteResponse*>(
               &_ExecuteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ExecuteResponse& a, ExecuteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteResponse* New() const final {
    return CreateMaybeMessage<ExecuteResponse>(nullptr);
  }

  ExecuteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteResponse& from);
  void MergeFrom(const ExecuteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ExecuteResponse";
  }
  protected:
  explicit ExecuteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kServerLogsFieldNumber = 4,
    kMessageFieldNumber = 5,
    kResultFieldNumber = 1,
    kStatusFieldNumber = 3,
    kCachedResultFieldNumber = 2,
  };
  // map<string, .build.bazel.remote.execution.v2.LogFile> server_logs = 4;
  int server_logs_size() const;
  private:
  int _internal_server_logs_size() const;
  public:
  void clear_server_logs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::build::bazel::remote::execution::v2::LogFile >&
      _internal_server_logs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::build::bazel::remote::execution::v2::LogFile >*
      _internal_mutable_server_logs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::build::bazel::remote::execution::v2::LogFile >&
      server_logs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::build::bazel::remote::execution::v2::LogFile >*
      mutable_server_logs();

  // string message = 5;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .build.bazel.remote.execution.v2.ActionResult result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::build::bazel::remote::execution::v2::ActionResult& result() const;
  ::build::bazel::remote::execution::v2::ActionResult* release_result();
  ::build::bazel::remote::execution::v2::ActionResult* mutable_result();
  void set_allocated_result(::build::bazel::remote::execution::v2::ActionResult* result);
  private:
  const ::build::bazel::remote::execution::v2::ActionResult& _internal_result() const;
  ::build::bazel::remote::execution::v2::ActionResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::build::bazel::remote::execution::v2::ActionResult* result);
  ::build::bazel::remote::execution::v2::ActionResult* unsafe_arena_release_result();

  // .google.rpc.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // bool cached_result = 2;
  void clear_cached_result();
  bool cached_result() const;
  void set_cached_result(bool value);
  private:
  bool _internal_cached_result() const;
  void _internal_set_cached_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ExecuteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ExecuteResponse_ServerLogsEntry_DoNotUse,
      std::string, ::build::bazel::remote::execution::v2::LogFile,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> server_logs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::build::bazel::remote::execution::v2::ActionResult* result_;
  ::google::rpc::Status* status_;
  bool cached_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionStage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ExecutionStage) */ {
 public:
  inline ExecutionStage() : ExecutionStage(nullptr) {}
  virtual ~ExecutionStage();
  explicit constexpr ExecutionStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionStage(const ExecutionStage& from);
  ExecutionStage(ExecutionStage&& from) noexcept
    : ExecutionStage() {
    *this = ::std::move(from);
  }

  inline ExecutionStage& operator=(const ExecutionStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionStage& operator=(ExecutionStage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecutionStage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionStage* internal_default_instance() {
    return reinterpret_cast<const ExecutionStage*>(
               &_ExecutionStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ExecutionStage& a, ExecutionStage& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionStage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutionStage* New() const final {
    return CreateMaybeMessage<ExecutionStage>(nullptr);
  }

  ExecutionStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionStage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecutionStage& from);
  void MergeFrom(const ExecutionStage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionStage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ExecutionStage";
  }
  protected:
  explicit ExecutionStage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ExecutionStage_Value Value;
  static constexpr Value UNKNOWN =
    ExecutionStage_Value_UNKNOWN;
  static constexpr Value CACHE_CHECK =
    ExecutionStage_Value_CACHE_CHECK;
  static constexpr Value QUEUED =
    ExecutionStage_Value_QUEUED;
  static constexpr Value EXECUTING =
    ExecutionStage_Value_EXECUTING;
  static constexpr Value COMPLETED =
    ExecutionStage_Value_COMPLETED;
  static inline bool Value_IsValid(int value) {
    return ExecutionStage_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    ExecutionStage_Value_Value_MIN;
  static constexpr Value Value_MAX =
    ExecutionStage_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    ExecutionStage_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return ExecutionStage_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return ExecutionStage_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return ExecutionStage_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ExecutionStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecuteOperationMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ExecuteOperationMetadata) */ {
 public:
  inline ExecuteOperationMetadata() : ExecuteOperationMetadata(nullptr) {}
  virtual ~ExecuteOperationMetadata();
  explicit constexpr ExecuteOperationMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteOperationMetadata(const ExecuteOperationMetadata& from);
  ExecuteOperationMetadata(ExecuteOperationMetadata&& from) noexcept
    : ExecuteOperationMetadata() {
    *this = ::std::move(from);
  }

  inline ExecuteOperationMetadata& operator=(const ExecuteOperationMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteOperationMetadata& operator=(ExecuteOperationMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteOperationMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteOperationMetadata* internal_default_instance() {
    return reinterpret_cast<const ExecuteOperationMetadata*>(
               &_ExecuteOperationMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ExecuteOperationMetadata& a, ExecuteOperationMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteOperationMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteOperationMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteOperationMetadata* New() const final {
    return CreateMaybeMessage<ExecuteOperationMetadata>(nullptr);
  }

  ExecuteOperationMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteOperationMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteOperationMetadata& from);
  void MergeFrom(const ExecuteOperationMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteOperationMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ExecuteOperationMetadata";
  }
  protected:
  explicit ExecuteOperationMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdoutStreamNameFieldNumber = 3,
    kStderrStreamNameFieldNumber = 4,
    kActionDigestFieldNumber = 2,
    kStageFieldNumber = 1,
  };
  // string stdout_stream_name = 3;
  void clear_stdout_stream_name();
  const std::string& stdout_stream_name() const;
  void set_stdout_stream_name(const std::string& value);
  void set_stdout_stream_name(std::string&& value);
  void set_stdout_stream_name(const char* value);
  void set_stdout_stream_name(const char* value, size_t size);
  std::string* mutable_stdout_stream_name();
  std::string* release_stdout_stream_name();
  void set_allocated_stdout_stream_name(std::string* stdout_stream_name);
  private:
  const std::string& _internal_stdout_stream_name() const;
  void _internal_set_stdout_stream_name(const std::string& value);
  std::string* _internal_mutable_stdout_stream_name();
  public:

  // string stderr_stream_name = 4;
  void clear_stderr_stream_name();
  const std::string& stderr_stream_name() const;
  void set_stderr_stream_name(const std::string& value);
  void set_stderr_stream_name(std::string&& value);
  void set_stderr_stream_name(const char* value);
  void set_stderr_stream_name(const char* value, size_t size);
  std::string* mutable_stderr_stream_name();
  std::string* release_stderr_stream_name();
  void set_allocated_stderr_stream_name(std::string* stderr_stream_name);
  private:
  const std::string& _internal_stderr_stream_name() const;
  void _internal_set_stderr_stream_name(const std::string& value);
  std::string* _internal_mutable_stderr_stream_name();
  public:

  // .build.bazel.remote.execution.v2.Digest action_digest = 2;
  bool has_action_digest() const;
  private:
  bool _internal_has_action_digest() const;
  public:
  void clear_action_digest();
  const ::build::bazel::remote::execution::v2::Digest& action_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_action_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_action_digest();
  void set_allocated_action_digest(::build::bazel::remote::execution::v2::Digest* action_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_action_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_action_digest();
  public:
  void unsafe_arena_set_allocated_action_digest(
      ::build::bazel::remote::execution::v2::Digest* action_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_action_digest();

  // .build.bazel.remote.execution.v2.ExecutionStage.Value stage = 1;
  void clear_stage();
  ::build::bazel::remote::execution::v2::ExecutionStage_Value stage() const;
  void set_stage(::build::bazel::remote::execution::v2::ExecutionStage_Value value);
  private:
  ::build::bazel::remote::execution::v2::ExecutionStage_Value _internal_stage() const;
  void _internal_set_stage(::build::bazel::remote::execution::v2::ExecutionStage_Value value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ExecuteOperationMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stdout_stream_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stderr_stream_name_;
  ::build::bazel::remote::execution::v2::Digest* action_digest_;
  int stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class WaitExecutionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.WaitExecutionRequest) */ {
 public:
  inline WaitExecutionRequest() : WaitExecutionRequest(nullptr) {}
  virtual ~WaitExecutionRequest();
  explicit constexpr WaitExecutionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitExecutionRequest(const WaitExecutionRequest& from);
  WaitExecutionRequest(WaitExecutionRequest&& from) noexcept
    : WaitExecutionRequest() {
    *this = ::std::move(from);
  }

  inline WaitExecutionRequest& operator=(const WaitExecutionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitExecutionRequest& operator=(WaitExecutionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitExecutionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitExecutionRequest* internal_default_instance() {
    return reinterpret_cast<const WaitExecutionRequest*>(
               &_WaitExecutionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(WaitExecutionRequest& a, WaitExecutionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitExecutionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitExecutionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitExecutionRequest* New() const final {
    return CreateMaybeMessage<WaitExecutionRequest>(nullptr);
  }

  WaitExecutionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitExecutionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitExecutionRequest& from);
  void MergeFrom(const WaitExecutionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitExecutionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.WaitExecutionRequest";
  }
  protected:
  explicit WaitExecutionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.WaitExecutionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class GetActionResultRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.GetActionResultRequest) */ {
 public:
  inline GetActionResultRequest() : GetActionResultRequest(nullptr) {}
  virtual ~GetActionResultRequest();
  explicit constexpr GetActionResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetActionResultRequest(const GetActionResultRequest& from);
  GetActionResultRequest(GetActionResultRequest&& from) noexcept
    : GetActionResultRequest() {
    *this = ::std::move(from);
  }

  inline GetActionResultRequest& operator=(const GetActionResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActionResultRequest& operator=(GetActionResultRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActionResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetActionResultRequest* internal_default_instance() {
    return reinterpret_cast<const GetActionResultRequest*>(
               &_GetActionResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetActionResultRequest& a, GetActionResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActionResultRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetActionResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActionResultRequest* New() const final {
    return CreateMaybeMessage<GetActionResultRequest>(nullptr);
  }

  GetActionResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActionResultRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActionResultRequest& from);
  void MergeFrom(const GetActionResultRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActionResultRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.GetActionResultRequest";
  }
  protected:
  explicit GetActionResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInlineOutputFilesFieldNumber = 5,
    kInstanceNameFieldNumber = 1,
    kActionDigestFieldNumber = 2,
    kInlineStdoutFieldNumber = 3,
    kInlineStderrFieldNumber = 4,
  };
  // repeated string inline_output_files = 5;
  int inline_output_files_size() const;
  private:
  int _internal_inline_output_files_size() const;
  public:
  void clear_inline_output_files();
  const std::string& inline_output_files(int index) const;
  std::string* mutable_inline_output_files(int index);
  void set_inline_output_files(int index, const std::string& value);
  void set_inline_output_files(int index, std::string&& value);
  void set_inline_output_files(int index, const char* value);
  void set_inline_output_files(int index, const char* value, size_t size);
  std::string* add_inline_output_files();
  void add_inline_output_files(const std::string& value);
  void add_inline_output_files(std::string&& value);
  void add_inline_output_files(const char* value);
  void add_inline_output_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inline_output_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inline_output_files();
  private:
  const std::string& _internal_inline_output_files(int index) const;
  std::string* _internal_add_inline_output_files();
  public:

  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // .build.bazel.remote.execution.v2.Digest action_digest = 2;
  bool has_action_digest() const;
  private:
  bool _internal_has_action_digest() const;
  public:
  void clear_action_digest();
  const ::build::bazel::remote::execution::v2::Digest& action_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_action_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_action_digest();
  void set_allocated_action_digest(::build::bazel::remote::execution::v2::Digest* action_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_action_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_action_digest();
  public:
  void unsafe_arena_set_allocated_action_digest(
      ::build::bazel::remote::execution::v2::Digest* action_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_action_digest();

  // bool inline_stdout = 3;
  void clear_inline_stdout();
  bool inline_stdout() const;
  void set_inline_stdout(bool value);
  private:
  bool _internal_inline_stdout() const;
  void _internal_set_inline_stdout(bool value);
  public:

  // bool inline_stderr = 4;
  void clear_inline_stderr();
  bool inline_stderr() const;
  void set_inline_stderr(bool value);
  private:
  bool _internal_inline_stderr() const;
  void _internal_set_inline_stderr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.GetActionResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inline_output_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::build::bazel::remote::execution::v2::Digest* action_digest_;
  bool inline_stdout_;
  bool inline_stderr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class UpdateActionResultRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.UpdateActionResultRequest) */ {
 public:
  inline UpdateActionResultRequest() : UpdateActionResultRequest(nullptr) {}
  virtual ~UpdateActionResultRequest();
  explicit constexpr UpdateActionResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateActionResultRequest(const UpdateActionResultRequest& from);
  UpdateActionResultRequest(UpdateActionResultRequest&& from) noexcept
    : UpdateActionResultRequest() {
    *this = ::std::move(from);
  }

  inline UpdateActionResultRequest& operator=(const UpdateActionResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateActionResultRequest& operator=(UpdateActionResultRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateActionResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateActionResultRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateActionResultRequest*>(
               &_UpdateActionResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(UpdateActionResultRequest& a, UpdateActionResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateActionResultRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateActionResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateActionResultRequest* New() const final {
    return CreateMaybeMessage<UpdateActionResultRequest>(nullptr);
  }

  UpdateActionResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateActionResultRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateActionResultRequest& from);
  void MergeFrom(const UpdateActionResultRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateActionResultRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.UpdateActionResultRequest";
  }
  protected:
  explicit UpdateActionResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceNameFieldNumber = 1,
    kActionDigestFieldNumber = 2,
    kActionResultFieldNumber = 3,
    kResultsCachePolicyFieldNumber = 4,
  };
  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // .build.bazel.remote.execution.v2.Digest action_digest = 2;
  bool has_action_digest() const;
  private:
  bool _internal_has_action_digest() const;
  public:
  void clear_action_digest();
  const ::build::bazel::remote::execution::v2::Digest& action_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_action_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_action_digest();
  void set_allocated_action_digest(::build::bazel::remote::execution::v2::Digest* action_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_action_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_action_digest();
  public:
  void unsafe_arena_set_allocated_action_digest(
      ::build::bazel::remote::execution::v2::Digest* action_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_action_digest();

  // .build.bazel.remote.execution.v2.ActionResult action_result = 3;
  bool has_action_result() const;
  private:
  bool _internal_has_action_result() const;
  public:
  void clear_action_result();
  const ::build::bazel::remote::execution::v2::ActionResult& action_result() const;
  ::build::bazel::remote::execution::v2::ActionResult* release_action_result();
  ::build::bazel::remote::execution::v2::ActionResult* mutable_action_result();
  void set_allocated_action_result(::build::bazel::remote::execution::v2::ActionResult* action_result);
  private:
  const ::build::bazel::remote::execution::v2::ActionResult& _internal_action_result() const;
  ::build::bazel::remote::execution::v2::ActionResult* _internal_mutable_action_result();
  public:
  void unsafe_arena_set_allocated_action_result(
      ::build::bazel::remote::execution::v2::ActionResult* action_result);
  ::build::bazel::remote::execution::v2::ActionResult* unsafe_arena_release_action_result();

  // .build.bazel.remote.execution.v2.ResultsCachePolicy results_cache_policy = 4;
  bool has_results_cache_policy() const;
  private:
  bool _internal_has_results_cache_policy() const;
  public:
  void clear_results_cache_policy();
  const ::build::bazel::remote::execution::v2::ResultsCachePolicy& results_cache_policy() const;
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* release_results_cache_policy();
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* mutable_results_cache_policy();
  void set_allocated_results_cache_policy(::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy);
  private:
  const ::build::bazel::remote::execution::v2::ResultsCachePolicy& _internal_results_cache_policy() const;
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* _internal_mutable_results_cache_policy();
  public:
  void unsafe_arena_set_allocated_results_cache_policy(
      ::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy);
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* unsafe_arena_release_results_cache_policy();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.UpdateActionResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::build::bazel::remote::execution::v2::Digest* action_digest_;
  ::build::bazel::remote::execution::v2::ActionResult* action_result_;
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class FindMissingBlobsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.FindMissingBlobsRequest) */ {
 public:
  inline FindMissingBlobsRequest() : FindMissingBlobsRequest(nullptr) {}
  virtual ~FindMissingBlobsRequest();
  explicit constexpr FindMissingBlobsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindMissingBlobsRequest(const FindMissingBlobsRequest& from);
  FindMissingBlobsRequest(FindMissingBlobsRequest&& from) noexcept
    : FindMissingBlobsRequest() {
    *this = ::std::move(from);
  }

  inline FindMissingBlobsRequest& operator=(const FindMissingBlobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindMissingBlobsRequest& operator=(FindMissingBlobsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindMissingBlobsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindMissingBlobsRequest* internal_default_instance() {
    return reinterpret_cast<const FindMissingBlobsRequest*>(
               &_FindMissingBlobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FindMissingBlobsRequest& a, FindMissingBlobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindMissingBlobsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindMissingBlobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindMissingBlobsRequest* New() const final {
    return CreateMaybeMessage<FindMissingBlobsRequest>(nullptr);
  }

  FindMissingBlobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindMissingBlobsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindMissingBlobsRequest& from);
  void MergeFrom(const FindMissingBlobsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindMissingBlobsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.FindMissingBlobsRequest";
  }
  protected:
  explicit FindMissingBlobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobDigestsFieldNumber = 2,
    kInstanceNameFieldNumber = 1,
  };
  // repeated .build.bazel.remote.execution.v2.Digest blob_digests = 2;
  int blob_digests_size() const;
  private:
  int _internal_blob_digests_size() const;
  public:
  void clear_blob_digests();
  ::build::bazel::remote::execution::v2::Digest* mutable_blob_digests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >*
      mutable_blob_digests();
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_blob_digests(int index) const;
  ::build::bazel::remote::execution::v2::Digest* _internal_add_blob_digests();
  public:
  const ::build::bazel::remote::execution::v2::Digest& blob_digests(int index) const;
  ::build::bazel::remote::execution::v2::Digest* add_blob_digests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >&
      blob_digests() const;

  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.FindMissingBlobsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest > blob_digests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class FindMissingBlobsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.FindMissingBlobsResponse) */ {
 public:
  inline FindMissingBlobsResponse() : FindMissingBlobsResponse(nullptr) {}
  virtual ~FindMissingBlobsResponse();
  explicit constexpr FindMissingBlobsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindMissingBlobsResponse(const FindMissingBlobsResponse& from);
  FindMissingBlobsResponse(FindMissingBlobsResponse&& from) noexcept
    : FindMissingBlobsResponse() {
    *this = ::std::move(from);
  }

  inline FindMissingBlobsResponse& operator=(const FindMissingBlobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindMissingBlobsResponse& operator=(FindMissingBlobsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindMissingBlobsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindMissingBlobsResponse* internal_default_instance() {
    return reinterpret_cast<const FindMissingBlobsResponse*>(
               &_FindMissingBlobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FindMissingBlobsResponse& a, FindMissingBlobsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindMissingBlobsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindMissingBlobsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindMissingBlobsResponse* New() const final {
    return CreateMaybeMessage<FindMissingBlobsResponse>(nullptr);
  }

  FindMissingBlobsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindMissingBlobsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindMissingBlobsResponse& from);
  void MergeFrom(const FindMissingBlobsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindMissingBlobsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.FindMissingBlobsResponse";
  }
  protected:
  explicit FindMissingBlobsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissingBlobDigestsFieldNumber = 2,
  };
  // repeated .build.bazel.remote.execution.v2.Digest missing_blob_digests = 2;
  int missing_blob_digests_size() const;
  private:
  int _internal_missing_blob_digests_size() const;
  public:
  void clear_missing_blob_digests();
  ::build::bazel::remote::execution::v2::Digest* mutable_missing_blob_digests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >*
      mutable_missing_blob_digests();
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_missing_blob_digests(int index) const;
  ::build::bazel::remote::execution::v2::Digest* _internal_add_missing_blob_digests();
  public:
  const ::build::bazel::remote::execution::v2::Digest& missing_blob_digests(int index) const;
  ::build::bazel::remote::execution::v2::Digest* add_missing_blob_digests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >&
      missing_blob_digests() const;

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.FindMissingBlobsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest > missing_blob_digests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateBlobsRequest_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request) */ {
 public:
  inline BatchUpdateBlobsRequest_Request() : BatchUpdateBlobsRequest_Request(nullptr) {}
  virtual ~BatchUpdateBlobsRequest_Request();
  explicit constexpr BatchUpdateBlobsRequest_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateBlobsRequest_Request(const BatchUpdateBlobsRequest_Request& from);
  BatchUpdateBlobsRequest_Request(BatchUpdateBlobsRequest_Request&& from) noexcept
    : BatchUpdateBlobsRequest_Request() {
    *this = ::std::move(from);
  }

  inline BatchUpdateBlobsRequest_Request& operator=(const BatchUpdateBlobsRequest_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateBlobsRequest_Request& operator=(BatchUpdateBlobsRequest_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchUpdateBlobsRequest_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateBlobsRequest_Request* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateBlobsRequest_Request*>(
               &_BatchUpdateBlobsRequest_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(BatchUpdateBlobsRequest_Request& a, BatchUpdateBlobsRequest_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateBlobsRequest_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateBlobsRequest_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdateBlobsRequest_Request* New() const final {
    return CreateMaybeMessage<BatchUpdateBlobsRequest_Request>(nullptr);
  }

  BatchUpdateBlobsRequest_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchUpdateBlobsRequest_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchUpdateBlobsRequest_Request& from);
  void MergeFrom(const BatchUpdateBlobsRequest_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateBlobsRequest_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request";
  }
  protected:
  explicit BatchUpdateBlobsRequest_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDigestFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .build.bazel.remote.execution.v2.Digest digest = 1;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const ::build::bazel::remote::execution::v2::Digest& digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_digest();
  void set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_digest();
  public:
  void unsafe_arena_set_allocated_digest(
      ::build::bazel::remote::execution::v2::Digest* digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_digest();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::build::bazel::remote::execution::v2::Digest* digest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateBlobsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest) */ {
 public:
  inline BatchUpdateBlobsRequest() : BatchUpdateBlobsRequest(nullptr) {}
  virtual ~BatchUpdateBlobsRequest();
  explicit constexpr BatchUpdateBlobsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateBlobsRequest(const BatchUpdateBlobsRequest& from);
  BatchUpdateBlobsRequest(BatchUpdateBlobsRequest&& from) noexcept
    : BatchUpdateBlobsRequest() {
    *this = ::std::move(from);
  }

  inline BatchUpdateBlobsRequest& operator=(const BatchUpdateBlobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateBlobsRequest& operator=(BatchUpdateBlobsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchUpdateBlobsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateBlobsRequest* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateBlobsRequest*>(
               &_BatchUpdateBlobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(BatchUpdateBlobsRequest& a, BatchUpdateBlobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateBlobsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateBlobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdateBlobsRequest* New() const final {
    return CreateMaybeMessage<BatchUpdateBlobsRequest>(nullptr);
  }

  BatchUpdateBlobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchUpdateBlobsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchUpdateBlobsRequest& from);
  void MergeFrom(const BatchUpdateBlobsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateBlobsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.BatchUpdateBlobsRequest";
  }
  protected:
  explicit BatchUpdateBlobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatchUpdateBlobsRequest_Request Request;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kInstanceNameFieldNumber = 1,
  };
  // repeated .build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request >*
      mutable_requests();
  private:
  const ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request& _internal_requests(int index) const;
  ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request* _internal_add_requests();
  public:
  const ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request& requests(int index) const;
  ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request >&
      requests() const;

  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request > requests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateBlobsResponse_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response) */ {
 public:
  inline BatchUpdateBlobsResponse_Response() : BatchUpdateBlobsResponse_Response(nullptr) {}
  virtual ~BatchUpdateBlobsResponse_Response();
  explicit constexpr BatchUpdateBlobsResponse_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateBlobsResponse_Response(const BatchUpdateBlobsResponse_Response& from);
  BatchUpdateBlobsResponse_Response(BatchUpdateBlobsResponse_Response&& from) noexcept
    : BatchUpdateBlobsResponse_Response() {
    *this = ::std::move(from);
  }

  inline BatchUpdateBlobsResponse_Response& operator=(const BatchUpdateBlobsResponse_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateBlobsResponse_Response& operator=(BatchUpdateBlobsResponse_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchUpdateBlobsResponse_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateBlobsResponse_Response* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateBlobsResponse_Response*>(
               &_BatchUpdateBlobsResponse_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(BatchUpdateBlobsResponse_Response& a, BatchUpdateBlobsResponse_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateBlobsResponse_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateBlobsResponse_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdateBlobsResponse_Response* New() const final {
    return CreateMaybeMessage<BatchUpdateBlobsResponse_Response>(nullptr);
  }

  BatchUpdateBlobsResponse_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchUpdateBlobsResponse_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchUpdateBlobsResponse_Response& from);
  void MergeFrom(const BatchUpdateBlobsResponse_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateBlobsResponse_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response";
  }
  protected:
  explicit BatchUpdateBlobsResponse_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .build.bazel.remote.execution.v2.Digest digest = 1;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const ::build::bazel::remote::execution::v2::Digest& digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_digest();
  void set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_digest();
  public:
  void unsafe_arena_set_allocated_digest(
      ::build::bazel::remote::execution::v2::Digest* digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_digest();

  // .google.rpc.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::build::bazel::remote::execution::v2::Digest* digest_;
  ::google::rpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateBlobsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse) */ {
 public:
  inline BatchUpdateBlobsResponse() : BatchUpdateBlobsResponse(nullptr) {}
  virtual ~BatchUpdateBlobsResponse();
  explicit constexpr BatchUpdateBlobsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateBlobsResponse(const BatchUpdateBlobsResponse& from);
  BatchUpdateBlobsResponse(BatchUpdateBlobsResponse&& from) noexcept
    : BatchUpdateBlobsResponse() {
    *this = ::std::move(from);
  }

  inline BatchUpdateBlobsResponse& operator=(const BatchUpdateBlobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateBlobsResponse& operator=(BatchUpdateBlobsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchUpdateBlobsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateBlobsResponse* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateBlobsResponse*>(
               &_BatchUpdateBlobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(BatchUpdateBlobsResponse& a, BatchUpdateBlobsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateBlobsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateBlobsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdateBlobsResponse* New() const final {
    return CreateMaybeMessage<BatchUpdateBlobsResponse>(nullptr);
  }

  BatchUpdateBlobsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchUpdateBlobsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchUpdateBlobsResponse& from);
  void MergeFrom(const BatchUpdateBlobsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateBlobsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.BatchUpdateBlobsResponse";
  }
  protected:
  explicit BatchUpdateBlobsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatchUpdateBlobsResponse_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response >*
      mutable_responses();
  private:
  const ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response& _internal_responses(int index) const;
  ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response* _internal_add_responses();
  public:
  const ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response& responses(int index) const;
  ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response >&
      responses() const;

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class BatchReadBlobsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.BatchReadBlobsRequest) */ {
 public:
  inline BatchReadBlobsRequest() : BatchReadBlobsRequest(nullptr) {}
  virtual ~BatchReadBlobsRequest();
  explicit constexpr BatchReadBlobsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchReadBlobsRequest(const BatchReadBlobsRequest& from);
  BatchReadBlobsRequest(BatchReadBlobsRequest&& from) noexcept
    : BatchReadBlobsRequest() {
    *this = ::std::move(from);
  }

  inline BatchReadBlobsRequest& operator=(const BatchReadBlobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchReadBlobsRequest& operator=(BatchReadBlobsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchReadBlobsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchReadBlobsRequest* internal_default_instance() {
    return reinterpret_cast<const BatchReadBlobsRequest*>(
               &_BatchReadBlobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(BatchReadBlobsRequest& a, BatchReadBlobsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchReadBlobsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchReadBlobsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchReadBlobsRequest* New() const final {
    return CreateMaybeMessage<BatchReadBlobsRequest>(nullptr);
  }

  BatchReadBlobsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchReadBlobsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchReadBlobsRequest& from);
  void MergeFrom(const BatchReadBlobsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchReadBlobsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.BatchReadBlobsRequest";
  }
  protected:
  explicit BatchReadBlobsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestsFieldNumber = 2,
    kInstanceNameFieldNumber = 1,
  };
  // repeated .build.bazel.remote.execution.v2.Digest digests = 2;
  int digests_size() const;
  private:
  int _internal_digests_size() const;
  public:
  void clear_digests();
  ::build::bazel::remote::execution::v2::Digest* mutable_digests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >*
      mutable_digests();
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_digests(int index) const;
  ::build::bazel::remote::execution::v2::Digest* _internal_add_digests();
  public:
  const ::build::bazel::remote::execution::v2::Digest& digests(int index) const;
  ::build::bazel::remote::execution::v2::Digest* add_digests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >&
      digests() const;

  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.BatchReadBlobsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest > digests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class BatchReadBlobsResponse_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response) */ {
 public:
  inline BatchReadBlobsResponse_Response() : BatchReadBlobsResponse_Response(nullptr) {}
  virtual ~BatchReadBlobsResponse_Response();
  explicit constexpr BatchReadBlobsResponse_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchReadBlobsResponse_Response(const BatchReadBlobsResponse_Response& from);
  BatchReadBlobsResponse_Response(BatchReadBlobsResponse_Response&& from) noexcept
    : BatchReadBlobsResponse_Response() {
    *this = ::std::move(from);
  }

  inline BatchReadBlobsResponse_Response& operator=(const BatchReadBlobsResponse_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchReadBlobsResponse_Response& operator=(BatchReadBlobsResponse_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchReadBlobsResponse_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchReadBlobsResponse_Response* internal_default_instance() {
    return reinterpret_cast<const BatchReadBlobsResponse_Response*>(
               &_BatchReadBlobsResponse_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(BatchReadBlobsResponse_Response& a, BatchReadBlobsResponse_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchReadBlobsResponse_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchReadBlobsResponse_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchReadBlobsResponse_Response* New() const final {
    return CreateMaybeMessage<BatchReadBlobsResponse_Response>(nullptr);
  }

  BatchReadBlobsResponse_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchReadBlobsResponse_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchReadBlobsResponse_Response& from);
  void MergeFrom(const BatchReadBlobsResponse_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchReadBlobsResponse_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response";
  }
  protected:
  explicit BatchReadBlobsResponse_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDigestFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .build.bazel.remote.execution.v2.Digest digest = 1;
  bool has_digest() const;
  private:
  bool _internal_has_digest() const;
  public:
  void clear_digest();
  const ::build::bazel::remote::execution::v2::Digest& digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_digest();
  void set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_digest();
  public:
  void unsafe_arena_set_allocated_digest(
      ::build::bazel::remote::execution::v2::Digest* digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_digest();

  // .google.rpc.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::build::bazel::remote::execution::v2::Digest* digest_;
  ::google::rpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class BatchReadBlobsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.BatchReadBlobsResponse) */ {
 public:
  inline BatchReadBlobsResponse() : BatchReadBlobsResponse(nullptr) {}
  virtual ~BatchReadBlobsResponse();
  explicit constexpr BatchReadBlobsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchReadBlobsResponse(const BatchReadBlobsResponse& from);
  BatchReadBlobsResponse(BatchReadBlobsResponse&& from) noexcept
    : BatchReadBlobsResponse() {
    *this = ::std::move(from);
  }

  inline BatchReadBlobsResponse& operator=(const BatchReadBlobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchReadBlobsResponse& operator=(BatchReadBlobsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatchReadBlobsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchReadBlobsResponse* internal_default_instance() {
    return reinterpret_cast<const BatchReadBlobsResponse*>(
               &_BatchReadBlobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(BatchReadBlobsResponse& a, BatchReadBlobsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchReadBlobsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchReadBlobsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchReadBlobsResponse* New() const final {
    return CreateMaybeMessage<BatchReadBlobsResponse>(nullptr);
  }

  BatchReadBlobsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchReadBlobsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatchReadBlobsResponse& from);
  void MergeFrom(const BatchReadBlobsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchReadBlobsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.BatchReadBlobsResponse";
  }
  protected:
  explicit BatchReadBlobsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef BatchReadBlobsResponse_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response >*
      mutable_responses();
  private:
  const ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response& _internal_responses(int index) const;
  ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response* _internal_add_responses();
  public:
  const ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response& responses(int index) const;
  ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response >&
      responses() const;

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.BatchReadBlobsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class GetTreeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.GetTreeRequest) */ {
 public:
  inline GetTreeRequest() : GetTreeRequest(nullptr) {}
  virtual ~GetTreeRequest();
  explicit constexpr GetTreeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTreeRequest(const GetTreeRequest& from);
  GetTreeRequest(GetTreeRequest&& from) noexcept
    : GetTreeRequest() {
    *this = ::std::move(from);
  }

  inline GetTreeRequest& operator=(const GetTreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTreeRequest& operator=(GetTreeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTreeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTreeRequest* internal_default_instance() {
    return reinterpret_cast<const GetTreeRequest*>(
               &_GetTreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetTreeRequest& a, GetTreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTreeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTreeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTreeRequest* New() const final {
    return CreateMaybeMessage<GetTreeRequest>(nullptr);
  }

  GetTreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTreeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTreeRequest& from);
  void MergeFrom(const GetTreeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.GetTreeRequest";
  }
  protected:
  explicit GetTreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceNameFieldNumber = 1,
    kPageTokenFieldNumber = 4,
    kRootDigestFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // string page_token = 4;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // .build.bazel.remote.execution.v2.Digest root_digest = 2;
  bool has_root_digest() const;
  private:
  bool _internal_has_root_digest() const;
  public:
  void clear_root_digest();
  const ::build::bazel::remote::execution::v2::Digest& root_digest() const;
  ::build::bazel::remote::execution::v2::Digest* release_root_digest();
  ::build::bazel::remote::execution::v2::Digest* mutable_root_digest();
  void set_allocated_root_digest(::build::bazel::remote::execution::v2::Digest* root_digest);
  private:
  const ::build::bazel::remote::execution::v2::Digest& _internal_root_digest() const;
  ::build::bazel::remote::execution::v2::Digest* _internal_mutable_root_digest();
  public:
  void unsafe_arena_set_allocated_root_digest(
      ::build::bazel::remote::execution::v2::Digest* root_digest);
  ::build::bazel::remote::execution::v2::Digest* unsafe_arena_release_root_digest();

  // int32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.GetTreeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::build::bazel::remote::execution::v2::Digest* root_digest_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class GetTreeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.GetTreeResponse) */ {
 public:
  inline GetTreeResponse() : GetTreeResponse(nullptr) {}
  virtual ~GetTreeResponse();
  explicit constexpr GetTreeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTreeResponse(const GetTreeResponse& from);
  GetTreeResponse(GetTreeResponse&& from) noexcept
    : GetTreeResponse() {
    *this = ::std::move(from);
  }

  inline GetTreeResponse& operator=(const GetTreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTreeResponse& operator=(GetTreeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTreeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTreeResponse* internal_default_instance() {
    return reinterpret_cast<const GetTreeResponse*>(
               &_GetTreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetTreeResponse& a, GetTreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTreeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTreeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTreeResponse* New() const final {
    return CreateMaybeMessage<GetTreeResponse>(nullptr);
  }

  GetTreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTreeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTreeResponse& from);
  void MergeFrom(const GetTreeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTreeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.GetTreeResponse";
  }
  protected:
  explicit GetTreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoriesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .build.bazel.remote.execution.v2.Directory directories = 1;
  int directories_size() const;
  private:
  int _internal_directories_size() const;
  public:
  void clear_directories();
  ::build::bazel::remote::execution::v2::Directory* mutable_directories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory >*
      mutable_directories();
  private:
  const ::build::bazel::remote::execution::v2::Directory& _internal_directories(int index) const;
  ::build::bazel::remote::execution::v2::Directory* _internal_add_directories();
  public:
  const ::build::bazel::remote::execution::v2::Directory& directories(int index) const;
  ::build::bazel::remote::execution::v2::Directory* add_directories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory >&
      directories() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.GetTreeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory > directories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class GetCapabilitiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.GetCapabilitiesRequest) */ {
 public:
  inline GetCapabilitiesRequest() : GetCapabilitiesRequest(nullptr) {}
  virtual ~GetCapabilitiesRequest();
  explicit constexpr GetCapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCapabilitiesRequest(const GetCapabilitiesRequest& from);
  GetCapabilitiesRequest(GetCapabilitiesRequest&& from) noexcept
    : GetCapabilitiesRequest() {
    *this = ::std::move(from);
  }

  inline GetCapabilitiesRequest& operator=(const GetCapabilitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCapabilitiesRequest& operator=(GetCapabilitiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCapabilitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCapabilitiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetCapabilitiesRequest*>(
               &_GetCapabilitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetCapabilitiesRequest& a, GetCapabilitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCapabilitiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCapabilitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCapabilitiesRequest* New() const final {
    return CreateMaybeMessage<GetCapabilitiesRequest>(nullptr);
  }

  GetCapabilitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCapabilitiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCapabilitiesRequest& from);
  void MergeFrom(const GetCapabilitiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCapabilitiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.GetCapabilitiesRequest";
  }
  protected:
  explicit GetCapabilitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceNameFieldNumber = 1,
  };
  // string instance_name = 1;
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.GetCapabilitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ServerCapabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ServerCapabilities) */ {
 public:
  inline ServerCapabilities() : ServerCapabilities(nullptr) {}
  virtual ~ServerCapabilities();
  explicit constexpr ServerCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerCapabilities(const ServerCapabilities& from);
  ServerCapabilities(ServerCapabilities&& from) noexcept
    : ServerCapabilities() {
    *this = ::std::move(from);
  }

  inline ServerCapabilities& operator=(const ServerCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerCapabilities& operator=(ServerCapabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerCapabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerCapabilities* internal_default_instance() {
    return reinterpret_cast<const ServerCapabilities*>(
               &_ServerCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ServerCapabilities& a, ServerCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerCapabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerCapabilities* New() const final {
    return CreateMaybeMessage<ServerCapabilities>(nullptr);
  }

  ServerCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerCapabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerCapabilities& from);
  void MergeFrom(const ServerCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerCapabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ServerCapabilities";
  }
  protected:
  explicit ServerCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCacheCapabilitiesFieldNumber = 1,
    kExecutionCapabilitiesFieldNumber = 2,
    kDeprecatedApiVersionFieldNumber = 3,
    kLowApiVersionFieldNumber = 4,
    kHighApiVersionFieldNumber = 5,
  };
  // .build.bazel.remote.execution.v2.CacheCapabilities cache_capabilities = 1;
  bool has_cache_capabilities() const;
  private:
  bool _internal_has_cache_capabilities() const;
  public:
  void clear_cache_capabilities();
  const ::build::bazel::remote::execution::v2::CacheCapabilities& cache_capabilities() const;
  ::build::bazel::remote::execution::v2::CacheCapabilities* release_cache_capabilities();
  ::build::bazel::remote::execution::v2::CacheCapabilities* mutable_cache_capabilities();
  void set_allocated_cache_capabilities(::build::bazel::remote::execution::v2::CacheCapabilities* cache_capabilities);
  private:
  const ::build::bazel::remote::execution::v2::CacheCapabilities& _internal_cache_capabilities() const;
  ::build::bazel::remote::execution::v2::CacheCapabilities* _internal_mutable_cache_capabilities();
  public:
  void unsafe_arena_set_allocated_cache_capabilities(
      ::build::bazel::remote::execution::v2::CacheCapabilities* cache_capabilities);
  ::build::bazel::remote::execution::v2::CacheCapabilities* unsafe_arena_release_cache_capabilities();

  // .build.bazel.remote.execution.v2.ExecutionCapabilities execution_capabilities = 2;
  bool has_execution_capabilities() const;
  private:
  bool _internal_has_execution_capabilities() const;
  public:
  void clear_execution_capabilities();
  const ::build::bazel::remote::execution::v2::ExecutionCapabilities& execution_capabilities() const;
  ::build::bazel::remote::execution::v2::ExecutionCapabilities* release_execution_capabilities();
  ::build::bazel::remote::execution::v2::ExecutionCapabilities* mutable_execution_capabilities();
  void set_allocated_execution_capabilities(::build::bazel::remote::execution::v2::ExecutionCapabilities* execution_capabilities);
  private:
  const ::build::bazel::remote::execution::v2::ExecutionCapabilities& _internal_execution_capabilities() const;
  ::build::bazel::remote::execution::v2::ExecutionCapabilities* _internal_mutable_execution_capabilities();
  public:
  void unsafe_arena_set_allocated_execution_capabilities(
      ::build::bazel::remote::execution::v2::ExecutionCapabilities* execution_capabilities);
  ::build::bazel::remote::execution::v2::ExecutionCapabilities* unsafe_arena_release_execution_capabilities();

  // .build.bazel.semver.SemVer deprecated_api_version = 3;
  bool has_deprecated_api_version() const;
  private:
  bool _internal_has_deprecated_api_version() const;
  public:
  void clear_deprecated_api_version();
  const ::build::bazel::semver::SemVer& deprecated_api_version() const;
  ::build::bazel::semver::SemVer* release_deprecated_api_version();
  ::build::bazel::semver::SemVer* mutable_deprecated_api_version();
  void set_allocated_deprecated_api_version(::build::bazel::semver::SemVer* deprecated_api_version);
  private:
  const ::build::bazel::semver::SemVer& _internal_deprecated_api_version() const;
  ::build::bazel::semver::SemVer* _internal_mutable_deprecated_api_version();
  public:
  void unsafe_arena_set_allocated_deprecated_api_version(
      ::build::bazel::semver::SemVer* deprecated_api_version);
  ::build::bazel::semver::SemVer* unsafe_arena_release_deprecated_api_version();

  // .build.bazel.semver.SemVer low_api_version = 4;
  bool has_low_api_version() const;
  private:
  bool _internal_has_low_api_version() const;
  public:
  void clear_low_api_version();
  const ::build::bazel::semver::SemVer& low_api_version() const;
  ::build::bazel::semver::SemVer* release_low_api_version();
  ::build::bazel::semver::SemVer* mutable_low_api_version();
  void set_allocated_low_api_version(::build::bazel::semver::SemVer* low_api_version);
  private:
  const ::build::bazel::semver::SemVer& _internal_low_api_version() const;
  ::build::bazel::semver::SemVer* _internal_mutable_low_api_version();
  public:
  void unsafe_arena_set_allocated_low_api_version(
      ::build::bazel::semver::SemVer* low_api_version);
  ::build::bazel::semver::SemVer* unsafe_arena_release_low_api_version();

  // .build.bazel.semver.SemVer high_api_version = 5;
  bool has_high_api_version() const;
  private:
  bool _internal_has_high_api_version() const;
  public:
  void clear_high_api_version();
  const ::build::bazel::semver::SemVer& high_api_version() const;
  ::build::bazel::semver::SemVer* release_high_api_version();
  ::build::bazel::semver::SemVer* mutable_high_api_version();
  void set_allocated_high_api_version(::build::bazel::semver::SemVer* high_api_version);
  private:
  const ::build::bazel::semver::SemVer& _internal_high_api_version() const;
  ::build::bazel::semver::SemVer* _internal_mutable_high_api_version();
  public:
  void unsafe_arena_set_allocated_high_api_version(
      ::build::bazel::semver::SemVer* high_api_version);
  ::build::bazel::semver::SemVer* unsafe_arena_release_high_api_version();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ServerCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::build::bazel::remote::execution::v2::CacheCapabilities* cache_capabilities_;
  ::build::bazel::remote::execution::v2::ExecutionCapabilities* execution_capabilities_;
  ::build::bazel::semver::SemVer* deprecated_api_version_;
  ::build::bazel::semver::SemVer* low_api_version_;
  ::build::bazel::semver::SemVer* high_api_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class DigestFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.DigestFunction) */ {
 public:
  inline DigestFunction() : DigestFunction(nullptr) {}
  virtual ~DigestFunction();
  explicit constexpr DigestFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigestFunction(const DigestFunction& from);
  DigestFunction(DigestFunction&& from) noexcept
    : DigestFunction() {
    *this = ::std::move(from);
  }

  inline DigestFunction& operator=(const DigestFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigestFunction& operator=(DigestFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigestFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigestFunction* internal_default_instance() {
    return reinterpret_cast<const DigestFunction*>(
               &_DigestFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DigestFunction& a, DigestFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(DigestFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigestFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigestFunction* New() const final {
    return CreateMaybeMessage<DigestFunction>(nullptr);
  }

  DigestFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigestFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigestFunction& from);
  void MergeFrom(const DigestFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigestFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.DigestFunction";
  }
  protected:
  explicit DigestFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DigestFunction_Value Value;
  static constexpr Value UNKNOWN =
    DigestFunction_Value_UNKNOWN;
  static constexpr Value SHA256 =
    DigestFunction_Value_SHA256;
  static constexpr Value SHA1 =
    DigestFunction_Value_SHA1;
  static constexpr Value MD5 =
    DigestFunction_Value_MD5;
  static constexpr Value VSO =
    DigestFunction_Value_VSO;
  static constexpr Value SHA384 =
    DigestFunction_Value_SHA384;
  static constexpr Value SHA512 =
    DigestFunction_Value_SHA512;
  static constexpr Value MURMUR3 =
    DigestFunction_Value_MURMUR3;
  static inline bool Value_IsValid(int value) {
    return DigestFunction_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    DigestFunction_Value_Value_MIN;
  static constexpr Value Value_MAX =
    DigestFunction_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    DigestFunction_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return DigestFunction_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return DigestFunction_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return DigestFunction_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.DigestFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ActionCacheUpdateCapabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities) */ {
 public:
  inline ActionCacheUpdateCapabilities() : ActionCacheUpdateCapabilities(nullptr) {}
  virtual ~ActionCacheUpdateCapabilities();
  explicit constexpr ActionCacheUpdateCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionCacheUpdateCapabilities(const ActionCacheUpdateCapabilities& from);
  ActionCacheUpdateCapabilities(ActionCacheUpdateCapabilities&& from) noexcept
    : ActionCacheUpdateCapabilities() {
    *this = ::std::move(from);
  }

  inline ActionCacheUpdateCapabilities& operator=(const ActionCacheUpdateCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionCacheUpdateCapabilities& operator=(ActionCacheUpdateCapabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionCacheUpdateCapabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionCacheUpdateCapabilities* internal_default_instance() {
    return reinterpret_cast<const ActionCacheUpdateCapabilities*>(
               &_ActionCacheUpdateCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ActionCacheUpdateCapabilities& a, ActionCacheUpdateCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionCacheUpdateCapabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionCacheUpdateCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionCacheUpdateCapabilities* New() const final {
    return CreateMaybeMessage<ActionCacheUpdateCapabilities>(nullptr);
  }

  ActionCacheUpdateCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionCacheUpdateCapabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionCacheUpdateCapabilities& from);
  void MergeFrom(const ActionCacheUpdateCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionCacheUpdateCapabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities";
  }
  protected:
  explicit ActionCacheUpdateCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateEnabledFieldNumber = 1,
  };
  // bool update_enabled = 1;
  void clear_update_enabled();
  bool update_enabled() const;
  void set_update_enabled(bool value);
  private:
  bool _internal_update_enabled() const;
  void _internal_set_update_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool update_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class PriorityCapabilities_PriorityRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange) */ {
 public:
  inline PriorityCapabilities_PriorityRange() : PriorityCapabilities_PriorityRange(nullptr) {}
  virtual ~PriorityCapabilities_PriorityRange();
  explicit constexpr PriorityCapabilities_PriorityRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriorityCapabilities_PriorityRange(const PriorityCapabilities_PriorityRange& from);
  PriorityCapabilities_PriorityRange(PriorityCapabilities_PriorityRange&& from) noexcept
    : PriorityCapabilities_PriorityRange() {
    *this = ::std::move(from);
  }

  inline PriorityCapabilities_PriorityRange& operator=(const PriorityCapabilities_PriorityRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriorityCapabilities_PriorityRange& operator=(PriorityCapabilities_PriorityRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriorityCapabilities_PriorityRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriorityCapabilities_PriorityRange* internal_default_instance() {
    return reinterpret_cast<const PriorityCapabilities_PriorityRange*>(
               &_PriorityCapabilities_PriorityRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(PriorityCapabilities_PriorityRange& a, PriorityCapabilities_PriorityRange& b) {
    a.Swap(&b);
  }
  inline void Swap(PriorityCapabilities_PriorityRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriorityCapabilities_PriorityRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriorityCapabilities_PriorityRange* New() const final {
    return CreateMaybeMessage<PriorityCapabilities_PriorityRange>(nullptr);
  }

  PriorityCapabilities_PriorityRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriorityCapabilities_PriorityRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriorityCapabilities_PriorityRange& from);
  void MergeFrom(const PriorityCapabilities_PriorityRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriorityCapabilities_PriorityRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange";
  }
  protected:
  explicit PriorityCapabilities_PriorityRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinPriorityFieldNumber = 1,
    kMaxPriorityFieldNumber = 2,
  };
  // int32 min_priority = 1;
  void clear_min_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 min_priority() const;
  void set_min_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_priority() const;
  void _internal_set_min_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_priority = 2;
  void clear_max_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 max_priority() const;
  void set_max_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_priority() const;
  void _internal_set_max_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class PriorityCapabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.PriorityCapabilities) */ {
 public:
  inline PriorityCapabilities() : PriorityCapabilities(nullptr) {}
  virtual ~PriorityCapabilities();
  explicit constexpr PriorityCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriorityCapabilities(const PriorityCapabilities& from);
  PriorityCapabilities(PriorityCapabilities&& from) noexcept
    : PriorityCapabilities() {
    *this = ::std::move(from);
  }

  inline PriorityCapabilities& operator=(const PriorityCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriorityCapabilities& operator=(PriorityCapabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriorityCapabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriorityCapabilities* internal_default_instance() {
    return reinterpret_cast<const PriorityCapabilities*>(
               &_PriorityCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(PriorityCapabilities& a, PriorityCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(PriorityCapabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriorityCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriorityCapabilities* New() const final {
    return CreateMaybeMessage<PriorityCapabilities>(nullptr);
  }

  PriorityCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriorityCapabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriorityCapabilities& from);
  void MergeFrom(const PriorityCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriorityCapabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.PriorityCapabilities";
  }
  protected:
  explicit PriorityCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef PriorityCapabilities_PriorityRange PriorityRange;

  // accessors -------------------------------------------------------

  enum : int {
    kPrioritiesFieldNumber = 1,
  };
  // repeated .build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange priorities = 1;
  int priorities_size() const;
  private:
  int _internal_priorities_size() const;
  public:
  void clear_priorities();
  ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange* mutable_priorities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange >*
      mutable_priorities();
  private:
  const ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange& _internal_priorities(int index) const;
  ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange* _internal_add_priorities();
  public:
  const ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange& priorities(int index) const;
  ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange* add_priorities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange >&
      priorities() const;

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.PriorityCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange > priorities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class SymlinkAbsolutePathStrategy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.SymlinkAbsolutePathStrategy) */ {
 public:
  inline SymlinkAbsolutePathStrategy() : SymlinkAbsolutePathStrategy(nullptr) {}
  virtual ~SymlinkAbsolutePathStrategy();
  explicit constexpr SymlinkAbsolutePathStrategy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SymlinkAbsolutePathStrategy(const SymlinkAbsolutePathStrategy& from);
  SymlinkAbsolutePathStrategy(SymlinkAbsolutePathStrategy&& from) noexcept
    : SymlinkAbsolutePathStrategy() {
    *this = ::std::move(from);
  }

  inline SymlinkAbsolutePathStrategy& operator=(const SymlinkAbsolutePathStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymlinkAbsolutePathStrategy& operator=(SymlinkAbsolutePathStrategy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SymlinkAbsolutePathStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymlinkAbsolutePathStrategy* internal_default_instance() {
    return reinterpret_cast<const SymlinkAbsolutePathStrategy*>(
               &_SymlinkAbsolutePathStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SymlinkAbsolutePathStrategy& a, SymlinkAbsolutePathStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(SymlinkAbsolutePathStrategy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymlinkAbsolutePathStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SymlinkAbsolutePathStrategy* New() const final {
    return CreateMaybeMessage<SymlinkAbsolutePathStrategy>(nullptr);
  }

  SymlinkAbsolutePathStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SymlinkAbsolutePathStrategy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SymlinkAbsolutePathStrategy& from);
  void MergeFrom(const SymlinkAbsolutePathStrategy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymlinkAbsolutePathStrategy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.SymlinkAbsolutePathStrategy";
  }
  protected:
  explicit SymlinkAbsolutePathStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SymlinkAbsolutePathStrategy_Value Value;
  static constexpr Value UNKNOWN =
    SymlinkAbsolutePathStrategy_Value_UNKNOWN;
  static constexpr Value DISALLOWED =
    SymlinkAbsolutePathStrategy_Value_DISALLOWED;
  static constexpr Value ALLOWED =
    SymlinkAbsolutePathStrategy_Value_ALLOWED;
  static inline bool Value_IsValid(int value) {
    return SymlinkAbsolutePathStrategy_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    SymlinkAbsolutePathStrategy_Value_Value_MIN;
  static constexpr Value Value_MAX =
    SymlinkAbsolutePathStrategy_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    SymlinkAbsolutePathStrategy_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return SymlinkAbsolutePathStrategy_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return SymlinkAbsolutePathStrategy_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return SymlinkAbsolutePathStrategy_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.SymlinkAbsolutePathStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class CacheCapabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.CacheCapabilities) */ {
 public:
  inline CacheCapabilities() : CacheCapabilities(nullptr) {}
  virtual ~CacheCapabilities();
  explicit constexpr CacheCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheCapabilities(const CacheCapabilities& from);
  CacheCapabilities(CacheCapabilities&& from) noexcept
    : CacheCapabilities() {
    *this = ::std::move(from);
  }

  inline CacheCapabilities& operator=(const CacheCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheCapabilities& operator=(CacheCapabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheCapabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheCapabilities* internal_default_instance() {
    return reinterpret_cast<const CacheCapabilities*>(
               &_CacheCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CacheCapabilities& a, CacheCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheCapabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheCapabilities* New() const final {
    return CreateMaybeMessage<CacheCapabilities>(nullptr);
  }

  CacheCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheCapabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheCapabilities& from);
  void MergeFrom(const CacheCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheCapabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.CacheCapabilities";
  }
  protected:
  explicit CacheCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigestFunctionFieldNumber = 1,
    kActionCacheUpdateCapabilitiesFieldNumber = 2,
    kCachePriorityCapabilitiesFieldNumber = 3,
    kMaxBatchTotalSizeBytesFieldNumber = 4,
    kSymlinkAbsolutePathStrategyFieldNumber = 5,
  };
  // repeated .build.bazel.remote.execution.v2.DigestFunction.Value digest_function = 1;
  int digest_function_size() const;
  private:
  int _internal_digest_function_size() const;
  public:
  void clear_digest_function();
  private:
  ::build::bazel::remote::execution::v2::DigestFunction_Value _internal_digest_function(int index) const;
  void _internal_add_digest_function(::build::bazel::remote::execution::v2::DigestFunction_Value value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_digest_function();
  public:
  ::build::bazel::remote::execution::v2::DigestFunction_Value digest_function(int index) const;
  void set_digest_function(int index, ::build::bazel::remote::execution::v2::DigestFunction_Value value);
  void add_digest_function(::build::bazel::remote::execution::v2::DigestFunction_Value value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& digest_function() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_digest_function();

  // .build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities action_cache_update_capabilities = 2;
  bool has_action_cache_update_capabilities() const;
  private:
  bool _internal_has_action_cache_update_capabilities() const;
  public:
  void clear_action_cache_update_capabilities();
  const ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities& action_cache_update_capabilities() const;
  ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* release_action_cache_update_capabilities();
  ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* mutable_action_cache_update_capabilities();
  void set_allocated_action_cache_update_capabilities(::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* action_cache_update_capabilities);
  private:
  const ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities& _internal_action_cache_update_capabilities() const;
  ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* _internal_mutable_action_cache_update_capabilities();
  public:
  void unsafe_arena_set_allocated_action_cache_update_capabilities(
      ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* action_cache_update_capabilities);
  ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* unsafe_arena_release_action_cache_update_capabilities();

  // .build.bazel.remote.execution.v2.PriorityCapabilities cache_priority_capabilities = 3;
  bool has_cache_priority_capabilities() const;
  private:
  bool _internal_has_cache_priority_capabilities() const;
  public:
  void clear_cache_priority_capabilities();
  const ::build::bazel::remote::execution::v2::PriorityCapabilities& cache_priority_capabilities() const;
  ::build::bazel::remote::execution::v2::PriorityCapabilities* release_cache_priority_capabilities();
  ::build::bazel::remote::execution::v2::PriorityCapabilities* mutable_cache_priority_capabilities();
  void set_allocated_cache_priority_capabilities(::build::bazel::remote::execution::v2::PriorityCapabilities* cache_priority_capabilities);
  private:
  const ::build::bazel::remote::execution::v2::PriorityCapabilities& _internal_cache_priority_capabilities() const;
  ::build::bazel::remote::execution::v2::PriorityCapabilities* _internal_mutable_cache_priority_capabilities();
  public:
  void unsafe_arena_set_allocated_cache_priority_capabilities(
      ::build::bazel::remote::execution::v2::PriorityCapabilities* cache_priority_capabilities);
  ::build::bazel::remote::execution::v2::PriorityCapabilities* unsafe_arena_release_cache_priority_capabilities();

  // int64 max_batch_total_size_bytes = 4;
  void clear_max_batch_total_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 max_batch_total_size_bytes() const;
  void set_max_batch_total_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_batch_total_size_bytes() const;
  void _internal_set_max_batch_total_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .build.bazel.remote.execution.v2.SymlinkAbsolutePathStrategy.Value symlink_absolute_path_strategy = 5;
  void clear_symlink_absolute_path_strategy();
  ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value symlink_absolute_path_strategy() const;
  void set_symlink_absolute_path_strategy(::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value value);
  private:
  ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value _internal_symlink_absolute_path_strategy() const;
  void _internal_set_symlink_absolute_path_strategy(::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.CacheCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> digest_function_;
  mutable std::atomic<int> _digest_function_cached_byte_size_;
  ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* action_cache_update_capabilities_;
  ::build::bazel::remote::execution::v2::PriorityCapabilities* cache_priority_capabilities_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_batch_total_size_bytes_;
  int symlink_absolute_path_strategy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ExecutionCapabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ExecutionCapabilities) */ {
 public:
  inline ExecutionCapabilities() : ExecutionCapabilities(nullptr) {}
  virtual ~ExecutionCapabilities();
  explicit constexpr ExecutionCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionCapabilities(const ExecutionCapabilities& from);
  ExecutionCapabilities(ExecutionCapabilities&& from) noexcept
    : ExecutionCapabilities() {
    *this = ::std::move(from);
  }

  inline ExecutionCapabilities& operator=(const ExecutionCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionCapabilities& operator=(ExecutionCapabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecutionCapabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionCapabilities* internal_default_instance() {
    return reinterpret_cast<const ExecutionCapabilities*>(
               &_ExecutionCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ExecutionCapabilities& a, ExecutionCapabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionCapabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutionCapabilities* New() const final {
    return CreateMaybeMessage<ExecutionCapabilities>(nullptr);
  }

  ExecutionCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionCapabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecutionCapabilities& from);
  void MergeFrom(const ExecutionCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionCapabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ExecutionCapabilities";
  }
  protected:
  explicit ExecutionCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedNodePropertiesFieldNumber = 4,
    kExecutionPriorityCapabilitiesFieldNumber = 3,
    kDigestFunctionFieldNumber = 1,
    kExecEnabledFieldNumber = 2,
  };
  // repeated string supported_node_properties = 4;
  int supported_node_properties_size() const;
  private:
  int _internal_supported_node_properties_size() const;
  public:
  void clear_supported_node_properties();
  const std::string& supported_node_properties(int index) const;
  std::string* mutable_supported_node_properties(int index);
  void set_supported_node_properties(int index, const std::string& value);
  void set_supported_node_properties(int index, std::string&& value);
  void set_supported_node_properties(int index, const char* value);
  void set_supported_node_properties(int index, const char* value, size_t size);
  std::string* add_supported_node_properties();
  void add_supported_node_properties(const std::string& value);
  void add_supported_node_properties(std::string&& value);
  void add_supported_node_properties(const char* value);
  void add_supported_node_properties(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& supported_node_properties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_supported_node_properties();
  private:
  const std::string& _internal_supported_node_properties(int index) const;
  std::string* _internal_add_supported_node_properties();
  public:

  // .build.bazel.remote.execution.v2.PriorityCapabilities execution_priority_capabilities = 3;
  bool has_execution_priority_capabilities() const;
  private:
  bool _internal_has_execution_priority_capabilities() const;
  public:
  void clear_execution_priority_capabilities();
  const ::build::bazel::remote::execution::v2::PriorityCapabilities& execution_priority_capabilities() const;
  ::build::bazel::remote::execution::v2::PriorityCapabilities* release_execution_priority_capabilities();
  ::build::bazel::remote::execution::v2::PriorityCapabilities* mutable_execution_priority_capabilities();
  void set_allocated_execution_priority_capabilities(::build::bazel::remote::execution::v2::PriorityCapabilities* execution_priority_capabilities);
  private:
  const ::build::bazel::remote::execution::v2::PriorityCapabilities& _internal_execution_priority_capabilities() const;
  ::build::bazel::remote::execution::v2::PriorityCapabilities* _internal_mutable_execution_priority_capabilities();
  public:
  void unsafe_arena_set_allocated_execution_priority_capabilities(
      ::build::bazel::remote::execution::v2::PriorityCapabilities* execution_priority_capabilities);
  ::build::bazel::remote::execution::v2::PriorityCapabilities* unsafe_arena_release_execution_priority_capabilities();

  // .build.bazel.remote.execution.v2.DigestFunction.Value digest_function = 1;
  void clear_digest_function();
  ::build::bazel::remote::execution::v2::DigestFunction_Value digest_function() const;
  void set_digest_function(::build::bazel::remote::execution::v2::DigestFunction_Value value);
  private:
  ::build::bazel::remote::execution::v2::DigestFunction_Value _internal_digest_function() const;
  void _internal_set_digest_function(::build::bazel::remote::execution::v2::DigestFunction_Value value);
  public:

  // bool exec_enabled = 2;
  void clear_exec_enabled();
  bool exec_enabled() const;
  void set_exec_enabled(bool value);
  private:
  bool _internal_exec_enabled() const;
  void _internal_set_exec_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ExecutionCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> supported_node_properties_;
  ::build::bazel::remote::execution::v2::PriorityCapabilities* execution_priority_capabilities_;
  int digest_function_;
  bool exec_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class ToolDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.ToolDetails) */ {
 public:
  inline ToolDetails() : ToolDetails(nullptr) {}
  virtual ~ToolDetails();
  explicit constexpr ToolDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ToolDetails(const ToolDetails& from);
  ToolDetails(ToolDetails&& from) noexcept
    : ToolDetails() {
    *this = ::std::move(from);
  }

  inline ToolDetails& operator=(const ToolDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolDetails& operator=(ToolDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToolDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolDetails* internal_default_instance() {
    return reinterpret_cast<const ToolDetails*>(
               &_ToolDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ToolDetails& a, ToolDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToolDetails* New() const final {
    return CreateMaybeMessage<ToolDetails>(nullptr);
  }

  ToolDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToolDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToolDetails& from);
  void MergeFrom(const ToolDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.ToolDetails";
  }
  protected:
  explicit ToolDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToolNameFieldNumber = 1,
    kToolVersionFieldNumber = 2,
  };
  // string tool_name = 1;
  void clear_tool_name();
  const std::string& tool_name() const;
  void set_tool_name(const std::string& value);
  void set_tool_name(std::string&& value);
  void set_tool_name(const char* value);
  void set_tool_name(const char* value, size_t size);
  std::string* mutable_tool_name();
  std::string* release_tool_name();
  void set_allocated_tool_name(std::string* tool_name);
  private:
  const std::string& _internal_tool_name() const;
  void _internal_set_tool_name(const std::string& value);
  std::string* _internal_mutable_tool_name();
  public:

  // string tool_version = 2;
  void clear_tool_version();
  const std::string& tool_version() const;
  void set_tool_version(const std::string& value);
  void set_tool_version(std::string&& value);
  void set_tool_version(const char* value);
  void set_tool_version(const char* value, size_t size);
  std::string* mutable_tool_version();
  std::string* release_tool_version();
  void set_allocated_tool_version(std::string* tool_version);
  private:
  const std::string& _internal_tool_version() const;
  void _internal_set_tool_version(const std::string& value);
  std::string* _internal_mutable_tool_version();
  public:

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.ToolDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tool_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tool_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class RequestMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:build.bazel.remote.execution.v2.RequestMetadata) */ {
 public:
  inline RequestMetadata() : RequestMetadata(nullptr) {}
  virtual ~RequestMetadata();
  explicit constexpr RequestMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMetadata(const RequestMetadata& from);
  RequestMetadata(RequestMetadata&& from) noexcept
    : RequestMetadata() {
    *this = ::std::move(from);
  }

  inline RequestMetadata& operator=(const RequestMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMetadata& operator=(RequestMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMetadata* internal_default_instance() {
    return reinterpret_cast<const RequestMetadata*>(
               &_RequestMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(RequestMetadata& a, RequestMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestMetadata* New() const final {
    return CreateMaybeMessage<RequestMetadata>(nullptr);
  }

  RequestMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestMetadata& from);
  void MergeFrom(const RequestMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "build.bazel.remote.execution.v2.RequestMetadata";
  }
  protected:
  explicit RequestMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 2,
    kToolInvocationIdFieldNumber = 3,
    kCorrelatedInvocationsIdFieldNumber = 4,
    kToolDetailsFieldNumber = 1,
  };
  // string action_id = 2;
  void clear_action_id();
  const std::string& action_id() const;
  void set_action_id(const std::string& value);
  void set_action_id(std::string&& value);
  void set_action_id(const char* value);
  void set_action_id(const char* value, size_t size);
  std::string* mutable_action_id();
  std::string* release_action_id();
  void set_allocated_action_id(std::string* action_id);
  private:
  const std::string& _internal_action_id() const;
  void _internal_set_action_id(const std::string& value);
  std::string* _internal_mutable_action_id();
  public:

  // string tool_invocation_id = 3;
  void clear_tool_invocation_id();
  const std::string& tool_invocation_id() const;
  void set_tool_invocation_id(const std::string& value);
  void set_tool_invocation_id(std::string&& value);
  void set_tool_invocation_id(const char* value);
  void set_tool_invocation_id(const char* value, size_t size);
  std::string* mutable_tool_invocation_id();
  std::string* release_tool_invocation_id();
  void set_allocated_tool_invocation_id(std::string* tool_invocation_id);
  private:
  const std::string& _internal_tool_invocation_id() const;
  void _internal_set_tool_invocation_id(const std::string& value);
  std::string* _internal_mutable_tool_invocation_id();
  public:

  // string correlated_invocations_id = 4;
  void clear_correlated_invocations_id();
  const std::string& correlated_invocations_id() const;
  void set_correlated_invocations_id(const std::string& value);
  void set_correlated_invocations_id(std::string&& value);
  void set_correlated_invocations_id(const char* value);
  void set_correlated_invocations_id(const char* value, size_t size);
  std::string* mutable_correlated_invocations_id();
  std::string* release_correlated_invocations_id();
  void set_allocated_correlated_invocations_id(std::string* correlated_invocations_id);
  private:
  const std::string& _internal_correlated_invocations_id() const;
  void _internal_set_correlated_invocations_id(const std::string& value);
  std::string* _internal_mutable_correlated_invocations_id();
  public:

  // .build.bazel.remote.execution.v2.ToolDetails tool_details = 1;
  bool has_tool_details() const;
  private:
  bool _internal_has_tool_details() const;
  public:
  void clear_tool_details();
  const ::build::bazel::remote::execution::v2::ToolDetails& tool_details() const;
  ::build::bazel::remote::execution::v2::ToolDetails* release_tool_details();
  ::build::bazel::remote::execution::v2::ToolDetails* mutable_tool_details();
  void set_allocated_tool_details(::build::bazel::remote::execution::v2::ToolDetails* tool_details);
  private:
  const ::build::bazel::remote::execution::v2::ToolDetails& _internal_tool_details() const;
  ::build::bazel::remote::execution::v2::ToolDetails* _internal_mutable_tool_details();
  public:
  void unsafe_arena_set_allocated_tool_details(
      ::build::bazel::remote::execution::v2::ToolDetails* tool_details);
  ::build::bazel::remote::execution::v2::ToolDetails* unsafe_arena_release_tool_details();

  // @@protoc_insertion_point(class_scope:build.bazel.remote.execution.v2.RequestMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tool_invocation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlated_invocations_id_;
  ::build::bazel::remote::execution::v2::ToolDetails* tool_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Action

// .build.bazel.remote.execution.v2.Digest command_digest = 1;
inline bool Action::_internal_has_command_digest() const {
  return this != internal_default_instance() && command_digest_ != nullptr;
}
inline bool Action::has_command_digest() const {
  return _internal_has_command_digest();
}
inline void Action::clear_command_digest() {
  if (GetArena() == nullptr && command_digest_ != nullptr) {
    delete command_digest_;
  }
  command_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& Action::_internal_command_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = command_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& Action::command_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Action.command_digest)
  return _internal_command_digest();
}
inline void Action::unsafe_arena_set_allocated_command_digest(
    ::build::bazel::remote::execution::v2::Digest* command_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_digest_);
  }
  command_digest_ = command_digest;
  if (command_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.Action.command_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* Action::release_command_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = command_digest_;
  command_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* Action::unsafe_arena_release_command_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Action.command_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = command_digest_;
  command_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* Action::_internal_mutable_command_digest() {
  
  if (command_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    command_digest_ = p;
  }
  return command_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* Action::mutable_command_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Action.command_digest)
  return _internal_mutable_command_digest();
}
inline void Action::set_allocated_command_digest(::build::bazel::remote::execution::v2::Digest* command_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete command_digest_;
  }
  if (command_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(command_digest);
    if (message_arena != submessage_arena) {
      command_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_digest, submessage_arena);
    }
    
  } else {
    
  }
  command_digest_ = command_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Action.command_digest)
}

// .build.bazel.remote.execution.v2.Digest input_root_digest = 2;
inline bool Action::_internal_has_input_root_digest() const {
  return this != internal_default_instance() && input_root_digest_ != nullptr;
}
inline bool Action::has_input_root_digest() const {
  return _internal_has_input_root_digest();
}
inline void Action::clear_input_root_digest() {
  if (GetArena() == nullptr && input_root_digest_ != nullptr) {
    delete input_root_digest_;
  }
  input_root_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& Action::_internal_input_root_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = input_root_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& Action::input_root_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Action.input_root_digest)
  return _internal_input_root_digest();
}
inline void Action::unsafe_arena_set_allocated_input_root_digest(
    ::build::bazel::remote::execution::v2::Digest* input_root_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_root_digest_);
  }
  input_root_digest_ = input_root_digest;
  if (input_root_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.Action.input_root_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* Action::release_input_root_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = input_root_digest_;
  input_root_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* Action::unsafe_arena_release_input_root_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Action.input_root_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = input_root_digest_;
  input_root_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* Action::_internal_mutable_input_root_digest() {
  
  if (input_root_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    input_root_digest_ = p;
  }
  return input_root_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* Action::mutable_input_root_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Action.input_root_digest)
  return _internal_mutable_input_root_digest();
}
inline void Action::set_allocated_input_root_digest(::build::bazel::remote::execution::v2::Digest* input_root_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete input_root_digest_;
  }
  if (input_root_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(input_root_digest);
    if (message_arena != submessage_arena) {
      input_root_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_root_digest, submessage_arena);
    }
    
  } else {
    
  }
  input_root_digest_ = input_root_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Action.input_root_digest)
}

// .google.protobuf.Duration timeout = 6;
inline bool Action::_internal_has_timeout() const {
  return this != internal_default_instance() && timeout_ != nullptr;
}
inline bool Action::has_timeout() const {
  return _internal_has_timeout();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Action::_internal_timeout() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = timeout_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Action::timeout() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Action.timeout)
  return _internal_timeout();
}
inline void Action::unsafe_arena_set_allocated_timeout(
    PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.Action.timeout)
}
inline PROTOBUF_NAMESPACE_ID::Duration* Action::release_timeout() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Action::unsafe_arena_release_timeout() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Action.timeout)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Action::_internal_mutable_timeout() {
  
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    timeout_ = p;
  }
  return timeout_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Action::mutable_timeout() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Action.timeout)
  return _internal_mutable_timeout();
}
inline void Action::set_allocated_timeout(PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Action.timeout)
}

// bool do_not_cache = 7;
inline void Action::clear_do_not_cache() {
  do_not_cache_ = false;
}
inline bool Action::_internal_do_not_cache() const {
  return do_not_cache_;
}
inline bool Action::do_not_cache() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Action.do_not_cache)
  return _internal_do_not_cache();
}
inline void Action::_internal_set_do_not_cache(bool value) {
  
  do_not_cache_ = value;
}
inline void Action::set_do_not_cache(bool value) {
  _internal_set_do_not_cache(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Action.do_not_cache)
}

// bytes salt = 9;
inline void Action::clear_salt() {
  salt_.ClearToEmpty();
}
inline const std::string& Action::salt() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Action.salt)
  return _internal_salt();
}
inline void Action::set_salt(const std::string& value) {
  _internal_set_salt(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Action.salt)
}
inline std::string* Action::mutable_salt() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Action.salt)
  return _internal_mutable_salt();
}
inline const std::string& Action::_internal_salt() const {
  return salt_.Get();
}
inline void Action::_internal_set_salt(const std::string& value) {
  
  salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Action::set_salt(std::string&& value) {
  
  salt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.Action.salt)
}
inline void Action::set_salt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Action.salt)
}
inline void Action::set_salt(const void* value,
    size_t size) {
  
  salt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Action.salt)
}
inline std::string* Action::_internal_mutable_salt() {
  
  return salt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Action::release_salt() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Action.salt)
  return salt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_salt(std::string* salt) {
  if (salt != nullptr) {
    
  } else {
    
  }
  salt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Action.salt)
}

// .build.bazel.remote.execution.v2.Platform platform = 10;
inline bool Action::_internal_has_platform() const {
  return this != internal_default_instance() && platform_ != nullptr;
}
inline bool Action::has_platform() const {
  return _internal_has_platform();
}
inline void Action::clear_platform() {
  if (GetArena() == nullptr && platform_ != nullptr) {
    delete platform_;
  }
  platform_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Platform& Action::_internal_platform() const {
  const ::build::bazel::remote::execution::v2::Platform* p = platform_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Platform&>(
      ::build::bazel::remote::execution::v2::_Platform_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Platform& Action::platform() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Action.platform)
  return _internal_platform();
}
inline void Action::unsafe_arena_set_allocated_platform(
    ::build::bazel::remote::execution::v2::Platform* platform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(platform_);
  }
  platform_ = platform;
  if (platform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.Action.platform)
}
inline ::build::bazel::remote::execution::v2::Platform* Action::release_platform() {
  
  ::build::bazel::remote::execution::v2::Platform* temp = platform_;
  platform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Platform* Action::unsafe_arena_release_platform() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Action.platform)
  
  ::build::bazel::remote::execution::v2::Platform* temp = platform_;
  platform_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Platform* Action::_internal_mutable_platform() {
  
  if (platform_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Platform>(GetArena());
    platform_ = p;
  }
  return platform_;
}
inline ::build::bazel::remote::execution::v2::Platform* Action::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Action.platform)
  return _internal_mutable_platform();
}
inline void Action::set_allocated_platform(::build::bazel::remote::execution::v2::Platform* platform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete platform_;
  }
  if (platform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(platform);
    if (message_arena != submessage_arena) {
      platform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, platform, submessage_arena);
    }
    
  } else {
    
  }
  platform_ = platform;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Action.platform)
}

// -------------------------------------------------------------------

// Command_EnvironmentVariable

// string name = 1;
inline void Command_EnvironmentVariable::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Command_EnvironmentVariable::name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.EnvironmentVariable.name)
  return _internal_name();
}
inline void Command_EnvironmentVariable::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.EnvironmentVariable.name)
}
inline std::string* Command_EnvironmentVariable::mutable_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.EnvironmentVariable.name)
  return _internal_mutable_name();
}
inline const std::string& Command_EnvironmentVariable::_internal_name() const {
  return name_.Get();
}
inline void Command_EnvironmentVariable::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Command_EnvironmentVariable::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.Command.EnvironmentVariable.name)
}
inline void Command_EnvironmentVariable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Command.EnvironmentVariable.name)
}
inline void Command_EnvironmentVariable::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Command.EnvironmentVariable.name)
}
inline std::string* Command_EnvironmentVariable::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Command_EnvironmentVariable::release_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Command.EnvironmentVariable.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command_EnvironmentVariable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Command.EnvironmentVariable.name)
}

// string value = 2;
inline void Command_EnvironmentVariable::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Command_EnvironmentVariable::value() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.EnvironmentVariable.value)
  return _internal_value();
}
inline void Command_EnvironmentVariable::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.EnvironmentVariable.value)
}
inline std::string* Command_EnvironmentVariable::mutable_value() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.EnvironmentVariable.value)
  return _internal_mutable_value();
}
inline const std::string& Command_EnvironmentVariable::_internal_value() const {
  return value_.Get();
}
inline void Command_EnvironmentVariable::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Command_EnvironmentVariable::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.Command.EnvironmentVariable.value)
}
inline void Command_EnvironmentVariable::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Command.EnvironmentVariable.value)
}
inline void Command_EnvironmentVariable::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Command.EnvironmentVariable.value)
}
inline std::string* Command_EnvironmentVariable::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Command_EnvironmentVariable::release_value() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Command.EnvironmentVariable.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command_EnvironmentVariable::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Command.EnvironmentVariable.value)
}

// -------------------------------------------------------------------

// Command

// repeated string arguments = 1;
inline int Command::_internal_arguments_size() const {
  return arguments_.size();
}
inline int Command::arguments_size() const {
  return _internal_arguments_size();
}
inline void Command::clear_arguments() {
  arguments_.Clear();
}
inline std::string* Command::add_arguments() {
  // @@protoc_insertion_point(field_add_mutable:build.bazel.remote.execution.v2.Command.arguments)
  return _internal_add_arguments();
}
inline const std::string& Command::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const std::string& Command::arguments(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.arguments)
  return _internal_arguments(index);
}
inline std::string* Command::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.arguments)
  return arguments_.Mutable(index);
}
inline void Command::set_arguments(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.arguments)
  arguments_.Mutable(index)->assign(value);
}
inline void Command::set_arguments(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.arguments)
  arguments_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_arguments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Command.arguments)
}
inline void Command::set_arguments(int index, const char* value, size_t size) {
  arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Command.arguments)
}
inline std::string* Command::_internal_add_arguments() {
  return arguments_.Add();
}
inline void Command::add_arguments(const std::string& value) {
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.arguments)
}
inline void Command::add_arguments(std::string&& value) {
  arguments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.arguments)
}
inline void Command::add_arguments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:build.bazel.remote.execution.v2.Command.arguments)
}
inline void Command::add_arguments(const char* value, size_t size) {
  arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:build.bazel.remote.execution.v2.Command.arguments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::arguments() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Command.arguments)
  return arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Command.arguments)
  return &arguments_;
}

// repeated .build.bazel.remote.execution.v2.Command.EnvironmentVariable environment_variables = 2;
inline int Command::_internal_environment_variables_size() const {
  return environment_variables_.size();
}
inline int Command::environment_variables_size() const {
  return _internal_environment_variables_size();
}
inline void Command::clear_environment_variables() {
  environment_variables_.Clear();
}
inline ::build::bazel::remote::execution::v2::Command_EnvironmentVariable* Command::mutable_environment_variables(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.environment_variables)
  return environment_variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Command_EnvironmentVariable >*
Command::mutable_environment_variables() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Command.environment_variables)
  return &environment_variables_;
}
inline const ::build::bazel::remote::execution::v2::Command_EnvironmentVariable& Command::_internal_environment_variables(int index) const {
  return environment_variables_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::Command_EnvironmentVariable& Command::environment_variables(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.environment_variables)
  return _internal_environment_variables(index);
}
inline ::build::bazel::remote::execution::v2::Command_EnvironmentVariable* Command::_internal_add_environment_variables() {
  return environment_variables_.Add();
}
inline ::build::bazel::remote::execution::v2::Command_EnvironmentVariable* Command::add_environment_variables() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.environment_variables)
  return _internal_add_environment_variables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Command_EnvironmentVariable >&
Command::environment_variables() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Command.environment_variables)
  return environment_variables_;
}

// repeated string output_files = 3;
inline int Command::_internal_output_files_size() const {
  return output_files_.size();
}
inline int Command::output_files_size() const {
  return _internal_output_files_size();
}
inline void Command::clear_output_files() {
  output_files_.Clear();
}
inline std::string* Command::add_output_files() {
  // @@protoc_insertion_point(field_add_mutable:build.bazel.remote.execution.v2.Command.output_files)
  return _internal_add_output_files();
}
inline const std::string& Command::_internal_output_files(int index) const {
  return output_files_.Get(index);
}
inline const std::string& Command::output_files(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.output_files)
  return _internal_output_files(index);
}
inline std::string* Command::mutable_output_files(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.output_files)
  return output_files_.Mutable(index);
}
inline void Command::set_output_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.output_files)
  output_files_.Mutable(index)->assign(value);
}
inline void Command::set_output_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.output_files)
  output_files_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_output_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Command.output_files)
}
inline void Command::set_output_files(int index, const char* value, size_t size) {
  output_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Command.output_files)
}
inline std::string* Command::_internal_add_output_files() {
  return output_files_.Add();
}
inline void Command::add_output_files(const std::string& value) {
  output_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.output_files)
}
inline void Command::add_output_files(std::string&& value) {
  output_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.output_files)
}
inline void Command::add_output_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:build.bazel.remote.execution.v2.Command.output_files)
}
inline void Command::add_output_files(const char* value, size_t size) {
  output_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:build.bazel.remote.execution.v2.Command.output_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::output_files() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Command.output_files)
  return output_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_output_files() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Command.output_files)
  return &output_files_;
}

// repeated string output_directories = 4;
inline int Command::_internal_output_directories_size() const {
  return output_directories_.size();
}
inline int Command::output_directories_size() const {
  return _internal_output_directories_size();
}
inline void Command::clear_output_directories() {
  output_directories_.Clear();
}
inline std::string* Command::add_output_directories() {
  // @@protoc_insertion_point(field_add_mutable:build.bazel.remote.execution.v2.Command.output_directories)
  return _internal_add_output_directories();
}
inline const std::string& Command::_internal_output_directories(int index) const {
  return output_directories_.Get(index);
}
inline const std::string& Command::output_directories(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.output_directories)
  return _internal_output_directories(index);
}
inline std::string* Command::mutable_output_directories(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.output_directories)
  return output_directories_.Mutable(index);
}
inline void Command::set_output_directories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.output_directories)
  output_directories_.Mutable(index)->assign(value);
}
inline void Command::set_output_directories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.output_directories)
  output_directories_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_output_directories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_directories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Command.output_directories)
}
inline void Command::set_output_directories(int index, const char* value, size_t size) {
  output_directories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Command.output_directories)
}
inline std::string* Command::_internal_add_output_directories() {
  return output_directories_.Add();
}
inline void Command::add_output_directories(const std::string& value) {
  output_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.output_directories)
}
inline void Command::add_output_directories(std::string&& value) {
  output_directories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.output_directories)
}
inline void Command::add_output_directories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_directories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:build.bazel.remote.execution.v2.Command.output_directories)
}
inline void Command::add_output_directories(const char* value, size_t size) {
  output_directories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:build.bazel.remote.execution.v2.Command.output_directories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::output_directories() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Command.output_directories)
  return output_directories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_output_directories() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Command.output_directories)
  return &output_directories_;
}

// repeated string output_paths = 7;
inline int Command::_internal_output_paths_size() const {
  return output_paths_.size();
}
inline int Command::output_paths_size() const {
  return _internal_output_paths_size();
}
inline void Command::clear_output_paths() {
  output_paths_.Clear();
}
inline std::string* Command::add_output_paths() {
  // @@protoc_insertion_point(field_add_mutable:build.bazel.remote.execution.v2.Command.output_paths)
  return _internal_add_output_paths();
}
inline const std::string& Command::_internal_output_paths(int index) const {
  return output_paths_.Get(index);
}
inline const std::string& Command::output_paths(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.output_paths)
  return _internal_output_paths(index);
}
inline std::string* Command::mutable_output_paths(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.output_paths)
  return output_paths_.Mutable(index);
}
inline void Command::set_output_paths(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.output_paths)
  output_paths_.Mutable(index)->assign(value);
}
inline void Command::set_output_paths(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.output_paths)
  output_paths_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_output_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Command.output_paths)
}
inline void Command::set_output_paths(int index, const char* value, size_t size) {
  output_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Command.output_paths)
}
inline std::string* Command::_internal_add_output_paths() {
  return output_paths_.Add();
}
inline void Command::add_output_paths(const std::string& value) {
  output_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.output_paths)
}
inline void Command::add_output_paths(std::string&& value) {
  output_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.output_paths)
}
inline void Command::add_output_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:build.bazel.remote.execution.v2.Command.output_paths)
}
inline void Command::add_output_paths(const char* value, size_t size) {
  output_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:build.bazel.remote.execution.v2.Command.output_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::output_paths() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Command.output_paths)
  return output_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_output_paths() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Command.output_paths)
  return &output_paths_;
}

// .build.bazel.remote.execution.v2.Platform platform = 5;
inline bool Command::_internal_has_platform() const {
  return this != internal_default_instance() && platform_ != nullptr;
}
inline bool Command::has_platform() const {
  return _internal_has_platform();
}
inline void Command::clear_platform() {
  if (GetArena() == nullptr && platform_ != nullptr) {
    delete platform_;
  }
  platform_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Platform& Command::_internal_platform() const {
  const ::build::bazel::remote::execution::v2::Platform* p = platform_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Platform&>(
      ::build::bazel::remote::execution::v2::_Platform_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Platform& Command::platform() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.platform)
  return _internal_platform();
}
inline void Command::unsafe_arena_set_allocated_platform(
    ::build::bazel::remote::execution::v2::Platform* platform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(platform_);
  }
  platform_ = platform;
  if (platform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.Command.platform)
}
inline ::build::bazel::remote::execution::v2::Platform* Command::release_platform() {
  
  ::build::bazel::remote::execution::v2::Platform* temp = platform_;
  platform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Platform* Command::unsafe_arena_release_platform() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Command.platform)
  
  ::build::bazel::remote::execution::v2::Platform* temp = platform_;
  platform_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Platform* Command::_internal_mutable_platform() {
  
  if (platform_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Platform>(GetArena());
    platform_ = p;
  }
  return platform_;
}
inline ::build::bazel::remote::execution::v2::Platform* Command::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.platform)
  return _internal_mutable_platform();
}
inline void Command::set_allocated_platform(::build::bazel::remote::execution::v2::Platform* platform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete platform_;
  }
  if (platform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(platform);
    if (message_arena != submessage_arena) {
      platform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, platform, submessage_arena);
    }
    
  } else {
    
  }
  platform_ = platform;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Command.platform)
}

// string working_directory = 6;
inline void Command::clear_working_directory() {
  working_directory_.ClearToEmpty();
}
inline const std::string& Command::working_directory() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.working_directory)
  return _internal_working_directory();
}
inline void Command::set_working_directory(const std::string& value) {
  _internal_set_working_directory(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.working_directory)
}
inline std::string* Command::mutable_working_directory() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.working_directory)
  return _internal_mutable_working_directory();
}
inline const std::string& Command::_internal_working_directory() const {
  return working_directory_.Get();
}
inline void Command::_internal_set_working_directory(const std::string& value) {
  
  working_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Command::set_working_directory(std::string&& value) {
  
  working_directory_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.Command.working_directory)
}
inline void Command::set_working_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  working_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Command.working_directory)
}
inline void Command::set_working_directory(const char* value,
    size_t size) {
  
  working_directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Command.working_directory)
}
inline std::string* Command::_internal_mutable_working_directory() {
  
  return working_directory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Command::release_working_directory() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Command.working_directory)
  return working_directory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command::set_allocated_working_directory(std::string* working_directory) {
  if (working_directory != nullptr) {
    
  } else {
    
  }
  working_directory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), working_directory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Command.working_directory)
}

// repeated string output_node_properties = 8;
inline int Command::_internal_output_node_properties_size() const {
  return output_node_properties_.size();
}
inline int Command::output_node_properties_size() const {
  return _internal_output_node_properties_size();
}
inline void Command::clear_output_node_properties() {
  output_node_properties_.Clear();
}
inline std::string* Command::add_output_node_properties() {
  // @@protoc_insertion_point(field_add_mutable:build.bazel.remote.execution.v2.Command.output_node_properties)
  return _internal_add_output_node_properties();
}
inline const std::string& Command::_internal_output_node_properties(int index) const {
  return output_node_properties_.Get(index);
}
inline const std::string& Command::output_node_properties(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Command.output_node_properties)
  return _internal_output_node_properties(index);
}
inline std::string* Command::mutable_output_node_properties(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Command.output_node_properties)
  return output_node_properties_.Mutable(index);
}
inline void Command::set_output_node_properties(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.output_node_properties)
  output_node_properties_.Mutable(index)->assign(value);
}
inline void Command::set_output_node_properties(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Command.output_node_properties)
  output_node_properties_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_output_node_properties(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_node_properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Command.output_node_properties)
}
inline void Command::set_output_node_properties(int index, const char* value, size_t size) {
  output_node_properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Command.output_node_properties)
}
inline std::string* Command::_internal_add_output_node_properties() {
  return output_node_properties_.Add();
}
inline void Command::add_output_node_properties(const std::string& value) {
  output_node_properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.output_node_properties)
}
inline void Command::add_output_node_properties(std::string&& value) {
  output_node_properties_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Command.output_node_properties)
}
inline void Command::add_output_node_properties(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_node_properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:build.bazel.remote.execution.v2.Command.output_node_properties)
}
inline void Command::add_output_node_properties(const char* value, size_t size) {
  output_node_properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:build.bazel.remote.execution.v2.Command.output_node_properties)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::output_node_properties() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Command.output_node_properties)
  return output_node_properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_output_node_properties() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Command.output_node_properties)
  return &output_node_properties_;
}

// -------------------------------------------------------------------

// Platform_Property

// string name = 1;
inline void Platform_Property::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Platform_Property::name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Platform.Property.name)
  return _internal_name();
}
inline void Platform_Property::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Platform.Property.name)
}
inline std::string* Platform_Property::mutable_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Platform.Property.name)
  return _internal_mutable_name();
}
inline const std::string& Platform_Property::_internal_name() const {
  return name_.Get();
}
inline void Platform_Property::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Platform_Property::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.Platform.Property.name)
}
inline void Platform_Property::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Platform.Property.name)
}
inline void Platform_Property::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Platform.Property.name)
}
inline std::string* Platform_Property::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Platform_Property::release_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Platform.Property.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Platform_Property::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Platform.Property.name)
}

// string value = 2;
inline void Platform_Property::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Platform_Property::value() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Platform.Property.value)
  return _internal_value();
}
inline void Platform_Property::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Platform.Property.value)
}
inline std::string* Platform_Property::mutable_value() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Platform.Property.value)
  return _internal_mutable_value();
}
inline const std::string& Platform_Property::_internal_value() const {
  return value_.Get();
}
inline void Platform_Property::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Platform_Property::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.Platform.Property.value)
}
inline void Platform_Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Platform.Property.value)
}
inline void Platform_Property::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Platform.Property.value)
}
inline std::string* Platform_Property::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Platform_Property::release_value() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Platform.Property.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Platform_Property::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Platform.Property.value)
}

// -------------------------------------------------------------------

// Platform

// repeated .build.bazel.remote.execution.v2.Platform.Property properties = 1;
inline int Platform::_internal_properties_size() const {
  return properties_.size();
}
inline int Platform::properties_size() const {
  return _internal_properties_size();
}
inline void Platform::clear_properties() {
  properties_.Clear();
}
inline ::build::bazel::remote::execution::v2::Platform_Property* Platform::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Platform.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Platform_Property >*
Platform::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Platform.properties)
  return &properties_;
}
inline const ::build::bazel::remote::execution::v2::Platform_Property& Platform::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::Platform_Property& Platform::properties(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Platform.properties)
  return _internal_properties(index);
}
inline ::build::bazel::remote::execution::v2::Platform_Property* Platform::_internal_add_properties() {
  return properties_.Add();
}
inline ::build::bazel::remote::execution::v2::Platform_Property* Platform::add_properties() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Platform.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Platform_Property >&
Platform::properties() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Platform.properties)
  return properties_;
}

// -------------------------------------------------------------------

// Directory

// repeated .build.bazel.remote.execution.v2.FileNode files = 1;
inline int Directory::_internal_files_size() const {
  return files_.size();
}
inline int Directory::files_size() const {
  return _internal_files_size();
}
inline void Directory::clear_files() {
  files_.Clear();
}
inline ::build::bazel::remote::execution::v2::FileNode* Directory::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Directory.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::FileNode >*
Directory::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Directory.files)
  return &files_;
}
inline const ::build::bazel::remote::execution::v2::FileNode& Directory::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::FileNode& Directory::files(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Directory.files)
  return _internal_files(index);
}
inline ::build::bazel::remote::execution::v2::FileNode* Directory::_internal_add_files() {
  return files_.Add();
}
inline ::build::bazel::remote::execution::v2::FileNode* Directory::add_files() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Directory.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::FileNode >&
Directory::files() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Directory.files)
  return files_;
}

// repeated .build.bazel.remote.execution.v2.DirectoryNode directories = 2;
inline int Directory::_internal_directories_size() const {
  return directories_.size();
}
inline int Directory::directories_size() const {
  return _internal_directories_size();
}
inline void Directory::clear_directories() {
  directories_.Clear();
}
inline ::build::bazel::remote::execution::v2::DirectoryNode* Directory::mutable_directories(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Directory.directories)
  return directories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::DirectoryNode >*
Directory::mutable_directories() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Directory.directories)
  return &directories_;
}
inline const ::build::bazel::remote::execution::v2::DirectoryNode& Directory::_internal_directories(int index) const {
  return directories_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::DirectoryNode& Directory::directories(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Directory.directories)
  return _internal_directories(index);
}
inline ::build::bazel::remote::execution::v2::DirectoryNode* Directory::_internal_add_directories() {
  return directories_.Add();
}
inline ::build::bazel::remote::execution::v2::DirectoryNode* Directory::add_directories() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Directory.directories)
  return _internal_add_directories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::DirectoryNode >&
Directory::directories() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Directory.directories)
  return directories_;
}

// repeated .build.bazel.remote.execution.v2.SymlinkNode symlinks = 3;
inline int Directory::_internal_symlinks_size() const {
  return symlinks_.size();
}
inline int Directory::symlinks_size() const {
  return _internal_symlinks_size();
}
inline void Directory::clear_symlinks() {
  symlinks_.Clear();
}
inline ::build::bazel::remote::execution::v2::SymlinkNode* Directory::mutable_symlinks(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Directory.symlinks)
  return symlinks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::SymlinkNode >*
Directory::mutable_symlinks() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Directory.symlinks)
  return &symlinks_;
}
inline const ::build::bazel::remote::execution::v2::SymlinkNode& Directory::_internal_symlinks(int index) const {
  return symlinks_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::SymlinkNode& Directory::symlinks(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Directory.symlinks)
  return _internal_symlinks(index);
}
inline ::build::bazel::remote::execution::v2::SymlinkNode* Directory::_internal_add_symlinks() {
  return symlinks_.Add();
}
inline ::build::bazel::remote::execution::v2::SymlinkNode* Directory::add_symlinks() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Directory.symlinks)
  return _internal_add_symlinks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::SymlinkNode >&
Directory::symlinks() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Directory.symlinks)
  return symlinks_;
}

// .build.bazel.remote.execution.v2.NodeProperties node_properties = 5;
inline bool Directory::_internal_has_node_properties() const {
  return this != internal_default_instance() && node_properties_ != nullptr;
}
inline bool Directory::has_node_properties() const {
  return _internal_has_node_properties();
}
inline void Directory::clear_node_properties() {
  if (GetArena() == nullptr && node_properties_ != nullptr) {
    delete node_properties_;
  }
  node_properties_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& Directory::_internal_node_properties() const {
  const ::build::bazel::remote::execution::v2::NodeProperties* p = node_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::NodeProperties&>(
      ::build::bazel::remote::execution::v2::_NodeProperties_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& Directory::node_properties() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Directory.node_properties)
  return _internal_node_properties();
}
inline void Directory::unsafe_arena_set_allocated_node_properties(
    ::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_properties_);
  }
  node_properties_ = node_properties;
  if (node_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.Directory.node_properties)
}
inline ::build::bazel::remote::execution::v2::NodeProperties* Directory::release_node_properties() {
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* Directory::unsafe_arena_release_node_properties() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Directory.node_properties)
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* Directory::_internal_mutable_node_properties() {
  
  if (node_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::NodeProperties>(GetArena());
    node_properties_ = p;
  }
  return node_properties_;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* Directory::mutable_node_properties() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Directory.node_properties)
  return _internal_mutable_node_properties();
}
inline void Directory::set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_properties_;
  }
  if (node_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node_properties);
    if (message_arena != submessage_arena) {
      node_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_properties, submessage_arena);
    }
    
  } else {
    
  }
  node_properties_ = node_properties;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Directory.node_properties)
}

// -------------------------------------------------------------------

// NodeProperty

// string name = 1;
inline void NodeProperty::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NodeProperty::name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.NodeProperty.name)
  return _internal_name();
}
inline void NodeProperty::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.NodeProperty.name)
}
inline std::string* NodeProperty::mutable_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.NodeProperty.name)
  return _internal_mutable_name();
}
inline const std::string& NodeProperty::_internal_name() const {
  return name_.Get();
}
inline void NodeProperty::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeProperty::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.NodeProperty.name)
}
inline void NodeProperty::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.NodeProperty.name)
}
inline void NodeProperty::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.NodeProperty.name)
}
inline std::string* NodeProperty::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeProperty::release_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.NodeProperty.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeProperty::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.NodeProperty.name)
}

// string value = 2;
inline void NodeProperty::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& NodeProperty::value() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.NodeProperty.value)
  return _internal_value();
}
inline void NodeProperty::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.NodeProperty.value)
}
inline std::string* NodeProperty::mutable_value() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.NodeProperty.value)
  return _internal_mutable_value();
}
inline const std::string& NodeProperty::_internal_value() const {
  return value_.Get();
}
inline void NodeProperty::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NodeProperty::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.NodeProperty.value)
}
inline void NodeProperty::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.NodeProperty.value)
}
inline void NodeProperty::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.NodeProperty.value)
}
inline std::string* NodeProperty::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NodeProperty::release_value() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.NodeProperty.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeProperty::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.NodeProperty.value)
}

// -------------------------------------------------------------------

// NodeProperties

// repeated .build.bazel.remote.execution.v2.NodeProperty properties = 1;
inline int NodeProperties::_internal_properties_size() const {
  return properties_.size();
}
inline int NodeProperties::properties_size() const {
  return _internal_properties_size();
}
inline void NodeProperties::clear_properties() {
  properties_.Clear();
}
inline ::build::bazel::remote::execution::v2::NodeProperty* NodeProperties::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.NodeProperties.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::NodeProperty >*
NodeProperties::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.NodeProperties.properties)
  return &properties_;
}
inline const ::build::bazel::remote::execution::v2::NodeProperty& NodeProperties::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::NodeProperty& NodeProperties::properties(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.NodeProperties.properties)
  return _internal_properties(index);
}
inline ::build::bazel::remote::execution::v2::NodeProperty* NodeProperties::_internal_add_properties() {
  return properties_.Add();
}
inline ::build::bazel::remote::execution::v2::NodeProperty* NodeProperties::add_properties() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.NodeProperties.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::NodeProperty >&
NodeProperties::properties() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.NodeProperties.properties)
  return properties_;
}

// .google.protobuf.Timestamp mtime = 2;
inline bool NodeProperties::_internal_has_mtime() const {
  return this != internal_default_instance() && mtime_ != nullptr;
}
inline bool NodeProperties::has_mtime() const {
  return _internal_has_mtime();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NodeProperties::_internal_mtime() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = mtime_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NodeProperties::mtime() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.NodeProperties.mtime)
  return _internal_mtime();
}
inline void NodeProperties::unsafe_arena_set_allocated_mtime(
    PROTOBUF_NAMESPACE_ID::Timestamp* mtime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtime_);
  }
  mtime_ = mtime;
  if (mtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.NodeProperties.mtime)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NodeProperties::release_mtime() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = mtime_;
  mtime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NodeProperties::unsafe_arena_release_mtime() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.NodeProperties.mtime)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = mtime_;
  mtime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NodeProperties::_internal_mutable_mtime() {
  
  if (mtime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    mtime_ = p;
  }
  return mtime_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NodeProperties::mutable_mtime() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.NodeProperties.mtime)
  return _internal_mutable_mtime();
}
inline void NodeProperties::set_allocated_mtime(PROTOBUF_NAMESPACE_ID::Timestamp* mtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtime_);
  }
  if (mtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtime)->GetArena();
    if (message_arena != submessage_arena) {
      mtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtime, submessage_arena);
    }
    
  } else {
    
  }
  mtime_ = mtime;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.NodeProperties.mtime)
}

// .google.protobuf.UInt32Value unix_mode = 3;
inline bool NodeProperties::_internal_has_unix_mode() const {
  return this != internal_default_instance() && unix_mode_ != nullptr;
}
inline bool NodeProperties::has_unix_mode() const {
  return _internal_has_unix_mode();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NodeProperties::_internal_unix_mode() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = unix_mode_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NodeProperties::unix_mode() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.NodeProperties.unix_mode)
  return _internal_unix_mode();
}
inline void NodeProperties::unsafe_arena_set_allocated_unix_mode(
    PROTOBUF_NAMESPACE_ID::UInt32Value* unix_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unix_mode_);
  }
  unix_mode_ = unix_mode;
  if (unix_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.NodeProperties.unix_mode)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NodeProperties::release_unix_mode() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = unix_mode_;
  unix_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NodeProperties::unsafe_arena_release_unix_mode() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.NodeProperties.unix_mode)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = unix_mode_;
  unix_mode_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NodeProperties::_internal_mutable_unix_mode() {
  
  if (unix_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    unix_mode_ = p;
  }
  return unix_mode_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NodeProperties::mutable_unix_mode() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.NodeProperties.unix_mode)
  return _internal_mutable_unix_mode();
}
inline void NodeProperties::set_allocated_unix_mode(PROTOBUF_NAMESPACE_ID::UInt32Value* unix_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unix_mode_);
  }
  if (unix_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unix_mode)->GetArena();
    if (message_arena != submessage_arena) {
      unix_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unix_mode, submessage_arena);
    }
    
  } else {
    
  }
  unix_mode_ = unix_mode;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.NodeProperties.unix_mode)
}

// -------------------------------------------------------------------

// FileNode

// string name = 1;
inline void FileNode::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileNode::name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.FileNode.name)
  return _internal_name();
}
inline void FileNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.FileNode.name)
}
inline std::string* FileNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.FileNode.name)
  return _internal_mutable_name();
}
inline const std::string& FileNode::_internal_name() const {
  return name_.Get();
}
inline void FileNode::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileNode::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.FileNode.name)
}
inline void FileNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.FileNode.name)
}
inline void FileNode::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.FileNode.name)
}
inline std::string* FileNode::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileNode::release_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.FileNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.FileNode.name)
}

// .build.bazel.remote.execution.v2.Digest digest = 2;
inline bool FileNode::_internal_has_digest() const {
  return this != internal_default_instance() && digest_ != nullptr;
}
inline bool FileNode::has_digest() const {
  return _internal_has_digest();
}
inline void FileNode::clear_digest() {
  if (GetArena() == nullptr && digest_ != nullptr) {
    delete digest_;
  }
  digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& FileNode::_internal_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& FileNode::digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.FileNode.digest)
  return _internal_digest();
}
inline void FileNode::unsafe_arena_set_allocated_digest(
    ::build::bazel::remote::execution::v2::Digest* digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digest_);
  }
  digest_ = digest;
  if (digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.FileNode.digest)
}
inline ::build::bazel::remote::execution::v2::Digest* FileNode::release_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* FileNode::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.FileNode.digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* FileNode::_internal_mutable_digest() {
  
  if (digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    digest_ = p;
  }
  return digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* FileNode::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.FileNode.digest)
  return _internal_mutable_digest();
}
inline void FileNode::set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete digest_;
  }
  if (digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digest);
    if (message_arena != submessage_arena) {
      digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.FileNode.digest)
}

// bool is_executable = 4;
inline void FileNode::clear_is_executable() {
  is_executable_ = false;
}
inline bool FileNode::_internal_is_executable() const {
  return is_executable_;
}
inline bool FileNode::is_executable() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.FileNode.is_executable)
  return _internal_is_executable();
}
inline void FileNode::_internal_set_is_executable(bool value) {
  
  is_executable_ = value;
}
inline void FileNode::set_is_executable(bool value) {
  _internal_set_is_executable(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.FileNode.is_executable)
}

// .build.bazel.remote.execution.v2.NodeProperties node_properties = 6;
inline bool FileNode::_internal_has_node_properties() const {
  return this != internal_default_instance() && node_properties_ != nullptr;
}
inline bool FileNode::has_node_properties() const {
  return _internal_has_node_properties();
}
inline void FileNode::clear_node_properties() {
  if (GetArena() == nullptr && node_properties_ != nullptr) {
    delete node_properties_;
  }
  node_properties_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& FileNode::_internal_node_properties() const {
  const ::build::bazel::remote::execution::v2::NodeProperties* p = node_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::NodeProperties&>(
      ::build::bazel::remote::execution::v2::_NodeProperties_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& FileNode::node_properties() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.FileNode.node_properties)
  return _internal_node_properties();
}
inline void FileNode::unsafe_arena_set_allocated_node_properties(
    ::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_properties_);
  }
  node_properties_ = node_properties;
  if (node_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.FileNode.node_properties)
}
inline ::build::bazel::remote::execution::v2::NodeProperties* FileNode::release_node_properties() {
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* FileNode::unsafe_arena_release_node_properties() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.FileNode.node_properties)
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* FileNode::_internal_mutable_node_properties() {
  
  if (node_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::NodeProperties>(GetArena());
    node_properties_ = p;
  }
  return node_properties_;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* FileNode::mutable_node_properties() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.FileNode.node_properties)
  return _internal_mutable_node_properties();
}
inline void FileNode::set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_properties_;
  }
  if (node_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node_properties);
    if (message_arena != submessage_arena) {
      node_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_properties, submessage_arena);
    }
    
  } else {
    
  }
  node_properties_ = node_properties;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.FileNode.node_properties)
}

// -------------------------------------------------------------------

// DirectoryNode

// string name = 1;
inline void DirectoryNode::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DirectoryNode::name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.DirectoryNode.name)
  return _internal_name();
}
inline void DirectoryNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.DirectoryNode.name)
}
inline std::string* DirectoryNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.DirectoryNode.name)
  return _internal_mutable_name();
}
inline const std::string& DirectoryNode::_internal_name() const {
  return name_.Get();
}
inline void DirectoryNode::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DirectoryNode::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.DirectoryNode.name)
}
inline void DirectoryNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.DirectoryNode.name)
}
inline void DirectoryNode::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.DirectoryNode.name)
}
inline std::string* DirectoryNode::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DirectoryNode::release_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.DirectoryNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DirectoryNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.DirectoryNode.name)
}

// .build.bazel.remote.execution.v2.Digest digest = 2;
inline bool DirectoryNode::_internal_has_digest() const {
  return this != internal_default_instance() && digest_ != nullptr;
}
inline bool DirectoryNode::has_digest() const {
  return _internal_has_digest();
}
inline void DirectoryNode::clear_digest() {
  if (GetArena() == nullptr && digest_ != nullptr) {
    delete digest_;
  }
  digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& DirectoryNode::_internal_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& DirectoryNode::digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.DirectoryNode.digest)
  return _internal_digest();
}
inline void DirectoryNode::unsafe_arena_set_allocated_digest(
    ::build::bazel::remote::execution::v2::Digest* digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digest_);
  }
  digest_ = digest;
  if (digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.DirectoryNode.digest)
}
inline ::build::bazel::remote::execution::v2::Digest* DirectoryNode::release_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* DirectoryNode::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.DirectoryNode.digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* DirectoryNode::_internal_mutable_digest() {
  
  if (digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    digest_ = p;
  }
  return digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* DirectoryNode::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.DirectoryNode.digest)
  return _internal_mutable_digest();
}
inline void DirectoryNode::set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete digest_;
  }
  if (digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digest);
    if (message_arena != submessage_arena) {
      digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.DirectoryNode.digest)
}

// -------------------------------------------------------------------

// SymlinkNode

// string name = 1;
inline void SymlinkNode::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SymlinkNode::name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.SymlinkNode.name)
  return _internal_name();
}
inline void SymlinkNode::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.SymlinkNode.name)
}
inline std::string* SymlinkNode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.SymlinkNode.name)
  return _internal_mutable_name();
}
inline const std::string& SymlinkNode::_internal_name() const {
  return name_.Get();
}
inline void SymlinkNode::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SymlinkNode::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.SymlinkNode.name)
}
inline void SymlinkNode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.SymlinkNode.name)
}
inline void SymlinkNode::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.SymlinkNode.name)
}
inline std::string* SymlinkNode::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SymlinkNode::release_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.SymlinkNode.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SymlinkNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.SymlinkNode.name)
}

// string target = 2;
inline void SymlinkNode::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& SymlinkNode::target() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.SymlinkNode.target)
  return _internal_target();
}
inline void SymlinkNode::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.SymlinkNode.target)
}
inline std::string* SymlinkNode::mutable_target() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.SymlinkNode.target)
  return _internal_mutable_target();
}
inline const std::string& SymlinkNode::_internal_target() const {
  return target_.Get();
}
inline void SymlinkNode::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SymlinkNode::set_target(std::string&& value) {
  
  target_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.SymlinkNode.target)
}
inline void SymlinkNode::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.SymlinkNode.target)
}
inline void SymlinkNode::set_target(const char* value,
    size_t size) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.SymlinkNode.target)
}
inline std::string* SymlinkNode::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SymlinkNode::release_target() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.SymlinkNode.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SymlinkNode::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.SymlinkNode.target)
}

// .build.bazel.remote.execution.v2.NodeProperties node_properties = 4;
inline bool SymlinkNode::_internal_has_node_properties() const {
  return this != internal_default_instance() && node_properties_ != nullptr;
}
inline bool SymlinkNode::has_node_properties() const {
  return _internal_has_node_properties();
}
inline void SymlinkNode::clear_node_properties() {
  if (GetArena() == nullptr && node_properties_ != nullptr) {
    delete node_properties_;
  }
  node_properties_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& SymlinkNode::_internal_node_properties() const {
  const ::build::bazel::remote::execution::v2::NodeProperties* p = node_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::NodeProperties&>(
      ::build::bazel::remote::execution::v2::_NodeProperties_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& SymlinkNode::node_properties() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.SymlinkNode.node_properties)
  return _internal_node_properties();
}
inline void SymlinkNode::unsafe_arena_set_allocated_node_properties(
    ::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_properties_);
  }
  node_properties_ = node_properties;
  if (node_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.SymlinkNode.node_properties)
}
inline ::build::bazel::remote::execution::v2::NodeProperties* SymlinkNode::release_node_properties() {
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* SymlinkNode::unsafe_arena_release_node_properties() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.SymlinkNode.node_properties)
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* SymlinkNode::_internal_mutable_node_properties() {
  
  if (node_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::NodeProperties>(GetArena());
    node_properties_ = p;
  }
  return node_properties_;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* SymlinkNode::mutable_node_properties() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.SymlinkNode.node_properties)
  return _internal_mutable_node_properties();
}
inline void SymlinkNode::set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_properties_;
  }
  if (node_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node_properties);
    if (message_arena != submessage_arena) {
      node_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_properties, submessage_arena);
    }
    
  } else {
    
  }
  node_properties_ = node_properties;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.SymlinkNode.node_properties)
}

// -------------------------------------------------------------------

// Digest

// string hash = 1;
inline void Digest::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& Digest::hash() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Digest.hash)
  return _internal_hash();
}
inline void Digest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Digest.hash)
}
inline std::string* Digest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Digest.hash)
  return _internal_mutable_hash();
}
inline const std::string& Digest::_internal_hash() const {
  return hash_.Get();
}
inline void Digest::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Digest::set_hash(std::string&& value) {
  
  hash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.Digest.hash)
}
inline void Digest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.Digest.hash)
}
inline void Digest::set_hash(const char* value,
    size_t size) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.Digest.hash)
}
inline std::string* Digest::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Digest::release_hash() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Digest.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Digest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Digest.hash)
}

// int64 size_bytes = 2;
inline void Digest::clear_size_bytes() {
  size_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Digest::_internal_size_bytes() const {
  return size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Digest::size_bytes() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Digest.size_bytes)
  return _internal_size_bytes();
}
inline void Digest::_internal_set_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_bytes_ = value;
}
inline void Digest::set_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.Digest.size_bytes)
}

// -------------------------------------------------------------------

// ExecutedActionMetadata

// string worker = 1;
inline void ExecutedActionMetadata::clear_worker() {
  worker_.ClearToEmpty();
}
inline const std::string& ExecutedActionMetadata::worker() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker)
  return _internal_worker();
}
inline void ExecutedActionMetadata::set_worker(const std::string& value) {
  _internal_set_worker(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker)
}
inline std::string* ExecutedActionMetadata::mutable_worker() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker)
  return _internal_mutable_worker();
}
inline const std::string& ExecutedActionMetadata::_internal_worker() const {
  return worker_.Get();
}
inline void ExecutedActionMetadata::_internal_set_worker(const std::string& value) {
  
  worker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecutedActionMetadata::set_worker(std::string&& value) {
  
  worker_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker)
}
inline void ExecutedActionMetadata::set_worker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker)
}
inline void ExecutedActionMetadata::set_worker(const char* value,
    size_t size) {
  
  worker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker)
}
inline std::string* ExecutedActionMetadata::_internal_mutable_worker() {
  
  return worker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecutedActionMetadata::release_worker() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker)
  return worker_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecutedActionMetadata::set_allocated_worker(std::string* worker) {
  if (worker != nullptr) {
    
  } else {
    
  }
  worker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker)
}

// .google.protobuf.Timestamp queued_timestamp = 2;
inline bool ExecutedActionMetadata::_internal_has_queued_timestamp() const {
  return this != internal_default_instance() && queued_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_queued_timestamp() const {
  return _internal_has_queued_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_queued_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = queued_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::queued_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.queued_timestamp)
  return _internal_queued_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_queued_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* queued_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queued_timestamp_);
  }
  queued_timestamp_ = queued_timestamp;
  if (queued_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.queued_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_queued_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = queued_timestamp_;
  queued_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_queued_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.queued_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = queued_timestamp_;
  queued_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_queued_timestamp() {
  
  if (queued_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    queued_timestamp_ = p;
  }
  return queued_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_queued_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.queued_timestamp)
  return _internal_mutable_queued_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_queued_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* queued_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(queued_timestamp_);
  }
  if (queued_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queued_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      queued_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queued_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  queued_timestamp_ = queued_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.queued_timestamp)
}

// .google.protobuf.Timestamp worker_start_timestamp = 3;
inline bool ExecutedActionMetadata::_internal_has_worker_start_timestamp() const {
  return this != internal_default_instance() && worker_start_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_worker_start_timestamp() const {
  return _internal_has_worker_start_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_worker_start_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = worker_start_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::worker_start_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_start_timestamp)
  return _internal_worker_start_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_worker_start_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* worker_start_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_start_timestamp_);
  }
  worker_start_timestamp_ = worker_start_timestamp;
  if (worker_start_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_start_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_worker_start_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = worker_start_timestamp_;
  worker_start_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_worker_start_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_start_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = worker_start_timestamp_;
  worker_start_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_worker_start_timestamp() {
  
  if (worker_start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    worker_start_timestamp_ = p;
  }
  return worker_start_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_worker_start_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_start_timestamp)
  return _internal_mutable_worker_start_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_worker_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* worker_start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_start_timestamp_);
  }
  if (worker_start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_start_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      worker_start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worker_start_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  worker_start_timestamp_ = worker_start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_start_timestamp)
}

// .google.protobuf.Timestamp worker_completed_timestamp = 4;
inline bool ExecutedActionMetadata::_internal_has_worker_completed_timestamp() const {
  return this != internal_default_instance() && worker_completed_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_worker_completed_timestamp() const {
  return _internal_has_worker_completed_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_worker_completed_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = worker_completed_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::worker_completed_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_completed_timestamp)
  return _internal_worker_completed_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_worker_completed_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* worker_completed_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_completed_timestamp_);
  }
  worker_completed_timestamp_ = worker_completed_timestamp;
  if (worker_completed_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_completed_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_worker_completed_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = worker_completed_timestamp_;
  worker_completed_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_worker_completed_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_completed_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = worker_completed_timestamp_;
  worker_completed_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_worker_completed_timestamp() {
  
  if (worker_completed_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    worker_completed_timestamp_ = p;
  }
  return worker_completed_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_worker_completed_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_completed_timestamp)
  return _internal_mutable_worker_completed_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_worker_completed_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* worker_completed_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_completed_timestamp_);
  }
  if (worker_completed_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worker_completed_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      worker_completed_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worker_completed_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  worker_completed_timestamp_ = worker_completed_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.worker_completed_timestamp)
}

// .google.protobuf.Timestamp input_fetch_start_timestamp = 5;
inline bool ExecutedActionMetadata::_internal_has_input_fetch_start_timestamp() const {
  return this != internal_default_instance() && input_fetch_start_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_input_fetch_start_timestamp() const {
  return _internal_has_input_fetch_start_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_input_fetch_start_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = input_fetch_start_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::input_fetch_start_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_start_timestamp)
  return _internal_input_fetch_start_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_input_fetch_start_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_start_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_fetch_start_timestamp_);
  }
  input_fetch_start_timestamp_ = input_fetch_start_timestamp;
  if (input_fetch_start_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_start_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_input_fetch_start_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = input_fetch_start_timestamp_;
  input_fetch_start_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_input_fetch_start_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_start_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = input_fetch_start_timestamp_;
  input_fetch_start_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_input_fetch_start_timestamp() {
  
  if (input_fetch_start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    input_fetch_start_timestamp_ = p;
  }
  return input_fetch_start_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_input_fetch_start_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_start_timestamp)
  return _internal_mutable_input_fetch_start_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_input_fetch_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_fetch_start_timestamp_);
  }
  if (input_fetch_start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_fetch_start_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      input_fetch_start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_fetch_start_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  input_fetch_start_timestamp_ = input_fetch_start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_start_timestamp)
}

// .google.protobuf.Timestamp input_fetch_completed_timestamp = 6;
inline bool ExecutedActionMetadata::_internal_has_input_fetch_completed_timestamp() const {
  return this != internal_default_instance() && input_fetch_completed_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_input_fetch_completed_timestamp() const {
  return _internal_has_input_fetch_completed_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_input_fetch_completed_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = input_fetch_completed_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::input_fetch_completed_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_completed_timestamp)
  return _internal_input_fetch_completed_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_input_fetch_completed_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_completed_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_fetch_completed_timestamp_);
  }
  input_fetch_completed_timestamp_ = input_fetch_completed_timestamp;
  if (input_fetch_completed_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_completed_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_input_fetch_completed_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = input_fetch_completed_timestamp_;
  input_fetch_completed_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_input_fetch_completed_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_completed_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = input_fetch_completed_timestamp_;
  input_fetch_completed_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_input_fetch_completed_timestamp() {
  
  if (input_fetch_completed_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    input_fetch_completed_timestamp_ = p;
  }
  return input_fetch_completed_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_input_fetch_completed_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_completed_timestamp)
  return _internal_mutable_input_fetch_completed_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_input_fetch_completed_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* input_fetch_completed_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_fetch_completed_timestamp_);
  }
  if (input_fetch_completed_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_fetch_completed_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      input_fetch_completed_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_fetch_completed_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  input_fetch_completed_timestamp_ = input_fetch_completed_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.input_fetch_completed_timestamp)
}

// .google.protobuf.Timestamp execution_start_timestamp = 7;
inline bool ExecutedActionMetadata::_internal_has_execution_start_timestamp() const {
  return this != internal_default_instance() && execution_start_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_execution_start_timestamp() const {
  return _internal_has_execution_start_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_execution_start_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = execution_start_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::execution_start_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_start_timestamp)
  return _internal_execution_start_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_execution_start_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_start_timestamp_);
  }
  execution_start_timestamp_ = execution_start_timestamp;
  if (execution_start_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_start_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_execution_start_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = execution_start_timestamp_;
  execution_start_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_execution_start_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_start_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = execution_start_timestamp_;
  execution_start_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_execution_start_timestamp() {
  
  if (execution_start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    execution_start_timestamp_ = p;
  }
  return execution_start_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_execution_start_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_start_timestamp)
  return _internal_mutable_execution_start_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_execution_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* execution_start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_start_timestamp_);
  }
  if (execution_start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_start_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      execution_start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_start_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  execution_start_timestamp_ = execution_start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_start_timestamp)
}

// .google.protobuf.Timestamp execution_completed_timestamp = 8;
inline bool ExecutedActionMetadata::_internal_has_execution_completed_timestamp() const {
  return this != internal_default_instance() && execution_completed_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_execution_completed_timestamp() const {
  return _internal_has_execution_completed_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_execution_completed_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = execution_completed_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::execution_completed_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_completed_timestamp)
  return _internal_execution_completed_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_execution_completed_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* execution_completed_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_completed_timestamp_);
  }
  execution_completed_timestamp_ = execution_completed_timestamp;
  if (execution_completed_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_completed_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_execution_completed_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = execution_completed_timestamp_;
  execution_completed_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_execution_completed_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_completed_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = execution_completed_timestamp_;
  execution_completed_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_execution_completed_timestamp() {
  
  if (execution_completed_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    execution_completed_timestamp_ = p;
  }
  return execution_completed_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_execution_completed_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_completed_timestamp)
  return _internal_mutable_execution_completed_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_execution_completed_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* execution_completed_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_completed_timestamp_);
  }
  if (execution_completed_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_completed_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      execution_completed_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_completed_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  execution_completed_timestamp_ = execution_completed_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.execution_completed_timestamp)
}

// .google.protobuf.Timestamp output_upload_start_timestamp = 9;
inline bool ExecutedActionMetadata::_internal_has_output_upload_start_timestamp() const {
  return this != internal_default_instance() && output_upload_start_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_output_upload_start_timestamp() const {
  return _internal_has_output_upload_start_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_output_upload_start_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = output_upload_start_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::output_upload_start_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_start_timestamp)
  return _internal_output_upload_start_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_output_upload_start_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_start_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_upload_start_timestamp_);
  }
  output_upload_start_timestamp_ = output_upload_start_timestamp;
  if (output_upload_start_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_start_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_output_upload_start_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = output_upload_start_timestamp_;
  output_upload_start_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_output_upload_start_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_start_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = output_upload_start_timestamp_;
  output_upload_start_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_output_upload_start_timestamp() {
  
  if (output_upload_start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    output_upload_start_timestamp_ = p;
  }
  return output_upload_start_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_output_upload_start_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_start_timestamp)
  return _internal_mutable_output_upload_start_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_output_upload_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_upload_start_timestamp_);
  }
  if (output_upload_start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_upload_start_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      output_upload_start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_upload_start_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  output_upload_start_timestamp_ = output_upload_start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_start_timestamp)
}

// .google.protobuf.Timestamp output_upload_completed_timestamp = 10;
inline bool ExecutedActionMetadata::_internal_has_output_upload_completed_timestamp() const {
  return this != internal_default_instance() && output_upload_completed_timestamp_ != nullptr;
}
inline bool ExecutedActionMetadata::has_output_upload_completed_timestamp() const {
  return _internal_has_output_upload_completed_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::_internal_output_upload_completed_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = output_upload_completed_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ExecutedActionMetadata::output_upload_completed_timestamp() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_completed_timestamp)
  return _internal_output_upload_completed_timestamp();
}
inline void ExecutedActionMetadata::unsafe_arena_set_allocated_output_upload_completed_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_completed_timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_upload_completed_timestamp_);
  }
  output_upload_completed_timestamp_ = output_upload_completed_timestamp;
  if (output_upload_completed_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_completed_timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::release_output_upload_completed_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = output_upload_completed_timestamp_;
  output_upload_completed_timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::unsafe_arena_release_output_upload_completed_timestamp() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_completed_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = output_upload_completed_timestamp_;
  output_upload_completed_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::_internal_mutable_output_upload_completed_timestamp() {
  
  if (output_upload_completed_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    output_upload_completed_timestamp_ = p;
  }
  return output_upload_completed_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ExecutedActionMetadata::mutable_output_upload_completed_timestamp() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_completed_timestamp)
  return _internal_mutable_output_upload_completed_timestamp();
}
inline void ExecutedActionMetadata::set_allocated_output_upload_completed_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* output_upload_completed_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_upload_completed_timestamp_);
  }
  if (output_upload_completed_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_upload_completed_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      output_upload_completed_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_upload_completed_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  output_upload_completed_timestamp_ = output_upload_completed_timestamp;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutedActionMetadata.output_upload_completed_timestamp)
}

// repeated .google.protobuf.Any auxiliary_metadata = 11;
inline int ExecutedActionMetadata::_internal_auxiliary_metadata_size() const {
  return auxiliary_metadata_.size();
}
inline int ExecutedActionMetadata::auxiliary_metadata_size() const {
  return _internal_auxiliary_metadata_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* ExecutedActionMetadata::mutable_auxiliary_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutedActionMetadata.auxiliary_metadata)
  return auxiliary_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
ExecutedActionMetadata::mutable_auxiliary_metadata() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.ExecutedActionMetadata.auxiliary_metadata)
  return &auxiliary_metadata_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExecutedActionMetadata::_internal_auxiliary_metadata(int index) const {
  return auxiliary_metadata_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ExecutedActionMetadata::auxiliary_metadata(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutedActionMetadata.auxiliary_metadata)
  return _internal_auxiliary_metadata(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* ExecutedActionMetadata::_internal_add_auxiliary_metadata() {
  return auxiliary_metadata_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* ExecutedActionMetadata::add_auxiliary_metadata() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.ExecutedActionMetadata.auxiliary_metadata)
  return _internal_add_auxiliary_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
ExecutedActionMetadata::auxiliary_metadata() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.ExecutedActionMetadata.auxiliary_metadata)
  return auxiliary_metadata_;
}

// -------------------------------------------------------------------

// ActionResult

// repeated .build.bazel.remote.execution.v2.OutputFile output_files = 2;
inline int ActionResult::_internal_output_files_size() const {
  return output_files_.size();
}
inline int ActionResult::output_files_size() const {
  return _internal_output_files_size();
}
inline void ActionResult::clear_output_files() {
  output_files_.Clear();
}
inline ::build::bazel::remote::execution::v2::OutputFile* ActionResult::mutable_output_files(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.output_files)
  return output_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputFile >*
ActionResult::mutable_output_files() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.ActionResult.output_files)
  return &output_files_;
}
inline const ::build::bazel::remote::execution::v2::OutputFile& ActionResult::_internal_output_files(int index) const {
  return output_files_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::OutputFile& ActionResult::output_files(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.output_files)
  return _internal_output_files(index);
}
inline ::build::bazel::remote::execution::v2::OutputFile* ActionResult::_internal_add_output_files() {
  return output_files_.Add();
}
inline ::build::bazel::remote::execution::v2::OutputFile* ActionResult::add_output_files() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.ActionResult.output_files)
  return _internal_add_output_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputFile >&
ActionResult::output_files() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.ActionResult.output_files)
  return output_files_;
}

// repeated .build.bazel.remote.execution.v2.OutputSymlink output_file_symlinks = 10;
inline int ActionResult::_internal_output_file_symlinks_size() const {
  return output_file_symlinks_.size();
}
inline int ActionResult::output_file_symlinks_size() const {
  return _internal_output_file_symlinks_size();
}
inline void ActionResult::clear_output_file_symlinks() {
  output_file_symlinks_.Clear();
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::mutable_output_file_symlinks(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.output_file_symlinks)
  return output_file_symlinks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >*
ActionResult::mutable_output_file_symlinks() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.ActionResult.output_file_symlinks)
  return &output_file_symlinks_;
}
inline const ::build::bazel::remote::execution::v2::OutputSymlink& ActionResult::_internal_output_file_symlinks(int index) const {
  return output_file_symlinks_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::OutputSymlink& ActionResult::output_file_symlinks(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.output_file_symlinks)
  return _internal_output_file_symlinks(index);
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::_internal_add_output_file_symlinks() {
  return output_file_symlinks_.Add();
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::add_output_file_symlinks() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.ActionResult.output_file_symlinks)
  return _internal_add_output_file_symlinks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >&
ActionResult::output_file_symlinks() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.ActionResult.output_file_symlinks)
  return output_file_symlinks_;
}

// repeated .build.bazel.remote.execution.v2.OutputSymlink output_symlinks = 12;
inline int ActionResult::_internal_output_symlinks_size() const {
  return output_symlinks_.size();
}
inline int ActionResult::output_symlinks_size() const {
  return _internal_output_symlinks_size();
}
inline void ActionResult::clear_output_symlinks() {
  output_symlinks_.Clear();
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::mutable_output_symlinks(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.output_symlinks)
  return output_symlinks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >*
ActionResult::mutable_output_symlinks() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.ActionResult.output_symlinks)
  return &output_symlinks_;
}
inline const ::build::bazel::remote::execution::v2::OutputSymlink& ActionResult::_internal_output_symlinks(int index) const {
  return output_symlinks_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::OutputSymlink& ActionResult::output_symlinks(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.output_symlinks)
  return _internal_output_symlinks(index);
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::_internal_add_output_symlinks() {
  return output_symlinks_.Add();
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::add_output_symlinks() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.ActionResult.output_symlinks)
  return _internal_add_output_symlinks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >&
ActionResult::output_symlinks() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.ActionResult.output_symlinks)
  return output_symlinks_;
}

// repeated .build.bazel.remote.execution.v2.OutputDirectory output_directories = 3;
inline int ActionResult::_internal_output_directories_size() const {
  return output_directories_.size();
}
inline int ActionResult::output_directories_size() const {
  return _internal_output_directories_size();
}
inline void ActionResult::clear_output_directories() {
  output_directories_.Clear();
}
inline ::build::bazel::remote::execution::v2::OutputDirectory* ActionResult::mutable_output_directories(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.output_directories)
  return output_directories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputDirectory >*
ActionResult::mutable_output_directories() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.ActionResult.output_directories)
  return &output_directories_;
}
inline const ::build::bazel::remote::execution::v2::OutputDirectory& ActionResult::_internal_output_directories(int index) const {
  return output_directories_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::OutputDirectory& ActionResult::output_directories(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.output_directories)
  return _internal_output_directories(index);
}
inline ::build::bazel::remote::execution::v2::OutputDirectory* ActionResult::_internal_add_output_directories() {
  return output_directories_.Add();
}
inline ::build::bazel::remote::execution::v2::OutputDirectory* ActionResult::add_output_directories() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.ActionResult.output_directories)
  return _internal_add_output_directories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputDirectory >&
ActionResult::output_directories() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.ActionResult.output_directories)
  return output_directories_;
}

// repeated .build.bazel.remote.execution.v2.OutputSymlink output_directory_symlinks = 11;
inline int ActionResult::_internal_output_directory_symlinks_size() const {
  return output_directory_symlinks_.size();
}
inline int ActionResult::output_directory_symlinks_size() const {
  return _internal_output_directory_symlinks_size();
}
inline void ActionResult::clear_output_directory_symlinks() {
  output_directory_symlinks_.Clear();
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::mutable_output_directory_symlinks(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.output_directory_symlinks)
  return output_directory_symlinks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >*
ActionResult::mutable_output_directory_symlinks() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.ActionResult.output_directory_symlinks)
  return &output_directory_symlinks_;
}
inline const ::build::bazel::remote::execution::v2::OutputSymlink& ActionResult::_internal_output_directory_symlinks(int index) const {
  return output_directory_symlinks_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::OutputSymlink& ActionResult::output_directory_symlinks(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.output_directory_symlinks)
  return _internal_output_directory_symlinks(index);
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::_internal_add_output_directory_symlinks() {
  return output_directory_symlinks_.Add();
}
inline ::build::bazel::remote::execution::v2::OutputSymlink* ActionResult::add_output_directory_symlinks() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.ActionResult.output_directory_symlinks)
  return _internal_add_output_directory_symlinks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::OutputSymlink >&
ActionResult::output_directory_symlinks() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.ActionResult.output_directory_symlinks)
  return output_directory_symlinks_;
}

// int32 exit_code = 4;
inline void ActionResult::clear_exit_code() {
  exit_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionResult::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionResult::exit_code() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.exit_code)
  return _internal_exit_code();
}
inline void ActionResult::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exit_code_ = value;
}
inline void ActionResult::set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ActionResult.exit_code)
}

// bytes stdout_raw = 5;
inline void ActionResult::clear_stdout_raw() {
  stdout_raw_.ClearToEmpty();
}
inline const std::string& ActionResult::stdout_raw() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.stdout_raw)
  return _internal_stdout_raw();
}
inline void ActionResult::set_stdout_raw(const std::string& value) {
  _internal_set_stdout_raw(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ActionResult.stdout_raw)
}
inline std::string* ActionResult::mutable_stdout_raw() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.stdout_raw)
  return _internal_mutable_stdout_raw();
}
inline const std::string& ActionResult::_internal_stdout_raw() const {
  return stdout_raw_.Get();
}
inline void ActionResult::_internal_set_stdout_raw(const std::string& value) {
  
  stdout_raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActionResult::set_stdout_raw(std::string&& value) {
  
  stdout_raw_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ActionResult.stdout_raw)
}
inline void ActionResult::set_stdout_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ActionResult.stdout_raw)
}
inline void ActionResult::set_stdout_raw(const void* value,
    size_t size) {
  
  stdout_raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ActionResult.stdout_raw)
}
inline std::string* ActionResult::_internal_mutable_stdout_raw() {
  
  return stdout_raw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActionResult::release_stdout_raw() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ActionResult.stdout_raw)
  return stdout_raw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionResult::set_allocated_stdout_raw(std::string* stdout_raw) {
  if (stdout_raw != nullptr) {
    
  } else {
    
  }
  stdout_raw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout_raw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ActionResult.stdout_raw)
}

// .build.bazel.remote.execution.v2.Digest stdout_digest = 6;
inline bool ActionResult::_internal_has_stdout_digest() const {
  return this != internal_default_instance() && stdout_digest_ != nullptr;
}
inline bool ActionResult::has_stdout_digest() const {
  return _internal_has_stdout_digest();
}
inline void ActionResult::clear_stdout_digest() {
  if (GetArena() == nullptr && stdout_digest_ != nullptr) {
    delete stdout_digest_;
  }
  stdout_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& ActionResult::_internal_stdout_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = stdout_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& ActionResult::stdout_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.stdout_digest)
  return _internal_stdout_digest();
}
inline void ActionResult::unsafe_arena_set_allocated_stdout_digest(
    ::build::bazel::remote::execution::v2::Digest* stdout_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdout_digest_);
  }
  stdout_digest_ = stdout_digest;
  if (stdout_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ActionResult.stdout_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* ActionResult::release_stdout_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = stdout_digest_;
  stdout_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* ActionResult::unsafe_arena_release_stdout_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ActionResult.stdout_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = stdout_digest_;
  stdout_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* ActionResult::_internal_mutable_stdout_digest() {
  
  if (stdout_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    stdout_digest_ = p;
  }
  return stdout_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* ActionResult::mutable_stdout_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.stdout_digest)
  return _internal_mutable_stdout_digest();
}
inline void ActionResult::set_allocated_stdout_digest(::build::bazel::remote::execution::v2::Digest* stdout_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stdout_digest_;
  }
  if (stdout_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stdout_digest);
    if (message_arena != submessage_arena) {
      stdout_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stdout_digest, submessage_arena);
    }
    
  } else {
    
  }
  stdout_digest_ = stdout_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ActionResult.stdout_digest)
}

// bytes stderr_raw = 7;
inline void ActionResult::clear_stderr_raw() {
  stderr_raw_.ClearToEmpty();
}
inline const std::string& ActionResult::stderr_raw() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.stderr_raw)
  return _internal_stderr_raw();
}
inline void ActionResult::set_stderr_raw(const std::string& value) {
  _internal_set_stderr_raw(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ActionResult.stderr_raw)
}
inline std::string* ActionResult::mutable_stderr_raw() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.stderr_raw)
  return _internal_mutable_stderr_raw();
}
inline const std::string& ActionResult::_internal_stderr_raw() const {
  return stderr_raw_.Get();
}
inline void ActionResult::_internal_set_stderr_raw(const std::string& value) {
  
  stderr_raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActionResult::set_stderr_raw(std::string&& value) {
  
  stderr_raw_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ActionResult.stderr_raw)
}
inline void ActionResult::set_stderr_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ActionResult.stderr_raw)
}
inline void ActionResult::set_stderr_raw(const void* value,
    size_t size) {
  
  stderr_raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ActionResult.stderr_raw)
}
inline std::string* ActionResult::_internal_mutable_stderr_raw() {
  
  return stderr_raw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActionResult::release_stderr_raw() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ActionResult.stderr_raw)
  return stderr_raw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionResult::set_allocated_stderr_raw(std::string* stderr_raw) {
  if (stderr_raw != nullptr) {
    
  } else {
    
  }
  stderr_raw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr_raw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ActionResult.stderr_raw)
}

// .build.bazel.remote.execution.v2.Digest stderr_digest = 8;
inline bool ActionResult::_internal_has_stderr_digest() const {
  return this != internal_default_instance() && stderr_digest_ != nullptr;
}
inline bool ActionResult::has_stderr_digest() const {
  return _internal_has_stderr_digest();
}
inline void ActionResult::clear_stderr_digest() {
  if (GetArena() == nullptr && stderr_digest_ != nullptr) {
    delete stderr_digest_;
  }
  stderr_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& ActionResult::_internal_stderr_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = stderr_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& ActionResult::stderr_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.stderr_digest)
  return _internal_stderr_digest();
}
inline void ActionResult::unsafe_arena_set_allocated_stderr_digest(
    ::build::bazel::remote::execution::v2::Digest* stderr_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stderr_digest_);
  }
  stderr_digest_ = stderr_digest;
  if (stderr_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ActionResult.stderr_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* ActionResult::release_stderr_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = stderr_digest_;
  stderr_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* ActionResult::unsafe_arena_release_stderr_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ActionResult.stderr_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = stderr_digest_;
  stderr_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* ActionResult::_internal_mutable_stderr_digest() {
  
  if (stderr_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    stderr_digest_ = p;
  }
  return stderr_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* ActionResult::mutable_stderr_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.stderr_digest)
  return _internal_mutable_stderr_digest();
}
inline void ActionResult::set_allocated_stderr_digest(::build::bazel::remote::execution::v2::Digest* stderr_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stderr_digest_;
  }
  if (stderr_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stderr_digest);
    if (message_arena != submessage_arena) {
      stderr_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stderr_digest, submessage_arena);
    }
    
  } else {
    
  }
  stderr_digest_ = stderr_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ActionResult.stderr_digest)
}

// .build.bazel.remote.execution.v2.ExecutedActionMetadata execution_metadata = 9;
inline bool ActionResult::_internal_has_execution_metadata() const {
  return this != internal_default_instance() && execution_metadata_ != nullptr;
}
inline bool ActionResult::has_execution_metadata() const {
  return _internal_has_execution_metadata();
}
inline void ActionResult::clear_execution_metadata() {
  if (GetArena() == nullptr && execution_metadata_ != nullptr) {
    delete execution_metadata_;
  }
  execution_metadata_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ExecutedActionMetadata& ActionResult::_internal_execution_metadata() const {
  const ::build::bazel::remote::execution::v2::ExecutedActionMetadata* p = execution_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ExecutedActionMetadata&>(
      ::build::bazel::remote::execution::v2::_ExecutedActionMetadata_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ExecutedActionMetadata& ActionResult::execution_metadata() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionResult.execution_metadata)
  return _internal_execution_metadata();
}
inline void ActionResult::unsafe_arena_set_allocated_execution_metadata(
    ::build::bazel::remote::execution::v2::ExecutedActionMetadata* execution_metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_metadata_);
  }
  execution_metadata_ = execution_metadata;
  if (execution_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ActionResult.execution_metadata)
}
inline ::build::bazel::remote::execution::v2::ExecutedActionMetadata* ActionResult::release_execution_metadata() {
  
  ::build::bazel::remote::execution::v2::ExecutedActionMetadata* temp = execution_metadata_;
  execution_metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ExecutedActionMetadata* ActionResult::unsafe_arena_release_execution_metadata() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ActionResult.execution_metadata)
  
  ::build::bazel::remote::execution::v2::ExecutedActionMetadata* temp = execution_metadata_;
  execution_metadata_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ExecutedActionMetadata* ActionResult::_internal_mutable_execution_metadata() {
  
  if (execution_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecutedActionMetadata>(GetArena());
    execution_metadata_ = p;
  }
  return execution_metadata_;
}
inline ::build::bazel::remote::execution::v2::ExecutedActionMetadata* ActionResult::mutable_execution_metadata() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ActionResult.execution_metadata)
  return _internal_mutable_execution_metadata();
}
inline void ActionResult::set_allocated_execution_metadata(::build::bazel::remote::execution::v2::ExecutedActionMetadata* execution_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete execution_metadata_;
  }
  if (execution_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution_metadata);
    if (message_arena != submessage_arena) {
      execution_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_metadata, submessage_arena);
    }
    
  } else {
    
  }
  execution_metadata_ = execution_metadata;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ActionResult.execution_metadata)
}

// -------------------------------------------------------------------

// OutputFile

// string path = 1;
inline void OutputFile::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& OutputFile::path() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputFile.path)
  return _internal_path();
}
inline void OutputFile::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.OutputFile.path)
}
inline std::string* OutputFile::mutable_path() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputFile.path)
  return _internal_mutable_path();
}
inline const std::string& OutputFile::_internal_path() const {
  return path_.Get();
}
inline void OutputFile::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutputFile::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.OutputFile.path)
}
inline void OutputFile::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.OutputFile.path)
}
inline void OutputFile::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.OutputFile.path)
}
inline std::string* OutputFile::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutputFile::release_path() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputFile.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputFile.path)
}

// .build.bazel.remote.execution.v2.Digest digest = 2;
inline bool OutputFile::_internal_has_digest() const {
  return this != internal_default_instance() && digest_ != nullptr;
}
inline bool OutputFile::has_digest() const {
  return _internal_has_digest();
}
inline void OutputFile::clear_digest() {
  if (GetArena() == nullptr && digest_ != nullptr) {
    delete digest_;
  }
  digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& OutputFile::_internal_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& OutputFile::digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputFile.digest)
  return _internal_digest();
}
inline void OutputFile::unsafe_arena_set_allocated_digest(
    ::build::bazel::remote::execution::v2::Digest* digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digest_);
  }
  digest_ = digest;
  if (digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.OutputFile.digest)
}
inline ::build::bazel::remote::execution::v2::Digest* OutputFile::release_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* OutputFile::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputFile.digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* OutputFile::_internal_mutable_digest() {
  
  if (digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    digest_ = p;
  }
  return digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* OutputFile::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputFile.digest)
  return _internal_mutable_digest();
}
inline void OutputFile::set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete digest_;
  }
  if (digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digest);
    if (message_arena != submessage_arena) {
      digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputFile.digest)
}

// bool is_executable = 4;
inline void OutputFile::clear_is_executable() {
  is_executable_ = false;
}
inline bool OutputFile::_internal_is_executable() const {
  return is_executable_;
}
inline bool OutputFile::is_executable() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputFile.is_executable)
  return _internal_is_executable();
}
inline void OutputFile::_internal_set_is_executable(bool value) {
  
  is_executable_ = value;
}
inline void OutputFile::set_is_executable(bool value) {
  _internal_set_is_executable(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.OutputFile.is_executable)
}

// bytes contents = 5;
inline void OutputFile::clear_contents() {
  contents_.ClearToEmpty();
}
inline const std::string& OutputFile::contents() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputFile.contents)
  return _internal_contents();
}
inline void OutputFile::set_contents(const std::string& value) {
  _internal_set_contents(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.OutputFile.contents)
}
inline std::string* OutputFile::mutable_contents() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputFile.contents)
  return _internal_mutable_contents();
}
inline const std::string& OutputFile::_internal_contents() const {
  return contents_.Get();
}
inline void OutputFile::_internal_set_contents(const std::string& value) {
  
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutputFile::set_contents(std::string&& value) {
  
  contents_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.OutputFile.contents)
}
inline void OutputFile::set_contents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.OutputFile.contents)
}
inline void OutputFile::set_contents(const void* value,
    size_t size) {
  
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.OutputFile.contents)
}
inline std::string* OutputFile::_internal_mutable_contents() {
  
  return contents_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutputFile::release_contents() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputFile.contents)
  return contents_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputFile::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contents,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputFile.contents)
}

// .build.bazel.remote.execution.v2.NodeProperties node_properties = 7;
inline bool OutputFile::_internal_has_node_properties() const {
  return this != internal_default_instance() && node_properties_ != nullptr;
}
inline bool OutputFile::has_node_properties() const {
  return _internal_has_node_properties();
}
inline void OutputFile::clear_node_properties() {
  if (GetArena() == nullptr && node_properties_ != nullptr) {
    delete node_properties_;
  }
  node_properties_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& OutputFile::_internal_node_properties() const {
  const ::build::bazel::remote::execution::v2::NodeProperties* p = node_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::NodeProperties&>(
      ::build::bazel::remote::execution::v2::_NodeProperties_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& OutputFile::node_properties() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputFile.node_properties)
  return _internal_node_properties();
}
inline void OutputFile::unsafe_arena_set_allocated_node_properties(
    ::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_properties_);
  }
  node_properties_ = node_properties;
  if (node_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.OutputFile.node_properties)
}
inline ::build::bazel::remote::execution::v2::NodeProperties* OutputFile::release_node_properties() {
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* OutputFile::unsafe_arena_release_node_properties() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputFile.node_properties)
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* OutputFile::_internal_mutable_node_properties() {
  
  if (node_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::NodeProperties>(GetArena());
    node_properties_ = p;
  }
  return node_properties_;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* OutputFile::mutable_node_properties() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputFile.node_properties)
  return _internal_mutable_node_properties();
}
inline void OutputFile::set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_properties_;
  }
  if (node_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node_properties);
    if (message_arena != submessage_arena) {
      node_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_properties, submessage_arena);
    }
    
  } else {
    
  }
  node_properties_ = node_properties;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputFile.node_properties)
}

// -------------------------------------------------------------------

// Tree

// .build.bazel.remote.execution.v2.Directory root = 1;
inline bool Tree::_internal_has_root() const {
  return this != internal_default_instance() && root_ != nullptr;
}
inline bool Tree::has_root() const {
  return _internal_has_root();
}
inline void Tree::clear_root() {
  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Directory& Tree::_internal_root() const {
  const ::build::bazel::remote::execution::v2::Directory* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Directory&>(
      ::build::bazel::remote::execution::v2::_Directory_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Directory& Tree::root() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Tree.root)
  return _internal_root();
}
inline void Tree::unsafe_arena_set_allocated_root(
    ::build::bazel::remote::execution::v2::Directory* root) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.Tree.root)
}
inline ::build::bazel::remote::execution::v2::Directory* Tree::release_root() {
  
  ::build::bazel::remote::execution::v2::Directory* temp = root_;
  root_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Directory* Tree::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.Tree.root)
  
  ::build::bazel::remote::execution::v2::Directory* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Directory* Tree::_internal_mutable_root() {
  
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Directory>(GetArena());
    root_ = p;
  }
  return root_;
}
inline ::build::bazel::remote::execution::v2::Directory* Tree::mutable_root() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Tree.root)
  return _internal_mutable_root();
}
inline void Tree::set_allocated_root(::build::bazel::remote::execution::v2::Directory* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    
  } else {
    
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.Tree.root)
}

// repeated .build.bazel.remote.execution.v2.Directory children = 2;
inline int Tree::_internal_children_size() const {
  return children_.size();
}
inline int Tree::children_size() const {
  return _internal_children_size();
}
inline void Tree::clear_children() {
  children_.Clear();
}
inline ::build::bazel::remote::execution::v2::Directory* Tree::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.Tree.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory >*
Tree::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.Tree.children)
  return &children_;
}
inline const ::build::bazel::remote::execution::v2::Directory& Tree::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::Directory& Tree::children(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.Tree.children)
  return _internal_children(index);
}
inline ::build::bazel::remote::execution::v2::Directory* Tree::_internal_add_children() {
  return children_.Add();
}
inline ::build::bazel::remote::execution::v2::Directory* Tree::add_children() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.Tree.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory >&
Tree::children() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.Tree.children)
  return children_;
}

// -------------------------------------------------------------------

// OutputDirectory

// string path = 1;
inline void OutputDirectory::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& OutputDirectory::path() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputDirectory.path)
  return _internal_path();
}
inline void OutputDirectory::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.OutputDirectory.path)
}
inline std::string* OutputDirectory::mutable_path() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputDirectory.path)
  return _internal_mutable_path();
}
inline const std::string& OutputDirectory::_internal_path() const {
  return path_.Get();
}
inline void OutputDirectory::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutputDirectory::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.OutputDirectory.path)
}
inline void OutputDirectory::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.OutputDirectory.path)
}
inline void OutputDirectory::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.OutputDirectory.path)
}
inline std::string* OutputDirectory::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutputDirectory::release_path() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputDirectory.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputDirectory::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputDirectory.path)
}

// .build.bazel.remote.execution.v2.Digest tree_digest = 3;
inline bool OutputDirectory::_internal_has_tree_digest() const {
  return this != internal_default_instance() && tree_digest_ != nullptr;
}
inline bool OutputDirectory::has_tree_digest() const {
  return _internal_has_tree_digest();
}
inline void OutputDirectory::clear_tree_digest() {
  if (GetArena() == nullptr && tree_digest_ != nullptr) {
    delete tree_digest_;
  }
  tree_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& OutputDirectory::_internal_tree_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = tree_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& OutputDirectory::tree_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputDirectory.tree_digest)
  return _internal_tree_digest();
}
inline void OutputDirectory::unsafe_arena_set_allocated_tree_digest(
    ::build::bazel::remote::execution::v2::Digest* tree_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tree_digest_);
  }
  tree_digest_ = tree_digest;
  if (tree_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.OutputDirectory.tree_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* OutputDirectory::release_tree_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = tree_digest_;
  tree_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* OutputDirectory::unsafe_arena_release_tree_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputDirectory.tree_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = tree_digest_;
  tree_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* OutputDirectory::_internal_mutable_tree_digest() {
  
  if (tree_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    tree_digest_ = p;
  }
  return tree_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* OutputDirectory::mutable_tree_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputDirectory.tree_digest)
  return _internal_mutable_tree_digest();
}
inline void OutputDirectory::set_allocated_tree_digest(::build::bazel::remote::execution::v2::Digest* tree_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tree_digest_;
  }
  if (tree_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tree_digest);
    if (message_arena != submessage_arena) {
      tree_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tree_digest, submessage_arena);
    }
    
  } else {
    
  }
  tree_digest_ = tree_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputDirectory.tree_digest)
}

// -------------------------------------------------------------------

// OutputSymlink

// string path = 1;
inline void OutputSymlink::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& OutputSymlink::path() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputSymlink.path)
  return _internal_path();
}
inline void OutputSymlink::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.OutputSymlink.path)
}
inline std::string* OutputSymlink::mutable_path() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputSymlink.path)
  return _internal_mutable_path();
}
inline const std::string& OutputSymlink::_internal_path() const {
  return path_.Get();
}
inline void OutputSymlink::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutputSymlink::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.OutputSymlink.path)
}
inline void OutputSymlink::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.OutputSymlink.path)
}
inline void OutputSymlink::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.OutputSymlink.path)
}
inline std::string* OutputSymlink::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutputSymlink::release_path() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputSymlink.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputSymlink::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputSymlink.path)
}

// string target = 2;
inline void OutputSymlink::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& OutputSymlink::target() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputSymlink.target)
  return _internal_target();
}
inline void OutputSymlink::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.OutputSymlink.target)
}
inline std::string* OutputSymlink::mutable_target() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputSymlink.target)
  return _internal_mutable_target();
}
inline const std::string& OutputSymlink::_internal_target() const {
  return target_.Get();
}
inline void OutputSymlink::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OutputSymlink::set_target(std::string&& value) {
  
  target_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.OutputSymlink.target)
}
inline void OutputSymlink::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.OutputSymlink.target)
}
inline void OutputSymlink::set_target(const char* value,
    size_t size) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.OutputSymlink.target)
}
inline std::string* OutputSymlink::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OutputSymlink::release_target() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputSymlink.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputSymlink::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputSymlink.target)
}

// .build.bazel.remote.execution.v2.NodeProperties node_properties = 4;
inline bool OutputSymlink::_internal_has_node_properties() const {
  return this != internal_default_instance() && node_properties_ != nullptr;
}
inline bool OutputSymlink::has_node_properties() const {
  return _internal_has_node_properties();
}
inline void OutputSymlink::clear_node_properties() {
  if (GetArena() == nullptr && node_properties_ != nullptr) {
    delete node_properties_;
  }
  node_properties_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& OutputSymlink::_internal_node_properties() const {
  const ::build::bazel::remote::execution::v2::NodeProperties* p = node_properties_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::NodeProperties&>(
      ::build::bazel::remote::execution::v2::_NodeProperties_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::NodeProperties& OutputSymlink::node_properties() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.OutputSymlink.node_properties)
  return _internal_node_properties();
}
inline void OutputSymlink::unsafe_arena_set_allocated_node_properties(
    ::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_properties_);
  }
  node_properties_ = node_properties;
  if (node_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.OutputSymlink.node_properties)
}
inline ::build::bazel::remote::execution::v2::NodeProperties* OutputSymlink::release_node_properties() {
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* OutputSymlink::unsafe_arena_release_node_properties() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.OutputSymlink.node_properties)
  
  ::build::bazel::remote::execution::v2::NodeProperties* temp = node_properties_;
  node_properties_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* OutputSymlink::_internal_mutable_node_properties() {
  
  if (node_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::NodeProperties>(GetArena());
    node_properties_ = p;
  }
  return node_properties_;
}
inline ::build::bazel::remote::execution::v2::NodeProperties* OutputSymlink::mutable_node_properties() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.OutputSymlink.node_properties)
  return _internal_mutable_node_properties();
}
inline void OutputSymlink::set_allocated_node_properties(::build::bazel::remote::execution::v2::NodeProperties* node_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_properties_;
  }
  if (node_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node_properties);
    if (message_arena != submessage_arena) {
      node_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_properties, submessage_arena);
    }
    
  } else {
    
  }
  node_properties_ = node_properties;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.OutputSymlink.node_properties)
}

// -------------------------------------------------------------------

// ExecutionPolicy

// int32 priority = 1;
inline void ExecutionPolicy::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionPolicy::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExecutionPolicy::priority() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutionPolicy.priority)
  return _internal_priority();
}
inline void ExecutionPolicy::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void ExecutionPolicy::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecutionPolicy.priority)
}

// -------------------------------------------------------------------

// ResultsCachePolicy

// int32 priority = 1;
inline void ResultsCachePolicy::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultsCachePolicy::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultsCachePolicy::priority() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ResultsCachePolicy.priority)
  return _internal_priority();
}
inline void ResultsCachePolicy::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void ResultsCachePolicy::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ResultsCachePolicy.priority)
}

// -------------------------------------------------------------------

// ExecuteRequest

// string instance_name = 1;
inline void ExecuteRequest::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& ExecuteRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteRequest.instance_name)
  return _internal_instance_name();
}
inline void ExecuteRequest::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecuteRequest.instance_name)
}
inline std::string* ExecuteRequest::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteRequest.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& ExecuteRequest::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void ExecuteRequest::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecuteRequest::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ExecuteRequest.instance_name)
}
inline void ExecuteRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ExecuteRequest.instance_name)
}
inline void ExecuteRequest::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ExecuteRequest.instance_name)
}
inline std::string* ExecuteRequest::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecuteRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteRequest.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteRequest::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteRequest.instance_name)
}

// bool skip_cache_lookup = 3;
inline void ExecuteRequest::clear_skip_cache_lookup() {
  skip_cache_lookup_ = false;
}
inline bool ExecuteRequest::_internal_skip_cache_lookup() const {
  return skip_cache_lookup_;
}
inline bool ExecuteRequest::skip_cache_lookup() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteRequest.skip_cache_lookup)
  return _internal_skip_cache_lookup();
}
inline void ExecuteRequest::_internal_set_skip_cache_lookup(bool value) {
  
  skip_cache_lookup_ = value;
}
inline void ExecuteRequest::set_skip_cache_lookup(bool value) {
  _internal_set_skip_cache_lookup(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecuteRequest.skip_cache_lookup)
}

// .build.bazel.remote.execution.v2.Digest action_digest = 6;
inline bool ExecuteRequest::_internal_has_action_digest() const {
  return this != internal_default_instance() && action_digest_ != nullptr;
}
inline bool ExecuteRequest::has_action_digest() const {
  return _internal_has_action_digest();
}
inline void ExecuteRequest::clear_action_digest() {
  if (GetArena() == nullptr && action_digest_ != nullptr) {
    delete action_digest_;
  }
  action_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& ExecuteRequest::_internal_action_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = action_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& ExecuteRequest::action_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteRequest.action_digest)
  return _internal_action_digest();
}
inline void ExecuteRequest::unsafe_arena_set_allocated_action_digest(
    ::build::bazel::remote::execution::v2::Digest* action_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_digest_);
  }
  action_digest_ = action_digest;
  if (action_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecuteRequest.action_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* ExecuteRequest::release_action_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = action_digest_;
  action_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* ExecuteRequest::unsafe_arena_release_action_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteRequest.action_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = action_digest_;
  action_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* ExecuteRequest::_internal_mutable_action_digest() {
  
  if (action_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    action_digest_ = p;
  }
  return action_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* ExecuteRequest::mutable_action_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteRequest.action_digest)
  return _internal_mutable_action_digest();
}
inline void ExecuteRequest::set_allocated_action_digest(::build::bazel::remote::execution::v2::Digest* action_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_digest_;
  }
  if (action_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_digest);
    if (message_arena != submessage_arena) {
      action_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_digest, submessage_arena);
    }
    
  } else {
    
  }
  action_digest_ = action_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteRequest.action_digest)
}

// .build.bazel.remote.execution.v2.ExecutionPolicy execution_policy = 7;
inline bool ExecuteRequest::_internal_has_execution_policy() const {
  return this != internal_default_instance() && execution_policy_ != nullptr;
}
inline bool ExecuteRequest::has_execution_policy() const {
  return _internal_has_execution_policy();
}
inline void ExecuteRequest::clear_execution_policy() {
  if (GetArena() == nullptr && execution_policy_ != nullptr) {
    delete execution_policy_;
  }
  execution_policy_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ExecutionPolicy& ExecuteRequest::_internal_execution_policy() const {
  const ::build::bazel::remote::execution::v2::ExecutionPolicy* p = execution_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ExecutionPolicy&>(
      ::build::bazel::remote::execution::v2::_ExecutionPolicy_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ExecutionPolicy& ExecuteRequest::execution_policy() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteRequest.execution_policy)
  return _internal_execution_policy();
}
inline void ExecuteRequest::unsafe_arena_set_allocated_execution_policy(
    ::build::bazel::remote::execution::v2::ExecutionPolicy* execution_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_policy_);
  }
  execution_policy_ = execution_policy;
  if (execution_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecuteRequest.execution_policy)
}
inline ::build::bazel::remote::execution::v2::ExecutionPolicy* ExecuteRequest::release_execution_policy() {
  
  ::build::bazel::remote::execution::v2::ExecutionPolicy* temp = execution_policy_;
  execution_policy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ExecutionPolicy* ExecuteRequest::unsafe_arena_release_execution_policy() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteRequest.execution_policy)
  
  ::build::bazel::remote::execution::v2::ExecutionPolicy* temp = execution_policy_;
  execution_policy_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ExecutionPolicy* ExecuteRequest::_internal_mutable_execution_policy() {
  
  if (execution_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecutionPolicy>(GetArena());
    execution_policy_ = p;
  }
  return execution_policy_;
}
inline ::build::bazel::remote::execution::v2::ExecutionPolicy* ExecuteRequest::mutable_execution_policy() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteRequest.execution_policy)
  return _internal_mutable_execution_policy();
}
inline void ExecuteRequest::set_allocated_execution_policy(::build::bazel::remote::execution::v2::ExecutionPolicy* execution_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete execution_policy_;
  }
  if (execution_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution_policy);
    if (message_arena != submessage_arena) {
      execution_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_policy, submessage_arena);
    }
    
  } else {
    
  }
  execution_policy_ = execution_policy;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteRequest.execution_policy)
}

// .build.bazel.remote.execution.v2.ResultsCachePolicy results_cache_policy = 8;
inline bool ExecuteRequest::_internal_has_results_cache_policy() const {
  return this != internal_default_instance() && results_cache_policy_ != nullptr;
}
inline bool ExecuteRequest::has_results_cache_policy() const {
  return _internal_has_results_cache_policy();
}
inline void ExecuteRequest::clear_results_cache_policy() {
  if (GetArena() == nullptr && results_cache_policy_ != nullptr) {
    delete results_cache_policy_;
  }
  results_cache_policy_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ResultsCachePolicy& ExecuteRequest::_internal_results_cache_policy() const {
  const ::build::bazel::remote::execution::v2::ResultsCachePolicy* p = results_cache_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ResultsCachePolicy&>(
      ::build::bazel::remote::execution::v2::_ResultsCachePolicy_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ResultsCachePolicy& ExecuteRequest::results_cache_policy() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteRequest.results_cache_policy)
  return _internal_results_cache_policy();
}
inline void ExecuteRequest::unsafe_arena_set_allocated_results_cache_policy(
    ::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_cache_policy_);
  }
  results_cache_policy_ = results_cache_policy;
  if (results_cache_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecuteRequest.results_cache_policy)
}
inline ::build::bazel::remote::execution::v2::ResultsCachePolicy* ExecuteRequest::release_results_cache_policy() {
  
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* temp = results_cache_policy_;
  results_cache_policy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ResultsCachePolicy* ExecuteRequest::unsafe_arena_release_results_cache_policy() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteRequest.results_cache_policy)
  
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* temp = results_cache_policy_;
  results_cache_policy_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ResultsCachePolicy* ExecuteRequest::_internal_mutable_results_cache_policy() {
  
  if (results_cache_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ResultsCachePolicy>(GetArena());
    results_cache_policy_ = p;
  }
  return results_cache_policy_;
}
inline ::build::bazel::remote::execution::v2::ResultsCachePolicy* ExecuteRequest::mutable_results_cache_policy() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteRequest.results_cache_policy)
  return _internal_mutable_results_cache_policy();
}
inline void ExecuteRequest::set_allocated_results_cache_policy(::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete results_cache_policy_;
  }
  if (results_cache_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(results_cache_policy);
    if (message_arena != submessage_arena) {
      results_cache_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results_cache_policy, submessage_arena);
    }
    
  } else {
    
  }
  results_cache_policy_ = results_cache_policy;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteRequest.results_cache_policy)
}

// -------------------------------------------------------------------

// LogFile

// .build.bazel.remote.execution.v2.Digest digest = 1;
inline bool LogFile::_internal_has_digest() const {
  return this != internal_default_instance() && digest_ != nullptr;
}
inline bool LogFile::has_digest() const {
  return _internal_has_digest();
}
inline void LogFile::clear_digest() {
  if (GetArena() == nullptr && digest_ != nullptr) {
    delete digest_;
  }
  digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& LogFile::_internal_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& LogFile::digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.LogFile.digest)
  return _internal_digest();
}
inline void LogFile::unsafe_arena_set_allocated_digest(
    ::build::bazel::remote::execution::v2::Digest* digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digest_);
  }
  digest_ = digest;
  if (digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.LogFile.digest)
}
inline ::build::bazel::remote::execution::v2::Digest* LogFile::release_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* LogFile::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.LogFile.digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* LogFile::_internal_mutable_digest() {
  
  if (digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    digest_ = p;
  }
  return digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* LogFile::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.LogFile.digest)
  return _internal_mutable_digest();
}
inline void LogFile::set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete digest_;
  }
  if (digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digest);
    if (message_arena != submessage_arena) {
      digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.LogFile.digest)
}

// bool human_readable = 2;
inline void LogFile::clear_human_readable() {
  human_readable_ = false;
}
inline bool LogFile::_internal_human_readable() const {
  return human_readable_;
}
inline bool LogFile::human_readable() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.LogFile.human_readable)
  return _internal_human_readable();
}
inline void LogFile::_internal_set_human_readable(bool value) {
  
  human_readable_ = value;
}
inline void LogFile::set_human_readable(bool value) {
  _internal_set_human_readable(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.LogFile.human_readable)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExecuteResponse

// .build.bazel.remote.execution.v2.ActionResult result = 1;
inline bool ExecuteResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ExecuteResponse::has_result() const {
  return _internal_has_result();
}
inline void ExecuteResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ActionResult& ExecuteResponse::_internal_result() const {
  const ::build::bazel::remote::execution::v2::ActionResult* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ActionResult&>(
      ::build::bazel::remote::execution::v2::_ActionResult_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ActionResult& ExecuteResponse::result() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteResponse.result)
  return _internal_result();
}
inline void ExecuteResponse::unsafe_arena_set_allocated_result(
    ::build::bazel::remote::execution::v2::ActionResult* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecuteResponse.result)
}
inline ::build::bazel::remote::execution::v2::ActionResult* ExecuteResponse::release_result() {
  
  ::build::bazel::remote::execution::v2::ActionResult* temp = result_;
  result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ActionResult* ExecuteResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteResponse.result)
  
  ::build::bazel::remote::execution::v2::ActionResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ActionResult* ExecuteResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ActionResult>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::build::bazel::remote::execution::v2::ActionResult* ExecuteResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteResponse.result)
  return _internal_mutable_result();
}
inline void ExecuteResponse::set_allocated_result(::build::bazel::remote::execution::v2::ActionResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteResponse.result)
}

// bool cached_result = 2;
inline void ExecuteResponse::clear_cached_result() {
  cached_result_ = false;
}
inline bool ExecuteResponse::_internal_cached_result() const {
  return cached_result_;
}
inline bool ExecuteResponse::cached_result() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteResponse.cached_result)
  return _internal_cached_result();
}
inline void ExecuteResponse::_internal_set_cached_result(bool value) {
  
  cached_result_ = value;
}
inline void ExecuteResponse::set_cached_result(bool value) {
  _internal_set_cached_result(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecuteResponse.cached_result)
}

// .google.rpc.Status status = 3;
inline bool ExecuteResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ExecuteResponse::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& ExecuteResponse::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& ExecuteResponse::status() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteResponse.status)
  return _internal_status();
}
inline void ExecuteResponse::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecuteResponse.status)
}
inline ::google::rpc::Status* ExecuteResponse::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* ExecuteResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteResponse.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* ExecuteResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* ExecuteResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteResponse.status)
  return _internal_mutable_status();
}
inline void ExecuteResponse::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteResponse.status)
}

// map<string, .build.bazel.remote.execution.v2.LogFile> server_logs = 4;
inline int ExecuteResponse::_internal_server_logs_size() const {
  return server_logs_.size();
}
inline int ExecuteResponse::server_logs_size() const {
  return _internal_server_logs_size();
}
inline void ExecuteResponse::clear_server_logs() {
  server_logs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::build::bazel::remote::execution::v2::LogFile >&
ExecuteResponse::_internal_server_logs() const {
  return server_logs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::build::bazel::remote::execution::v2::LogFile >&
ExecuteResponse::server_logs() const {
  // @@protoc_insertion_point(field_map:build.bazel.remote.execution.v2.ExecuteResponse.server_logs)
  return _internal_server_logs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::build::bazel::remote::execution::v2::LogFile >*
ExecuteResponse::_internal_mutable_server_logs() {
  return server_logs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::build::bazel::remote::execution::v2::LogFile >*
ExecuteResponse::mutable_server_logs() {
  // @@protoc_insertion_point(field_mutable_map:build.bazel.remote.execution.v2.ExecuteResponse.server_logs)
  return _internal_mutable_server_logs();
}

// string message = 5;
inline void ExecuteResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ExecuteResponse::message() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteResponse.message)
  return _internal_message();
}
inline void ExecuteResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecuteResponse.message)
}
inline std::string* ExecuteResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteResponse.message)
  return _internal_mutable_message();
}
inline const std::string& ExecuteResponse::_internal_message() const {
  return message_.Get();
}
inline void ExecuteResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecuteResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ExecuteResponse.message)
}
inline void ExecuteResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ExecuteResponse.message)
}
inline void ExecuteResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ExecuteResponse.message)
}
inline std::string* ExecuteResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecuteResponse::release_message() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteResponse.message)
}

// -------------------------------------------------------------------

// ExecutionStage

// -------------------------------------------------------------------

// ExecuteOperationMetadata

// .build.bazel.remote.execution.v2.ExecutionStage.Value stage = 1;
inline void ExecuteOperationMetadata::clear_stage() {
  stage_ = 0;
}
inline ::build::bazel::remote::execution::v2::ExecutionStage_Value ExecuteOperationMetadata::_internal_stage() const {
  return static_cast< ::build::bazel::remote::execution::v2::ExecutionStage_Value >(stage_);
}
inline ::build::bazel::remote::execution::v2::ExecutionStage_Value ExecuteOperationMetadata::stage() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stage)
  return _internal_stage();
}
inline void ExecuteOperationMetadata::_internal_set_stage(::build::bazel::remote::execution::v2::ExecutionStage_Value value) {
  
  stage_ = value;
}
inline void ExecuteOperationMetadata::set_stage(::build::bazel::remote::execution::v2::ExecutionStage_Value value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stage)
}

// .build.bazel.remote.execution.v2.Digest action_digest = 2;
inline bool ExecuteOperationMetadata::_internal_has_action_digest() const {
  return this != internal_default_instance() && action_digest_ != nullptr;
}
inline bool ExecuteOperationMetadata::has_action_digest() const {
  return _internal_has_action_digest();
}
inline void ExecuteOperationMetadata::clear_action_digest() {
  if (GetArena() == nullptr && action_digest_ != nullptr) {
    delete action_digest_;
  }
  action_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& ExecuteOperationMetadata::_internal_action_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = action_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& ExecuteOperationMetadata::action_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteOperationMetadata.action_digest)
  return _internal_action_digest();
}
inline void ExecuteOperationMetadata::unsafe_arena_set_allocated_action_digest(
    ::build::bazel::remote::execution::v2::Digest* action_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_digest_);
  }
  action_digest_ = action_digest;
  if (action_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecuteOperationMetadata.action_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* ExecuteOperationMetadata::release_action_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = action_digest_;
  action_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* ExecuteOperationMetadata::unsafe_arena_release_action_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteOperationMetadata.action_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = action_digest_;
  action_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* ExecuteOperationMetadata::_internal_mutable_action_digest() {
  
  if (action_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    action_digest_ = p;
  }
  return action_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* ExecuteOperationMetadata::mutable_action_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteOperationMetadata.action_digest)
  return _internal_mutable_action_digest();
}
inline void ExecuteOperationMetadata::set_allocated_action_digest(::build::bazel::remote::execution::v2::Digest* action_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_digest_;
  }
  if (action_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_digest);
    if (message_arena != submessage_arena) {
      action_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_digest, submessage_arena);
    }
    
  } else {
    
  }
  action_digest_ = action_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteOperationMetadata.action_digest)
}

// string stdout_stream_name = 3;
inline void ExecuteOperationMetadata::clear_stdout_stream_name() {
  stdout_stream_name_.ClearToEmpty();
}
inline const std::string& ExecuteOperationMetadata::stdout_stream_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stdout_stream_name)
  return _internal_stdout_stream_name();
}
inline void ExecuteOperationMetadata::set_stdout_stream_name(const std::string& value) {
  _internal_set_stdout_stream_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stdout_stream_name)
}
inline std::string* ExecuteOperationMetadata::mutable_stdout_stream_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stdout_stream_name)
  return _internal_mutable_stdout_stream_name();
}
inline const std::string& ExecuteOperationMetadata::_internal_stdout_stream_name() const {
  return stdout_stream_name_.Get();
}
inline void ExecuteOperationMetadata::_internal_set_stdout_stream_name(const std::string& value) {
  
  stdout_stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecuteOperationMetadata::set_stdout_stream_name(std::string&& value) {
  
  stdout_stream_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stdout_stream_name)
}
inline void ExecuteOperationMetadata::set_stdout_stream_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stdout_stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stdout_stream_name)
}
inline void ExecuteOperationMetadata::set_stdout_stream_name(const char* value,
    size_t size) {
  
  stdout_stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stdout_stream_name)
}
inline std::string* ExecuteOperationMetadata::_internal_mutable_stdout_stream_name() {
  
  return stdout_stream_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecuteOperationMetadata::release_stdout_stream_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stdout_stream_name)
  return stdout_stream_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteOperationMetadata::set_allocated_stdout_stream_name(std::string* stdout_stream_name) {
  if (stdout_stream_name != nullptr) {
    
  } else {
    
  }
  stdout_stream_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stdout_stream_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stdout_stream_name)
}

// string stderr_stream_name = 4;
inline void ExecuteOperationMetadata::clear_stderr_stream_name() {
  stderr_stream_name_.ClearToEmpty();
}
inline const std::string& ExecuteOperationMetadata::stderr_stream_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stderr_stream_name)
  return _internal_stderr_stream_name();
}
inline void ExecuteOperationMetadata::set_stderr_stream_name(const std::string& value) {
  _internal_set_stderr_stream_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stderr_stream_name)
}
inline std::string* ExecuteOperationMetadata::mutable_stderr_stream_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stderr_stream_name)
  return _internal_mutable_stderr_stream_name();
}
inline const std::string& ExecuteOperationMetadata::_internal_stderr_stream_name() const {
  return stderr_stream_name_.Get();
}
inline void ExecuteOperationMetadata::_internal_set_stderr_stream_name(const std::string& value) {
  
  stderr_stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExecuteOperationMetadata::set_stderr_stream_name(std::string&& value) {
  
  stderr_stream_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stderr_stream_name)
}
inline void ExecuteOperationMetadata::set_stderr_stream_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stderr_stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stderr_stream_name)
}
inline void ExecuteOperationMetadata::set_stderr_stream_name(const char* value,
    size_t size) {
  
  stderr_stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stderr_stream_name)
}
inline std::string* ExecuteOperationMetadata::_internal_mutable_stderr_stream_name() {
  
  return stderr_stream_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExecuteOperationMetadata::release_stderr_stream_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stderr_stream_name)
  return stderr_stream_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExecuteOperationMetadata::set_allocated_stderr_stream_name(std::string* stderr_stream_name) {
  if (stderr_stream_name != nullptr) {
    
  } else {
    
  }
  stderr_stream_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stderr_stream_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecuteOperationMetadata.stderr_stream_name)
}

// -------------------------------------------------------------------

// WaitExecutionRequest

// string name = 1;
inline void WaitExecutionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WaitExecutionRequest::name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.WaitExecutionRequest.name)
  return _internal_name();
}
inline void WaitExecutionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.WaitExecutionRequest.name)
}
inline std::string* WaitExecutionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.WaitExecutionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& WaitExecutionRequest::_internal_name() const {
  return name_.Get();
}
inline void WaitExecutionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WaitExecutionRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.WaitExecutionRequest.name)
}
inline void WaitExecutionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.WaitExecutionRequest.name)
}
inline void WaitExecutionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.WaitExecutionRequest.name)
}
inline std::string* WaitExecutionRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WaitExecutionRequest::release_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.WaitExecutionRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WaitExecutionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.WaitExecutionRequest.name)
}

// -------------------------------------------------------------------

// GetActionResultRequest

// string instance_name = 1;
inline void GetActionResultRequest::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& GetActionResultRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetActionResultRequest.instance_name)
  return _internal_instance_name();
}
inline void GetActionResultRequest::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetActionResultRequest.instance_name)
}
inline std::string* GetActionResultRequest::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetActionResultRequest.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& GetActionResultRequest::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void GetActionResultRequest::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetActionResultRequest::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.GetActionResultRequest.instance_name)
}
inline void GetActionResultRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.GetActionResultRequest.instance_name)
}
inline void GetActionResultRequest::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.GetActionResultRequest.instance_name)
}
inline std::string* GetActionResultRequest::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetActionResultRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.GetActionResultRequest.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetActionResultRequest::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.GetActionResultRequest.instance_name)
}

// .build.bazel.remote.execution.v2.Digest action_digest = 2;
inline bool GetActionResultRequest::_internal_has_action_digest() const {
  return this != internal_default_instance() && action_digest_ != nullptr;
}
inline bool GetActionResultRequest::has_action_digest() const {
  return _internal_has_action_digest();
}
inline void GetActionResultRequest::clear_action_digest() {
  if (GetArena() == nullptr && action_digest_ != nullptr) {
    delete action_digest_;
  }
  action_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& GetActionResultRequest::_internal_action_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = action_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& GetActionResultRequest::action_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetActionResultRequest.action_digest)
  return _internal_action_digest();
}
inline void GetActionResultRequest::unsafe_arena_set_allocated_action_digest(
    ::build::bazel::remote::execution::v2::Digest* action_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_digest_);
  }
  action_digest_ = action_digest;
  if (action_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.GetActionResultRequest.action_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* GetActionResultRequest::release_action_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = action_digest_;
  action_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* GetActionResultRequest::unsafe_arena_release_action_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.GetActionResultRequest.action_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = action_digest_;
  action_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* GetActionResultRequest::_internal_mutable_action_digest() {
  
  if (action_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    action_digest_ = p;
  }
  return action_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* GetActionResultRequest::mutable_action_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetActionResultRequest.action_digest)
  return _internal_mutable_action_digest();
}
inline void GetActionResultRequest::set_allocated_action_digest(::build::bazel::remote::execution::v2::Digest* action_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_digest_;
  }
  if (action_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_digest);
    if (message_arena != submessage_arena) {
      action_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_digest, submessage_arena);
    }
    
  } else {
    
  }
  action_digest_ = action_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.GetActionResultRequest.action_digest)
}

// bool inline_stdout = 3;
inline void GetActionResultRequest::clear_inline_stdout() {
  inline_stdout_ = false;
}
inline bool GetActionResultRequest::_internal_inline_stdout() const {
  return inline_stdout_;
}
inline bool GetActionResultRequest::inline_stdout() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetActionResultRequest.inline_stdout)
  return _internal_inline_stdout();
}
inline void GetActionResultRequest::_internal_set_inline_stdout(bool value) {
  
  inline_stdout_ = value;
}
inline void GetActionResultRequest::set_inline_stdout(bool value) {
  _internal_set_inline_stdout(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetActionResultRequest.inline_stdout)
}

// bool inline_stderr = 4;
inline void GetActionResultRequest::clear_inline_stderr() {
  inline_stderr_ = false;
}
inline bool GetActionResultRequest::_internal_inline_stderr() const {
  return inline_stderr_;
}
inline bool GetActionResultRequest::inline_stderr() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetActionResultRequest.inline_stderr)
  return _internal_inline_stderr();
}
inline void GetActionResultRequest::_internal_set_inline_stderr(bool value) {
  
  inline_stderr_ = value;
}
inline void GetActionResultRequest::set_inline_stderr(bool value) {
  _internal_set_inline_stderr(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetActionResultRequest.inline_stderr)
}

// repeated string inline_output_files = 5;
inline int GetActionResultRequest::_internal_inline_output_files_size() const {
  return inline_output_files_.size();
}
inline int GetActionResultRequest::inline_output_files_size() const {
  return _internal_inline_output_files_size();
}
inline void GetActionResultRequest::clear_inline_output_files() {
  inline_output_files_.Clear();
}
inline std::string* GetActionResultRequest::add_inline_output_files() {
  // @@protoc_insertion_point(field_add_mutable:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
  return _internal_add_inline_output_files();
}
inline const std::string& GetActionResultRequest::_internal_inline_output_files(int index) const {
  return inline_output_files_.Get(index);
}
inline const std::string& GetActionResultRequest::inline_output_files(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
  return _internal_inline_output_files(index);
}
inline std::string* GetActionResultRequest::mutable_inline_output_files(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
  return inline_output_files_.Mutable(index);
}
inline void GetActionResultRequest::set_inline_output_files(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
  inline_output_files_.Mutable(index)->assign(value);
}
inline void GetActionResultRequest::set_inline_output_files(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
  inline_output_files_.Mutable(index)->assign(std::move(value));
}
inline void GetActionResultRequest::set_inline_output_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inline_output_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
}
inline void GetActionResultRequest::set_inline_output_files(int index, const char* value, size_t size) {
  inline_output_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
}
inline std::string* GetActionResultRequest::_internal_add_inline_output_files() {
  return inline_output_files_.Add();
}
inline void GetActionResultRequest::add_inline_output_files(const std::string& value) {
  inline_output_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
}
inline void GetActionResultRequest::add_inline_output_files(std::string&& value) {
  inline_output_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
}
inline void GetActionResultRequest::add_inline_output_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inline_output_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
}
inline void GetActionResultRequest::add_inline_output_files(const char* value, size_t size) {
  inline_output_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetActionResultRequest::inline_output_files() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
  return inline_output_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetActionResultRequest::mutable_inline_output_files() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.GetActionResultRequest.inline_output_files)
  return &inline_output_files_;
}

// -------------------------------------------------------------------

// UpdateActionResultRequest

// string instance_name = 1;
inline void UpdateActionResultRequest::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& UpdateActionResultRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.UpdateActionResultRequest.instance_name)
  return _internal_instance_name();
}
inline void UpdateActionResultRequest::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.UpdateActionResultRequest.instance_name)
}
inline std::string* UpdateActionResultRequest::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.UpdateActionResultRequest.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& UpdateActionResultRequest::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void UpdateActionResultRequest::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateActionResultRequest::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.UpdateActionResultRequest.instance_name)
}
inline void UpdateActionResultRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.UpdateActionResultRequest.instance_name)
}
inline void UpdateActionResultRequest::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.UpdateActionResultRequest.instance_name)
}
inline std::string* UpdateActionResultRequest::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateActionResultRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.UpdateActionResultRequest.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateActionResultRequest::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.UpdateActionResultRequest.instance_name)
}

// .build.bazel.remote.execution.v2.Digest action_digest = 2;
inline bool UpdateActionResultRequest::_internal_has_action_digest() const {
  return this != internal_default_instance() && action_digest_ != nullptr;
}
inline bool UpdateActionResultRequest::has_action_digest() const {
  return _internal_has_action_digest();
}
inline void UpdateActionResultRequest::clear_action_digest() {
  if (GetArena() == nullptr && action_digest_ != nullptr) {
    delete action_digest_;
  }
  action_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& UpdateActionResultRequest::_internal_action_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = action_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& UpdateActionResultRequest::action_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_digest)
  return _internal_action_digest();
}
inline void UpdateActionResultRequest::unsafe_arena_set_allocated_action_digest(
    ::build::bazel::remote::execution::v2::Digest* action_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_digest_);
  }
  action_digest_ = action_digest;
  if (action_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* UpdateActionResultRequest::release_action_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = action_digest_;
  action_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* UpdateActionResultRequest::unsafe_arena_release_action_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = action_digest_;
  action_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* UpdateActionResultRequest::_internal_mutable_action_digest() {
  
  if (action_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    action_digest_ = p;
  }
  return action_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* UpdateActionResultRequest::mutable_action_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_digest)
  return _internal_mutable_action_digest();
}
inline void UpdateActionResultRequest::set_allocated_action_digest(::build::bazel::remote::execution::v2::Digest* action_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_digest_;
  }
  if (action_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_digest);
    if (message_arena != submessage_arena) {
      action_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_digest, submessage_arena);
    }
    
  } else {
    
  }
  action_digest_ = action_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_digest)
}

// .build.bazel.remote.execution.v2.ActionResult action_result = 3;
inline bool UpdateActionResultRequest::_internal_has_action_result() const {
  return this != internal_default_instance() && action_result_ != nullptr;
}
inline bool UpdateActionResultRequest::has_action_result() const {
  return _internal_has_action_result();
}
inline void UpdateActionResultRequest::clear_action_result() {
  if (GetArena() == nullptr && action_result_ != nullptr) {
    delete action_result_;
  }
  action_result_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ActionResult& UpdateActionResultRequest::_internal_action_result() const {
  const ::build::bazel::remote::execution::v2::ActionResult* p = action_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ActionResult&>(
      ::build::bazel::remote::execution::v2::_ActionResult_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ActionResult& UpdateActionResultRequest::action_result() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_result)
  return _internal_action_result();
}
inline void UpdateActionResultRequest::unsafe_arena_set_allocated_action_result(
    ::build::bazel::remote::execution::v2::ActionResult* action_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_result_);
  }
  action_result_ = action_result;
  if (action_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_result)
}
inline ::build::bazel::remote::execution::v2::ActionResult* UpdateActionResultRequest::release_action_result() {
  
  ::build::bazel::remote::execution::v2::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ActionResult* UpdateActionResultRequest::unsafe_arena_release_action_result() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_result)
  
  ::build::bazel::remote::execution::v2::ActionResult* temp = action_result_;
  action_result_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ActionResult* UpdateActionResultRequest::_internal_mutable_action_result() {
  
  if (action_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ActionResult>(GetArena());
    action_result_ = p;
  }
  return action_result_;
}
inline ::build::bazel::remote::execution::v2::ActionResult* UpdateActionResultRequest::mutable_action_result() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_result)
  return _internal_mutable_action_result();
}
inline void UpdateActionResultRequest::set_allocated_action_result(::build::bazel::remote::execution::v2::ActionResult* action_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_result_;
  }
  if (action_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_result);
    if (message_arena != submessage_arena) {
      action_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_result, submessage_arena);
    }
    
  } else {
    
  }
  action_result_ = action_result;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.UpdateActionResultRequest.action_result)
}

// .build.bazel.remote.execution.v2.ResultsCachePolicy results_cache_policy = 4;
inline bool UpdateActionResultRequest::_internal_has_results_cache_policy() const {
  return this != internal_default_instance() && results_cache_policy_ != nullptr;
}
inline bool UpdateActionResultRequest::has_results_cache_policy() const {
  return _internal_has_results_cache_policy();
}
inline void UpdateActionResultRequest::clear_results_cache_policy() {
  if (GetArena() == nullptr && results_cache_policy_ != nullptr) {
    delete results_cache_policy_;
  }
  results_cache_policy_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ResultsCachePolicy& UpdateActionResultRequest::_internal_results_cache_policy() const {
  const ::build::bazel::remote::execution::v2::ResultsCachePolicy* p = results_cache_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ResultsCachePolicy&>(
      ::build::bazel::remote::execution::v2::_ResultsCachePolicy_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ResultsCachePolicy& UpdateActionResultRequest::results_cache_policy() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.UpdateActionResultRequest.results_cache_policy)
  return _internal_results_cache_policy();
}
inline void UpdateActionResultRequest::unsafe_arena_set_allocated_results_cache_policy(
    ::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_cache_policy_);
  }
  results_cache_policy_ = results_cache_policy;
  if (results_cache_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.UpdateActionResultRequest.results_cache_policy)
}
inline ::build::bazel::remote::execution::v2::ResultsCachePolicy* UpdateActionResultRequest::release_results_cache_policy() {
  
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* temp = results_cache_policy_;
  results_cache_policy_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ResultsCachePolicy* UpdateActionResultRequest::unsafe_arena_release_results_cache_policy() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.UpdateActionResultRequest.results_cache_policy)
  
  ::build::bazel::remote::execution::v2::ResultsCachePolicy* temp = results_cache_policy_;
  results_cache_policy_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ResultsCachePolicy* UpdateActionResultRequest::_internal_mutable_results_cache_policy() {
  
  if (results_cache_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ResultsCachePolicy>(GetArena());
    results_cache_policy_ = p;
  }
  return results_cache_policy_;
}
inline ::build::bazel::remote::execution::v2::ResultsCachePolicy* UpdateActionResultRequest::mutable_results_cache_policy() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.UpdateActionResultRequest.results_cache_policy)
  return _internal_mutable_results_cache_policy();
}
inline void UpdateActionResultRequest::set_allocated_results_cache_policy(::build::bazel::remote::execution::v2::ResultsCachePolicy* results_cache_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete results_cache_policy_;
  }
  if (results_cache_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(results_cache_policy);
    if (message_arena != submessage_arena) {
      results_cache_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results_cache_policy, submessage_arena);
    }
    
  } else {
    
  }
  results_cache_policy_ = results_cache_policy;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.UpdateActionResultRequest.results_cache_policy)
}

// -------------------------------------------------------------------

// FindMissingBlobsRequest

// string instance_name = 1;
inline void FindMissingBlobsRequest::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& FindMissingBlobsRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.FindMissingBlobsRequest.instance_name)
  return _internal_instance_name();
}
inline void FindMissingBlobsRequest::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.FindMissingBlobsRequest.instance_name)
}
inline std::string* FindMissingBlobsRequest::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.FindMissingBlobsRequest.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& FindMissingBlobsRequest::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void FindMissingBlobsRequest::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FindMissingBlobsRequest::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.FindMissingBlobsRequest.instance_name)
}
inline void FindMissingBlobsRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.FindMissingBlobsRequest.instance_name)
}
inline void FindMissingBlobsRequest::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.FindMissingBlobsRequest.instance_name)
}
inline std::string* FindMissingBlobsRequest::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FindMissingBlobsRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.FindMissingBlobsRequest.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FindMissingBlobsRequest::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.FindMissingBlobsRequest.instance_name)
}

// repeated .build.bazel.remote.execution.v2.Digest blob_digests = 2;
inline int FindMissingBlobsRequest::_internal_blob_digests_size() const {
  return blob_digests_.size();
}
inline int FindMissingBlobsRequest::blob_digests_size() const {
  return _internal_blob_digests_size();
}
inline void FindMissingBlobsRequest::clear_blob_digests() {
  blob_digests_.Clear();
}
inline ::build::bazel::remote::execution::v2::Digest* FindMissingBlobsRequest::mutable_blob_digests(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.FindMissingBlobsRequest.blob_digests)
  return blob_digests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >*
FindMissingBlobsRequest::mutable_blob_digests() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.FindMissingBlobsRequest.blob_digests)
  return &blob_digests_;
}
inline const ::build::bazel::remote::execution::v2::Digest& FindMissingBlobsRequest::_internal_blob_digests(int index) const {
  return blob_digests_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::Digest& FindMissingBlobsRequest::blob_digests(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.FindMissingBlobsRequest.blob_digests)
  return _internal_blob_digests(index);
}
inline ::build::bazel::remote::execution::v2::Digest* FindMissingBlobsRequest::_internal_add_blob_digests() {
  return blob_digests_.Add();
}
inline ::build::bazel::remote::execution::v2::Digest* FindMissingBlobsRequest::add_blob_digests() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.FindMissingBlobsRequest.blob_digests)
  return _internal_add_blob_digests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >&
FindMissingBlobsRequest::blob_digests() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.FindMissingBlobsRequest.blob_digests)
  return blob_digests_;
}

// -------------------------------------------------------------------

// FindMissingBlobsResponse

// repeated .build.bazel.remote.execution.v2.Digest missing_blob_digests = 2;
inline int FindMissingBlobsResponse::_internal_missing_blob_digests_size() const {
  return missing_blob_digests_.size();
}
inline int FindMissingBlobsResponse::missing_blob_digests_size() const {
  return _internal_missing_blob_digests_size();
}
inline void FindMissingBlobsResponse::clear_missing_blob_digests() {
  missing_blob_digests_.Clear();
}
inline ::build::bazel::remote::execution::v2::Digest* FindMissingBlobsResponse::mutable_missing_blob_digests(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.FindMissingBlobsResponse.missing_blob_digests)
  return missing_blob_digests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >*
FindMissingBlobsResponse::mutable_missing_blob_digests() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.FindMissingBlobsResponse.missing_blob_digests)
  return &missing_blob_digests_;
}
inline const ::build::bazel::remote::execution::v2::Digest& FindMissingBlobsResponse::_internal_missing_blob_digests(int index) const {
  return missing_blob_digests_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::Digest& FindMissingBlobsResponse::missing_blob_digests(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.FindMissingBlobsResponse.missing_blob_digests)
  return _internal_missing_blob_digests(index);
}
inline ::build::bazel::remote::execution::v2::Digest* FindMissingBlobsResponse::_internal_add_missing_blob_digests() {
  return missing_blob_digests_.Add();
}
inline ::build::bazel::remote::execution::v2::Digest* FindMissingBlobsResponse::add_missing_blob_digests() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.FindMissingBlobsResponse.missing_blob_digests)
  return _internal_add_missing_blob_digests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >&
FindMissingBlobsResponse::missing_blob_digests() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.FindMissingBlobsResponse.missing_blob_digests)
  return missing_blob_digests_;
}

// -------------------------------------------------------------------

// BatchUpdateBlobsRequest_Request

// .build.bazel.remote.execution.v2.Digest digest = 1;
inline bool BatchUpdateBlobsRequest_Request::_internal_has_digest() const {
  return this != internal_default_instance() && digest_ != nullptr;
}
inline bool BatchUpdateBlobsRequest_Request::has_digest() const {
  return _internal_has_digest();
}
inline void BatchUpdateBlobsRequest_Request::clear_digest() {
  if (GetArena() == nullptr && digest_ != nullptr) {
    delete digest_;
  }
  digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& BatchUpdateBlobsRequest_Request::_internal_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& BatchUpdateBlobsRequest_Request::digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.digest)
  return _internal_digest();
}
inline void BatchUpdateBlobsRequest_Request::unsafe_arena_set_allocated_digest(
    ::build::bazel::remote::execution::v2::Digest* digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digest_);
  }
  digest_ = digest;
  if (digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.digest)
}
inline ::build::bazel::remote::execution::v2::Digest* BatchUpdateBlobsRequest_Request::release_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchUpdateBlobsRequest_Request::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchUpdateBlobsRequest_Request::_internal_mutable_digest() {
  
  if (digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    digest_ = p;
  }
  return digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchUpdateBlobsRequest_Request::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.digest)
  return _internal_mutable_digest();
}
inline void BatchUpdateBlobsRequest_Request::set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete digest_;
  }
  if (digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digest);
    if (message_arena != submessage_arena) {
      digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.digest)
}

// bytes data = 2;
inline void BatchUpdateBlobsRequest_Request::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BatchUpdateBlobsRequest_Request::data() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.data)
  return _internal_data();
}
inline void BatchUpdateBlobsRequest_Request::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.data)
}
inline std::string* BatchUpdateBlobsRequest_Request::mutable_data() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.data)
  return _internal_mutable_data();
}
inline const std::string& BatchUpdateBlobsRequest_Request::_internal_data() const {
  return data_.Get();
}
inline void BatchUpdateBlobsRequest_Request::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchUpdateBlobsRequest_Request::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.data)
}
inline void BatchUpdateBlobsRequest_Request::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.data)
}
inline void BatchUpdateBlobsRequest_Request::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.data)
}
inline std::string* BatchUpdateBlobsRequest_Request::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchUpdateBlobsRequest_Request::release_data() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchUpdateBlobsRequest_Request::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request.data)
}

// -------------------------------------------------------------------

// BatchUpdateBlobsRequest

// string instance_name = 1;
inline void BatchUpdateBlobsRequest::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& BatchUpdateBlobsRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.instance_name)
  return _internal_instance_name();
}
inline void BatchUpdateBlobsRequest::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.instance_name)
}
inline std::string* BatchUpdateBlobsRequest::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& BatchUpdateBlobsRequest::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void BatchUpdateBlobsRequest::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchUpdateBlobsRequest::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.instance_name)
}
inline void BatchUpdateBlobsRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.instance_name)
}
inline void BatchUpdateBlobsRequest::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.instance_name)
}
inline std::string* BatchUpdateBlobsRequest::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchUpdateBlobsRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchUpdateBlobsRequest::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.instance_name)
}

// repeated .build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.Request requests = 2;
inline int BatchUpdateBlobsRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BatchUpdateBlobsRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BatchUpdateBlobsRequest::clear_requests() {
  requests_.Clear();
}
inline ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request* BatchUpdateBlobsRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request >*
BatchUpdateBlobsRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.requests)
  return &requests_;
}
inline const ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request& BatchUpdateBlobsRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request& BatchUpdateBlobsRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.requests)
  return _internal_requests(index);
}
inline ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request* BatchUpdateBlobsRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request* BatchUpdateBlobsRequest::add_requests() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsRequest_Request >&
BatchUpdateBlobsRequest::requests() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.BatchUpdateBlobsRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// BatchUpdateBlobsResponse_Response

// .build.bazel.remote.execution.v2.Digest digest = 1;
inline bool BatchUpdateBlobsResponse_Response::_internal_has_digest() const {
  return this != internal_default_instance() && digest_ != nullptr;
}
inline bool BatchUpdateBlobsResponse_Response::has_digest() const {
  return _internal_has_digest();
}
inline void BatchUpdateBlobsResponse_Response::clear_digest() {
  if (GetArena() == nullptr && digest_ != nullptr) {
    delete digest_;
  }
  digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& BatchUpdateBlobsResponse_Response::_internal_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& BatchUpdateBlobsResponse_Response::digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.digest)
  return _internal_digest();
}
inline void BatchUpdateBlobsResponse_Response::unsafe_arena_set_allocated_digest(
    ::build::bazel::remote::execution::v2::Digest* digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digest_);
  }
  digest_ = digest;
  if (digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.digest)
}
inline ::build::bazel::remote::execution::v2::Digest* BatchUpdateBlobsResponse_Response::release_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchUpdateBlobsResponse_Response::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchUpdateBlobsResponse_Response::_internal_mutable_digest() {
  
  if (digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    digest_ = p;
  }
  return digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchUpdateBlobsResponse_Response::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.digest)
  return _internal_mutable_digest();
}
inline void BatchUpdateBlobsResponse_Response::set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete digest_;
  }
  if (digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digest);
    if (message_arena != submessage_arena) {
      digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.digest)
}

// .google.rpc.Status status = 2;
inline bool BatchUpdateBlobsResponse_Response::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BatchUpdateBlobsResponse_Response::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& BatchUpdateBlobsResponse_Response::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& BatchUpdateBlobsResponse_Response::status() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.status)
  return _internal_status();
}
inline void BatchUpdateBlobsResponse_Response::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.status)
}
inline ::google::rpc::Status* BatchUpdateBlobsResponse_Response::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* BatchUpdateBlobsResponse_Response::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* BatchUpdateBlobsResponse_Response::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* BatchUpdateBlobsResponse_Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.status)
  return _internal_mutable_status();
}
inline void BatchUpdateBlobsResponse_Response::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response.status)
}

// -------------------------------------------------------------------

// BatchUpdateBlobsResponse

// repeated .build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.Response responses = 1;
inline int BatchUpdateBlobsResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BatchUpdateBlobsResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BatchUpdateBlobsResponse::clear_responses() {
  responses_.Clear();
}
inline ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response* BatchUpdateBlobsResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response >*
BatchUpdateBlobsResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.responses)
  return &responses_;
}
inline const ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response& BatchUpdateBlobsResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response& BatchUpdateBlobsResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.responses)
  return _internal_responses(index);
}
inline ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response* BatchUpdateBlobsResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response* BatchUpdateBlobsResponse::add_responses() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchUpdateBlobsResponse_Response >&
BatchUpdateBlobsResponse::responses() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.BatchUpdateBlobsResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// BatchReadBlobsRequest

// string instance_name = 1;
inline void BatchReadBlobsRequest::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& BatchReadBlobsRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchReadBlobsRequest.instance_name)
  return _internal_instance_name();
}
inline void BatchReadBlobsRequest::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.BatchReadBlobsRequest.instance_name)
}
inline std::string* BatchReadBlobsRequest::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchReadBlobsRequest.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& BatchReadBlobsRequest::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void BatchReadBlobsRequest::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchReadBlobsRequest::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.BatchReadBlobsRequest.instance_name)
}
inline void BatchReadBlobsRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.BatchReadBlobsRequest.instance_name)
}
inline void BatchReadBlobsRequest::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.BatchReadBlobsRequest.instance_name)
}
inline std::string* BatchReadBlobsRequest::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchReadBlobsRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchReadBlobsRequest.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchReadBlobsRequest::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchReadBlobsRequest.instance_name)
}

// repeated .build.bazel.remote.execution.v2.Digest digests = 2;
inline int BatchReadBlobsRequest::_internal_digests_size() const {
  return digests_.size();
}
inline int BatchReadBlobsRequest::digests_size() const {
  return _internal_digests_size();
}
inline void BatchReadBlobsRequest::clear_digests() {
  digests_.Clear();
}
inline ::build::bazel::remote::execution::v2::Digest* BatchReadBlobsRequest::mutable_digests(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchReadBlobsRequest.digests)
  return digests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >*
BatchReadBlobsRequest::mutable_digests() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.BatchReadBlobsRequest.digests)
  return &digests_;
}
inline const ::build::bazel::remote::execution::v2::Digest& BatchReadBlobsRequest::_internal_digests(int index) const {
  return digests_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::Digest& BatchReadBlobsRequest::digests(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchReadBlobsRequest.digests)
  return _internal_digests(index);
}
inline ::build::bazel::remote::execution::v2::Digest* BatchReadBlobsRequest::_internal_add_digests() {
  return digests_.Add();
}
inline ::build::bazel::remote::execution::v2::Digest* BatchReadBlobsRequest::add_digests() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.BatchReadBlobsRequest.digests)
  return _internal_add_digests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Digest >&
BatchReadBlobsRequest::digests() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.BatchReadBlobsRequest.digests)
  return digests_;
}

// -------------------------------------------------------------------

// BatchReadBlobsResponse_Response

// .build.bazel.remote.execution.v2.Digest digest = 1;
inline bool BatchReadBlobsResponse_Response::_internal_has_digest() const {
  return this != internal_default_instance() && digest_ != nullptr;
}
inline bool BatchReadBlobsResponse_Response::has_digest() const {
  return _internal_has_digest();
}
inline void BatchReadBlobsResponse_Response::clear_digest() {
  if (GetArena() == nullptr && digest_ != nullptr) {
    delete digest_;
  }
  digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& BatchReadBlobsResponse_Response::_internal_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& BatchReadBlobsResponse_Response::digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.digest)
  return _internal_digest();
}
inline void BatchReadBlobsResponse_Response::unsafe_arena_set_allocated_digest(
    ::build::bazel::remote::execution::v2::Digest* digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(digest_);
  }
  digest_ = digest;
  if (digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.digest)
}
inline ::build::bazel::remote::execution::v2::Digest* BatchReadBlobsResponse_Response::release_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchReadBlobsResponse_Response::unsafe_arena_release_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = digest_;
  digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchReadBlobsResponse_Response::_internal_mutable_digest() {
  
  if (digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    digest_ = p;
  }
  return digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* BatchReadBlobsResponse_Response::mutable_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.digest)
  return _internal_mutable_digest();
}
inline void BatchReadBlobsResponse_Response::set_allocated_digest(::build::bazel::remote::execution::v2::Digest* digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete digest_;
  }
  if (digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(digest);
    if (message_arena != submessage_arena) {
      digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, digest, submessage_arena);
    }
    
  } else {
    
  }
  digest_ = digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.digest)
}

// bytes data = 2;
inline void BatchReadBlobsResponse_Response::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& BatchReadBlobsResponse_Response::data() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.data)
  return _internal_data();
}
inline void BatchReadBlobsResponse_Response::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.data)
}
inline std::string* BatchReadBlobsResponse_Response::mutable_data() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.data)
  return _internal_mutable_data();
}
inline const std::string& BatchReadBlobsResponse_Response::_internal_data() const {
  return data_.Get();
}
inline void BatchReadBlobsResponse_Response::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BatchReadBlobsResponse_Response::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.data)
}
inline void BatchReadBlobsResponse_Response::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.data)
}
inline void BatchReadBlobsResponse_Response::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.data)
}
inline std::string* BatchReadBlobsResponse_Response::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BatchReadBlobsResponse_Response::release_data() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BatchReadBlobsResponse_Response::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.data)
}

// .google.rpc.Status status = 3;
inline bool BatchReadBlobsResponse_Response::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BatchReadBlobsResponse_Response::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& BatchReadBlobsResponse_Response::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& BatchReadBlobsResponse_Response::status() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.status)
  return _internal_status();
}
inline void BatchReadBlobsResponse_Response::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.status)
}
inline ::google::rpc::Status* BatchReadBlobsResponse_Response::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* BatchReadBlobsResponse_Response::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* BatchReadBlobsResponse_Response::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* BatchReadBlobsResponse_Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.status)
  return _internal_mutable_status();
}
inline void BatchReadBlobsResponse_Response::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response.status)
}

// -------------------------------------------------------------------

// BatchReadBlobsResponse

// repeated .build.bazel.remote.execution.v2.BatchReadBlobsResponse.Response responses = 1;
inline int BatchReadBlobsResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BatchReadBlobsResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BatchReadBlobsResponse::clear_responses() {
  responses_.Clear();
}
inline ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response* BatchReadBlobsResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.BatchReadBlobsResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response >*
BatchReadBlobsResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.BatchReadBlobsResponse.responses)
  return &responses_;
}
inline const ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response& BatchReadBlobsResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response& BatchReadBlobsResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.BatchReadBlobsResponse.responses)
  return _internal_responses(index);
}
inline ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response* BatchReadBlobsResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response* BatchReadBlobsResponse::add_responses() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.BatchReadBlobsResponse.responses)
  return _internal_add_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::BatchReadBlobsResponse_Response >&
BatchReadBlobsResponse::responses() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.BatchReadBlobsResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// GetTreeRequest

// string instance_name = 1;
inline void GetTreeRequest::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& GetTreeRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetTreeRequest.instance_name)
  return _internal_instance_name();
}
inline void GetTreeRequest::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetTreeRequest.instance_name)
}
inline std::string* GetTreeRequest::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetTreeRequest.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& GetTreeRequest::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void GetTreeRequest::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTreeRequest::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.GetTreeRequest.instance_name)
}
inline void GetTreeRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.GetTreeRequest.instance_name)
}
inline void GetTreeRequest::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.GetTreeRequest.instance_name)
}
inline std::string* GetTreeRequest::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTreeRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.GetTreeRequest.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTreeRequest::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.GetTreeRequest.instance_name)
}

// .build.bazel.remote.execution.v2.Digest root_digest = 2;
inline bool GetTreeRequest::_internal_has_root_digest() const {
  return this != internal_default_instance() && root_digest_ != nullptr;
}
inline bool GetTreeRequest::has_root_digest() const {
  return _internal_has_root_digest();
}
inline void GetTreeRequest::clear_root_digest() {
  if (GetArena() == nullptr && root_digest_ != nullptr) {
    delete root_digest_;
  }
  root_digest_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::Digest& GetTreeRequest::_internal_root_digest() const {
  const ::build::bazel::remote::execution::v2::Digest* p = root_digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::Digest&>(
      ::build::bazel::remote::execution::v2::_Digest_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::Digest& GetTreeRequest::root_digest() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetTreeRequest.root_digest)
  return _internal_root_digest();
}
inline void GetTreeRequest::unsafe_arena_set_allocated_root_digest(
    ::build::bazel::remote::execution::v2::Digest* root_digest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_digest_);
  }
  root_digest_ = root_digest;
  if (root_digest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.GetTreeRequest.root_digest)
}
inline ::build::bazel::remote::execution::v2::Digest* GetTreeRequest::release_root_digest() {
  
  ::build::bazel::remote::execution::v2::Digest* temp = root_digest_;
  root_digest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* GetTreeRequest::unsafe_arena_release_root_digest() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.GetTreeRequest.root_digest)
  
  ::build::bazel::remote::execution::v2::Digest* temp = root_digest_;
  root_digest_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::Digest* GetTreeRequest::_internal_mutable_root_digest() {
  
  if (root_digest_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::Digest>(GetArena());
    root_digest_ = p;
  }
  return root_digest_;
}
inline ::build::bazel::remote::execution::v2::Digest* GetTreeRequest::mutable_root_digest() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetTreeRequest.root_digest)
  return _internal_mutable_root_digest();
}
inline void GetTreeRequest::set_allocated_root_digest(::build::bazel::remote::execution::v2::Digest* root_digest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_digest_;
  }
  if (root_digest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_digest);
    if (message_arena != submessage_arena) {
      root_digest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_digest, submessage_arena);
    }
    
  } else {
    
  }
  root_digest_ = root_digest;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.GetTreeRequest.root_digest)
}

// int32 page_size = 3;
inline void GetTreeRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTreeRequest::page_size() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetTreeRequest.page_size)
  return _internal_page_size();
}
inline void GetTreeRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void GetTreeRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetTreeRequest.page_size)
}

// string page_token = 4;
inline void GetTreeRequest::clear_page_token() {
  page_token_.ClearToEmpty();
}
inline const std::string& GetTreeRequest::page_token() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetTreeRequest.page_token)
  return _internal_page_token();
}
inline void GetTreeRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetTreeRequest.page_token)
}
inline std::string* GetTreeRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetTreeRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& GetTreeRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void GetTreeRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTreeRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.GetTreeRequest.page_token)
}
inline void GetTreeRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.GetTreeRequest.page_token)
}
inline void GetTreeRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.GetTreeRequest.page_token)
}
inline std::string* GetTreeRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTreeRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.GetTreeRequest.page_token)
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTreeRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.GetTreeRequest.page_token)
}

// -------------------------------------------------------------------

// GetTreeResponse

// repeated .build.bazel.remote.execution.v2.Directory directories = 1;
inline int GetTreeResponse::_internal_directories_size() const {
  return directories_.size();
}
inline int GetTreeResponse::directories_size() const {
  return _internal_directories_size();
}
inline void GetTreeResponse::clear_directories() {
  directories_.Clear();
}
inline ::build::bazel::remote::execution::v2::Directory* GetTreeResponse::mutable_directories(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetTreeResponse.directories)
  return directories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory >*
GetTreeResponse::mutable_directories() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.GetTreeResponse.directories)
  return &directories_;
}
inline const ::build::bazel::remote::execution::v2::Directory& GetTreeResponse::_internal_directories(int index) const {
  return directories_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::Directory& GetTreeResponse::directories(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetTreeResponse.directories)
  return _internal_directories(index);
}
inline ::build::bazel::remote::execution::v2::Directory* GetTreeResponse::_internal_add_directories() {
  return directories_.Add();
}
inline ::build::bazel::remote::execution::v2::Directory* GetTreeResponse::add_directories() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.GetTreeResponse.directories)
  return _internal_add_directories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::Directory >&
GetTreeResponse::directories() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.GetTreeResponse.directories)
  return directories_;
}

// string next_page_token = 2;
inline void GetTreeResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty();
}
inline const std::string& GetTreeResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetTreeResponse.next_page_token)
  return _internal_next_page_token();
}
inline void GetTreeResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetTreeResponse.next_page_token)
}
inline std::string* GetTreeResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetTreeResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& GetTreeResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void GetTreeResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetTreeResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.GetTreeResponse.next_page_token)
}
inline void GetTreeResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.GetTreeResponse.next_page_token)
}
inline void GetTreeResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.GetTreeResponse.next_page_token)
}
inline std::string* GetTreeResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetTreeResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.GetTreeResponse.next_page_token)
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTreeResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.GetTreeResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetCapabilitiesRequest

// string instance_name = 1;
inline void GetCapabilitiesRequest::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& GetCapabilitiesRequest::instance_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.GetCapabilitiesRequest.instance_name)
  return _internal_instance_name();
}
inline void GetCapabilitiesRequest::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.GetCapabilitiesRequest.instance_name)
}
inline std::string* GetCapabilitiesRequest::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.GetCapabilitiesRequest.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& GetCapabilitiesRequest::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void GetCapabilitiesRequest::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetCapabilitiesRequest::set_instance_name(std::string&& value) {
  
  instance_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.GetCapabilitiesRequest.instance_name)
}
inline void GetCapabilitiesRequest::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.GetCapabilitiesRequest.instance_name)
}
inline void GetCapabilitiesRequest::set_instance_name(const char* value,
    size_t size) {
  
  instance_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.GetCapabilitiesRequest.instance_name)
}
inline std::string* GetCapabilitiesRequest::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetCapabilitiesRequest::release_instance_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.GetCapabilitiesRequest.instance_name)
  return instance_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCapabilitiesRequest::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.GetCapabilitiesRequest.instance_name)
}

// -------------------------------------------------------------------

// ServerCapabilities

// .build.bazel.remote.execution.v2.CacheCapabilities cache_capabilities = 1;
inline bool ServerCapabilities::_internal_has_cache_capabilities() const {
  return this != internal_default_instance() && cache_capabilities_ != nullptr;
}
inline bool ServerCapabilities::has_cache_capabilities() const {
  return _internal_has_cache_capabilities();
}
inline void ServerCapabilities::clear_cache_capabilities() {
  if (GetArena() == nullptr && cache_capabilities_ != nullptr) {
    delete cache_capabilities_;
  }
  cache_capabilities_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::CacheCapabilities& ServerCapabilities::_internal_cache_capabilities() const {
  const ::build::bazel::remote::execution::v2::CacheCapabilities* p = cache_capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::CacheCapabilities&>(
      ::build::bazel::remote::execution::v2::_CacheCapabilities_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::CacheCapabilities& ServerCapabilities::cache_capabilities() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ServerCapabilities.cache_capabilities)
  return _internal_cache_capabilities();
}
inline void ServerCapabilities::unsafe_arena_set_allocated_cache_capabilities(
    ::build::bazel::remote::execution::v2::CacheCapabilities* cache_capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cache_capabilities_);
  }
  cache_capabilities_ = cache_capabilities;
  if (cache_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.cache_capabilities)
}
inline ::build::bazel::remote::execution::v2::CacheCapabilities* ServerCapabilities::release_cache_capabilities() {
  
  ::build::bazel::remote::execution::v2::CacheCapabilities* temp = cache_capabilities_;
  cache_capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::CacheCapabilities* ServerCapabilities::unsafe_arena_release_cache_capabilities() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ServerCapabilities.cache_capabilities)
  
  ::build::bazel::remote::execution::v2::CacheCapabilities* temp = cache_capabilities_;
  cache_capabilities_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::CacheCapabilities* ServerCapabilities::_internal_mutable_cache_capabilities() {
  
  if (cache_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::CacheCapabilities>(GetArena());
    cache_capabilities_ = p;
  }
  return cache_capabilities_;
}
inline ::build::bazel::remote::execution::v2::CacheCapabilities* ServerCapabilities::mutable_cache_capabilities() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ServerCapabilities.cache_capabilities)
  return _internal_mutable_cache_capabilities();
}
inline void ServerCapabilities::set_allocated_cache_capabilities(::build::bazel::remote::execution::v2::CacheCapabilities* cache_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cache_capabilities_;
  }
  if (cache_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cache_capabilities);
    if (message_arena != submessage_arena) {
      cache_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cache_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  cache_capabilities_ = cache_capabilities;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.cache_capabilities)
}

// .build.bazel.remote.execution.v2.ExecutionCapabilities execution_capabilities = 2;
inline bool ServerCapabilities::_internal_has_execution_capabilities() const {
  return this != internal_default_instance() && execution_capabilities_ != nullptr;
}
inline bool ServerCapabilities::has_execution_capabilities() const {
  return _internal_has_execution_capabilities();
}
inline void ServerCapabilities::clear_execution_capabilities() {
  if (GetArena() == nullptr && execution_capabilities_ != nullptr) {
    delete execution_capabilities_;
  }
  execution_capabilities_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ExecutionCapabilities& ServerCapabilities::_internal_execution_capabilities() const {
  const ::build::bazel::remote::execution::v2::ExecutionCapabilities* p = execution_capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ExecutionCapabilities&>(
      ::build::bazel::remote::execution::v2::_ExecutionCapabilities_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ExecutionCapabilities& ServerCapabilities::execution_capabilities() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ServerCapabilities.execution_capabilities)
  return _internal_execution_capabilities();
}
inline void ServerCapabilities::unsafe_arena_set_allocated_execution_capabilities(
    ::build::bazel::remote::execution::v2::ExecutionCapabilities* execution_capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_capabilities_);
  }
  execution_capabilities_ = execution_capabilities;
  if (execution_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.execution_capabilities)
}
inline ::build::bazel::remote::execution::v2::ExecutionCapabilities* ServerCapabilities::release_execution_capabilities() {
  
  ::build::bazel::remote::execution::v2::ExecutionCapabilities* temp = execution_capabilities_;
  execution_capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ExecutionCapabilities* ServerCapabilities::unsafe_arena_release_execution_capabilities() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ServerCapabilities.execution_capabilities)
  
  ::build::bazel::remote::execution::v2::ExecutionCapabilities* temp = execution_capabilities_;
  execution_capabilities_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ExecutionCapabilities* ServerCapabilities::_internal_mutable_execution_capabilities() {
  
  if (execution_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ExecutionCapabilities>(GetArena());
    execution_capabilities_ = p;
  }
  return execution_capabilities_;
}
inline ::build::bazel::remote::execution::v2::ExecutionCapabilities* ServerCapabilities::mutable_execution_capabilities() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ServerCapabilities.execution_capabilities)
  return _internal_mutable_execution_capabilities();
}
inline void ServerCapabilities::set_allocated_execution_capabilities(::build::bazel::remote::execution::v2::ExecutionCapabilities* execution_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete execution_capabilities_;
  }
  if (execution_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution_capabilities);
    if (message_arena != submessage_arena) {
      execution_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  execution_capabilities_ = execution_capabilities;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.execution_capabilities)
}

// .build.bazel.semver.SemVer deprecated_api_version = 3;
inline bool ServerCapabilities::_internal_has_deprecated_api_version() const {
  return this != internal_default_instance() && deprecated_api_version_ != nullptr;
}
inline bool ServerCapabilities::has_deprecated_api_version() const {
  return _internal_has_deprecated_api_version();
}
inline const ::build::bazel::semver::SemVer& ServerCapabilities::_internal_deprecated_api_version() const {
  const ::build::bazel::semver::SemVer* p = deprecated_api_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::semver::SemVer&>(
      ::build::bazel::semver::_SemVer_default_instance_);
}
inline const ::build::bazel::semver::SemVer& ServerCapabilities::deprecated_api_version() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ServerCapabilities.deprecated_api_version)
  return _internal_deprecated_api_version();
}
inline void ServerCapabilities::unsafe_arena_set_allocated_deprecated_api_version(
    ::build::bazel::semver::SemVer* deprecated_api_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_api_version_);
  }
  deprecated_api_version_ = deprecated_api_version;
  if (deprecated_api_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.deprecated_api_version)
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::release_deprecated_api_version() {
  
  ::build::bazel::semver::SemVer* temp = deprecated_api_version_;
  deprecated_api_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::unsafe_arena_release_deprecated_api_version() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ServerCapabilities.deprecated_api_version)
  
  ::build::bazel::semver::SemVer* temp = deprecated_api_version_;
  deprecated_api_version_ = nullptr;
  return temp;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::_internal_mutable_deprecated_api_version() {
  
  if (deprecated_api_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::semver::SemVer>(GetArena());
    deprecated_api_version_ = p;
  }
  return deprecated_api_version_;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::mutable_deprecated_api_version() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ServerCapabilities.deprecated_api_version)
  return _internal_mutable_deprecated_api_version();
}
inline void ServerCapabilities::set_allocated_deprecated_api_version(::build::bazel::semver::SemVer* deprecated_api_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_api_version_);
  }
  if (deprecated_api_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_api_version)->GetArena();
    if (message_arena != submessage_arena) {
      deprecated_api_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_api_version, submessage_arena);
    }
    
  } else {
    
  }
  deprecated_api_version_ = deprecated_api_version;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.deprecated_api_version)
}

// .build.bazel.semver.SemVer low_api_version = 4;
inline bool ServerCapabilities::_internal_has_low_api_version() const {
  return this != internal_default_instance() && low_api_version_ != nullptr;
}
inline bool ServerCapabilities::has_low_api_version() const {
  return _internal_has_low_api_version();
}
inline const ::build::bazel::semver::SemVer& ServerCapabilities::_internal_low_api_version() const {
  const ::build::bazel::semver::SemVer* p = low_api_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::semver::SemVer&>(
      ::build::bazel::semver::_SemVer_default_instance_);
}
inline const ::build::bazel::semver::SemVer& ServerCapabilities::low_api_version() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ServerCapabilities.low_api_version)
  return _internal_low_api_version();
}
inline void ServerCapabilities::unsafe_arena_set_allocated_low_api_version(
    ::build::bazel::semver::SemVer* low_api_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_api_version_);
  }
  low_api_version_ = low_api_version;
  if (low_api_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.low_api_version)
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::release_low_api_version() {
  
  ::build::bazel::semver::SemVer* temp = low_api_version_;
  low_api_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::unsafe_arena_release_low_api_version() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ServerCapabilities.low_api_version)
  
  ::build::bazel::semver::SemVer* temp = low_api_version_;
  low_api_version_ = nullptr;
  return temp;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::_internal_mutable_low_api_version() {
  
  if (low_api_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::semver::SemVer>(GetArena());
    low_api_version_ = p;
  }
  return low_api_version_;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::mutable_low_api_version() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ServerCapabilities.low_api_version)
  return _internal_mutable_low_api_version();
}
inline void ServerCapabilities::set_allocated_low_api_version(::build::bazel::semver::SemVer* low_api_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_api_version_);
  }
  if (low_api_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_api_version)->GetArena();
    if (message_arena != submessage_arena) {
      low_api_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_api_version, submessage_arena);
    }
    
  } else {
    
  }
  low_api_version_ = low_api_version;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.low_api_version)
}

// .build.bazel.semver.SemVer high_api_version = 5;
inline bool ServerCapabilities::_internal_has_high_api_version() const {
  return this != internal_default_instance() && high_api_version_ != nullptr;
}
inline bool ServerCapabilities::has_high_api_version() const {
  return _internal_has_high_api_version();
}
inline const ::build::bazel::semver::SemVer& ServerCapabilities::_internal_high_api_version() const {
  const ::build::bazel::semver::SemVer* p = high_api_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::semver::SemVer&>(
      ::build::bazel::semver::_SemVer_default_instance_);
}
inline const ::build::bazel::semver::SemVer& ServerCapabilities::high_api_version() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ServerCapabilities.high_api_version)
  return _internal_high_api_version();
}
inline void ServerCapabilities::unsafe_arena_set_allocated_high_api_version(
    ::build::bazel::semver::SemVer* high_api_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_api_version_);
  }
  high_api_version_ = high_api_version;
  if (high_api_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.high_api_version)
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::release_high_api_version() {
  
  ::build::bazel::semver::SemVer* temp = high_api_version_;
  high_api_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::unsafe_arena_release_high_api_version() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ServerCapabilities.high_api_version)
  
  ::build::bazel::semver::SemVer* temp = high_api_version_;
  high_api_version_ = nullptr;
  return temp;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::_internal_mutable_high_api_version() {
  
  if (high_api_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::semver::SemVer>(GetArena());
    high_api_version_ = p;
  }
  return high_api_version_;
}
inline ::build::bazel::semver::SemVer* ServerCapabilities::mutable_high_api_version() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ServerCapabilities.high_api_version)
  return _internal_mutable_high_api_version();
}
inline void ServerCapabilities::set_allocated_high_api_version(::build::bazel::semver::SemVer* high_api_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_api_version_);
  }
  if (high_api_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_api_version)->GetArena();
    if (message_arena != submessage_arena) {
      high_api_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high_api_version, submessage_arena);
    }
    
  } else {
    
  }
  high_api_version_ = high_api_version;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ServerCapabilities.high_api_version)
}

// -------------------------------------------------------------------

// DigestFunction

// -------------------------------------------------------------------

// ActionCacheUpdateCapabilities

// bool update_enabled = 1;
inline void ActionCacheUpdateCapabilities::clear_update_enabled() {
  update_enabled_ = false;
}
inline bool ActionCacheUpdateCapabilities::_internal_update_enabled() const {
  return update_enabled_;
}
inline bool ActionCacheUpdateCapabilities::update_enabled() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities.update_enabled)
  return _internal_update_enabled();
}
inline void ActionCacheUpdateCapabilities::_internal_set_update_enabled(bool value) {
  
  update_enabled_ = value;
}
inline void ActionCacheUpdateCapabilities::set_update_enabled(bool value) {
  _internal_set_update_enabled(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities.update_enabled)
}

// -------------------------------------------------------------------

// PriorityCapabilities_PriorityRange

// int32 min_priority = 1;
inline void PriorityCapabilities_PriorityRange::clear_min_priority() {
  min_priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriorityCapabilities_PriorityRange::_internal_min_priority() const {
  return min_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriorityCapabilities_PriorityRange::min_priority() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange.min_priority)
  return _internal_min_priority();
}
inline void PriorityCapabilities_PriorityRange::_internal_set_min_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_priority_ = value;
}
inline void PriorityCapabilities_PriorityRange::set_min_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_priority(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange.min_priority)
}

// int32 max_priority = 2;
inline void PriorityCapabilities_PriorityRange::clear_max_priority() {
  max_priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriorityCapabilities_PriorityRange::_internal_max_priority() const {
  return max_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PriorityCapabilities_PriorityRange::max_priority() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange.max_priority)
  return _internal_max_priority();
}
inline void PriorityCapabilities_PriorityRange::_internal_set_max_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_priority_ = value;
}
inline void PriorityCapabilities_PriorityRange::set_max_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_priority(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange.max_priority)
}

// -------------------------------------------------------------------

// PriorityCapabilities

// repeated .build.bazel.remote.execution.v2.PriorityCapabilities.PriorityRange priorities = 1;
inline int PriorityCapabilities::_internal_priorities_size() const {
  return priorities_.size();
}
inline int PriorityCapabilities::priorities_size() const {
  return _internal_priorities_size();
}
inline void PriorityCapabilities::clear_priorities() {
  priorities_.Clear();
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange* PriorityCapabilities::mutable_priorities(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.PriorityCapabilities.priorities)
  return priorities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange >*
PriorityCapabilities::mutable_priorities() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.PriorityCapabilities.priorities)
  return &priorities_;
}
inline const ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange& PriorityCapabilities::_internal_priorities(int index) const {
  return priorities_.Get(index);
}
inline const ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange& PriorityCapabilities::priorities(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.PriorityCapabilities.priorities)
  return _internal_priorities(index);
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange* PriorityCapabilities::_internal_add_priorities() {
  return priorities_.Add();
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange* PriorityCapabilities::add_priorities() {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.PriorityCapabilities.priorities)
  return _internal_add_priorities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::build::bazel::remote::execution::v2::PriorityCapabilities_PriorityRange >&
PriorityCapabilities::priorities() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.PriorityCapabilities.priorities)
  return priorities_;
}

// -------------------------------------------------------------------

// SymlinkAbsolutePathStrategy

// -------------------------------------------------------------------

// CacheCapabilities

// repeated .build.bazel.remote.execution.v2.DigestFunction.Value digest_function = 1;
inline int CacheCapabilities::_internal_digest_function_size() const {
  return digest_function_.size();
}
inline int CacheCapabilities::digest_function_size() const {
  return _internal_digest_function_size();
}
inline void CacheCapabilities::clear_digest_function() {
  digest_function_.Clear();
}
inline ::build::bazel::remote::execution::v2::DigestFunction_Value CacheCapabilities::_internal_digest_function(int index) const {
  return static_cast< ::build::bazel::remote::execution::v2::DigestFunction_Value >(digest_function_.Get(index));
}
inline ::build::bazel::remote::execution::v2::DigestFunction_Value CacheCapabilities::digest_function(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.CacheCapabilities.digest_function)
  return _internal_digest_function(index);
}
inline void CacheCapabilities::set_digest_function(int index, ::build::bazel::remote::execution::v2::DigestFunction_Value value) {
  digest_function_.Set(index, value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.CacheCapabilities.digest_function)
}
inline void CacheCapabilities::_internal_add_digest_function(::build::bazel::remote::execution::v2::DigestFunction_Value value) {
  digest_function_.Add(value);
}
inline void CacheCapabilities::add_digest_function(::build::bazel::remote::execution::v2::DigestFunction_Value value) {
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.CacheCapabilities.digest_function)
  _internal_add_digest_function(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CacheCapabilities::digest_function() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.CacheCapabilities.digest_function)
  return digest_function_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CacheCapabilities::_internal_mutable_digest_function() {
  return &digest_function_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CacheCapabilities::mutable_digest_function() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.CacheCapabilities.digest_function)
  return _internal_mutable_digest_function();
}

// .build.bazel.remote.execution.v2.ActionCacheUpdateCapabilities action_cache_update_capabilities = 2;
inline bool CacheCapabilities::_internal_has_action_cache_update_capabilities() const {
  return this != internal_default_instance() && action_cache_update_capabilities_ != nullptr;
}
inline bool CacheCapabilities::has_action_cache_update_capabilities() const {
  return _internal_has_action_cache_update_capabilities();
}
inline void CacheCapabilities::clear_action_cache_update_capabilities() {
  if (GetArena() == nullptr && action_cache_update_capabilities_ != nullptr) {
    delete action_cache_update_capabilities_;
  }
  action_cache_update_capabilities_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities& CacheCapabilities::_internal_action_cache_update_capabilities() const {
  const ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* p = action_cache_update_capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities&>(
      ::build::bazel::remote::execution::v2::_ActionCacheUpdateCapabilities_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities& CacheCapabilities::action_cache_update_capabilities() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.CacheCapabilities.action_cache_update_capabilities)
  return _internal_action_cache_update_capabilities();
}
inline void CacheCapabilities::unsafe_arena_set_allocated_action_cache_update_capabilities(
    ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* action_cache_update_capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_cache_update_capabilities_);
  }
  action_cache_update_capabilities_ = action_cache_update_capabilities;
  if (action_cache_update_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.CacheCapabilities.action_cache_update_capabilities)
}
inline ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* CacheCapabilities::release_action_cache_update_capabilities() {
  
  ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* temp = action_cache_update_capabilities_;
  action_cache_update_capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* CacheCapabilities::unsafe_arena_release_action_cache_update_capabilities() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.CacheCapabilities.action_cache_update_capabilities)
  
  ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* temp = action_cache_update_capabilities_;
  action_cache_update_capabilities_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* CacheCapabilities::_internal_mutable_action_cache_update_capabilities() {
  
  if (action_cache_update_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities>(GetArena());
    action_cache_update_capabilities_ = p;
  }
  return action_cache_update_capabilities_;
}
inline ::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* CacheCapabilities::mutable_action_cache_update_capabilities() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.CacheCapabilities.action_cache_update_capabilities)
  return _internal_mutable_action_cache_update_capabilities();
}
inline void CacheCapabilities::set_allocated_action_cache_update_capabilities(::build::bazel::remote::execution::v2::ActionCacheUpdateCapabilities* action_cache_update_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete action_cache_update_capabilities_;
  }
  if (action_cache_update_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(action_cache_update_capabilities);
    if (message_arena != submessage_arena) {
      action_cache_update_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_cache_update_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  action_cache_update_capabilities_ = action_cache_update_capabilities;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.CacheCapabilities.action_cache_update_capabilities)
}

// .build.bazel.remote.execution.v2.PriorityCapabilities cache_priority_capabilities = 3;
inline bool CacheCapabilities::_internal_has_cache_priority_capabilities() const {
  return this != internal_default_instance() && cache_priority_capabilities_ != nullptr;
}
inline bool CacheCapabilities::has_cache_priority_capabilities() const {
  return _internal_has_cache_priority_capabilities();
}
inline void CacheCapabilities::clear_cache_priority_capabilities() {
  if (GetArena() == nullptr && cache_priority_capabilities_ != nullptr) {
    delete cache_priority_capabilities_;
  }
  cache_priority_capabilities_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::PriorityCapabilities& CacheCapabilities::_internal_cache_priority_capabilities() const {
  const ::build::bazel::remote::execution::v2::PriorityCapabilities* p = cache_priority_capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::PriorityCapabilities&>(
      ::build::bazel::remote::execution::v2::_PriorityCapabilities_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::PriorityCapabilities& CacheCapabilities::cache_priority_capabilities() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.CacheCapabilities.cache_priority_capabilities)
  return _internal_cache_priority_capabilities();
}
inline void CacheCapabilities::unsafe_arena_set_allocated_cache_priority_capabilities(
    ::build::bazel::remote::execution::v2::PriorityCapabilities* cache_priority_capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cache_priority_capabilities_);
  }
  cache_priority_capabilities_ = cache_priority_capabilities;
  if (cache_priority_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.CacheCapabilities.cache_priority_capabilities)
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities* CacheCapabilities::release_cache_priority_capabilities() {
  
  ::build::bazel::remote::execution::v2::PriorityCapabilities* temp = cache_priority_capabilities_;
  cache_priority_capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities* CacheCapabilities::unsafe_arena_release_cache_priority_capabilities() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.CacheCapabilities.cache_priority_capabilities)
  
  ::build::bazel::remote::execution::v2::PriorityCapabilities* temp = cache_priority_capabilities_;
  cache_priority_capabilities_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities* CacheCapabilities::_internal_mutable_cache_priority_capabilities() {
  
  if (cache_priority_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::PriorityCapabilities>(GetArena());
    cache_priority_capabilities_ = p;
  }
  return cache_priority_capabilities_;
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities* CacheCapabilities::mutable_cache_priority_capabilities() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.CacheCapabilities.cache_priority_capabilities)
  return _internal_mutable_cache_priority_capabilities();
}
inline void CacheCapabilities::set_allocated_cache_priority_capabilities(::build::bazel::remote::execution::v2::PriorityCapabilities* cache_priority_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cache_priority_capabilities_;
  }
  if (cache_priority_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cache_priority_capabilities);
    if (message_arena != submessage_arena) {
      cache_priority_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cache_priority_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  cache_priority_capabilities_ = cache_priority_capabilities;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.CacheCapabilities.cache_priority_capabilities)
}

// int64 max_batch_total_size_bytes = 4;
inline void CacheCapabilities::clear_max_batch_total_size_bytes() {
  max_batch_total_size_bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheCapabilities::_internal_max_batch_total_size_bytes() const {
  return max_batch_total_size_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheCapabilities::max_batch_total_size_bytes() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.CacheCapabilities.max_batch_total_size_bytes)
  return _internal_max_batch_total_size_bytes();
}
inline void CacheCapabilities::_internal_set_max_batch_total_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_batch_total_size_bytes_ = value;
}
inline void CacheCapabilities::set_max_batch_total_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_batch_total_size_bytes(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.CacheCapabilities.max_batch_total_size_bytes)
}

// .build.bazel.remote.execution.v2.SymlinkAbsolutePathStrategy.Value symlink_absolute_path_strategy = 5;
inline void CacheCapabilities::clear_symlink_absolute_path_strategy() {
  symlink_absolute_path_strategy_ = 0;
}
inline ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value CacheCapabilities::_internal_symlink_absolute_path_strategy() const {
  return static_cast< ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value >(symlink_absolute_path_strategy_);
}
inline ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value CacheCapabilities::symlink_absolute_path_strategy() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.CacheCapabilities.symlink_absolute_path_strategy)
  return _internal_symlink_absolute_path_strategy();
}
inline void CacheCapabilities::_internal_set_symlink_absolute_path_strategy(::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value value) {
  
  symlink_absolute_path_strategy_ = value;
}
inline void CacheCapabilities::set_symlink_absolute_path_strategy(::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value value) {
  _internal_set_symlink_absolute_path_strategy(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.CacheCapabilities.symlink_absolute_path_strategy)
}

// -------------------------------------------------------------------

// ExecutionCapabilities

// .build.bazel.remote.execution.v2.DigestFunction.Value digest_function = 1;
inline void ExecutionCapabilities::clear_digest_function() {
  digest_function_ = 0;
}
inline ::build::bazel::remote::execution::v2::DigestFunction_Value ExecutionCapabilities::_internal_digest_function() const {
  return static_cast< ::build::bazel::remote::execution::v2::DigestFunction_Value >(digest_function_);
}
inline ::build::bazel::remote::execution::v2::DigestFunction_Value ExecutionCapabilities::digest_function() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutionCapabilities.digest_function)
  return _internal_digest_function();
}
inline void ExecutionCapabilities::_internal_set_digest_function(::build::bazel::remote::execution::v2::DigestFunction_Value value) {
  
  digest_function_ = value;
}
inline void ExecutionCapabilities::set_digest_function(::build::bazel::remote::execution::v2::DigestFunction_Value value) {
  _internal_set_digest_function(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecutionCapabilities.digest_function)
}

// bool exec_enabled = 2;
inline void ExecutionCapabilities::clear_exec_enabled() {
  exec_enabled_ = false;
}
inline bool ExecutionCapabilities::_internal_exec_enabled() const {
  return exec_enabled_;
}
inline bool ExecutionCapabilities::exec_enabled() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutionCapabilities.exec_enabled)
  return _internal_exec_enabled();
}
inline void ExecutionCapabilities::_internal_set_exec_enabled(bool value) {
  
  exec_enabled_ = value;
}
inline void ExecutionCapabilities::set_exec_enabled(bool value) {
  _internal_set_exec_enabled(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecutionCapabilities.exec_enabled)
}

// .build.bazel.remote.execution.v2.PriorityCapabilities execution_priority_capabilities = 3;
inline bool ExecutionCapabilities::_internal_has_execution_priority_capabilities() const {
  return this != internal_default_instance() && execution_priority_capabilities_ != nullptr;
}
inline bool ExecutionCapabilities::has_execution_priority_capabilities() const {
  return _internal_has_execution_priority_capabilities();
}
inline void ExecutionCapabilities::clear_execution_priority_capabilities() {
  if (GetArena() == nullptr && execution_priority_capabilities_ != nullptr) {
    delete execution_priority_capabilities_;
  }
  execution_priority_capabilities_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::PriorityCapabilities& ExecutionCapabilities::_internal_execution_priority_capabilities() const {
  const ::build::bazel::remote::execution::v2::PriorityCapabilities* p = execution_priority_capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::PriorityCapabilities&>(
      ::build::bazel::remote::execution::v2::_PriorityCapabilities_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::PriorityCapabilities& ExecutionCapabilities::execution_priority_capabilities() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutionCapabilities.execution_priority_capabilities)
  return _internal_execution_priority_capabilities();
}
inline void ExecutionCapabilities::unsafe_arena_set_allocated_execution_priority_capabilities(
    ::build::bazel::remote::execution::v2::PriorityCapabilities* execution_priority_capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_priority_capabilities_);
  }
  execution_priority_capabilities_ = execution_priority_capabilities;
  if (execution_priority_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.ExecutionCapabilities.execution_priority_capabilities)
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities* ExecutionCapabilities::release_execution_priority_capabilities() {
  
  ::build::bazel::remote::execution::v2::PriorityCapabilities* temp = execution_priority_capabilities_;
  execution_priority_capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities* ExecutionCapabilities::unsafe_arena_release_execution_priority_capabilities() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ExecutionCapabilities.execution_priority_capabilities)
  
  ::build::bazel::remote::execution::v2::PriorityCapabilities* temp = execution_priority_capabilities_;
  execution_priority_capabilities_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities* ExecutionCapabilities::_internal_mutable_execution_priority_capabilities() {
  
  if (execution_priority_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::PriorityCapabilities>(GetArena());
    execution_priority_capabilities_ = p;
  }
  return execution_priority_capabilities_;
}
inline ::build::bazel::remote::execution::v2::PriorityCapabilities* ExecutionCapabilities::mutable_execution_priority_capabilities() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutionCapabilities.execution_priority_capabilities)
  return _internal_mutable_execution_priority_capabilities();
}
inline void ExecutionCapabilities::set_allocated_execution_priority_capabilities(::build::bazel::remote::execution::v2::PriorityCapabilities* execution_priority_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete execution_priority_capabilities_;
  }
  if (execution_priority_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution_priority_capabilities);
    if (message_arena != submessage_arena) {
      execution_priority_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_priority_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  execution_priority_capabilities_ = execution_priority_capabilities;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ExecutionCapabilities.execution_priority_capabilities)
}

// repeated string supported_node_properties = 4;
inline int ExecutionCapabilities::_internal_supported_node_properties_size() const {
  return supported_node_properties_.size();
}
inline int ExecutionCapabilities::supported_node_properties_size() const {
  return _internal_supported_node_properties_size();
}
inline void ExecutionCapabilities::clear_supported_node_properties() {
  supported_node_properties_.Clear();
}
inline std::string* ExecutionCapabilities::add_supported_node_properties() {
  // @@protoc_insertion_point(field_add_mutable:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
  return _internal_add_supported_node_properties();
}
inline const std::string& ExecutionCapabilities::_internal_supported_node_properties(int index) const {
  return supported_node_properties_.Get(index);
}
inline const std::string& ExecutionCapabilities::supported_node_properties(int index) const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
  return _internal_supported_node_properties(index);
}
inline std::string* ExecutionCapabilities::mutable_supported_node_properties(int index) {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
  return supported_node_properties_.Mutable(index);
}
inline void ExecutionCapabilities::set_supported_node_properties(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
  supported_node_properties_.Mutable(index)->assign(value);
}
inline void ExecutionCapabilities::set_supported_node_properties(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
  supported_node_properties_.Mutable(index)->assign(std::move(value));
}
inline void ExecutionCapabilities::set_supported_node_properties(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supported_node_properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
}
inline void ExecutionCapabilities::set_supported_node_properties(int index, const char* value, size_t size) {
  supported_node_properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
}
inline std::string* ExecutionCapabilities::_internal_add_supported_node_properties() {
  return supported_node_properties_.Add();
}
inline void ExecutionCapabilities::add_supported_node_properties(const std::string& value) {
  supported_node_properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
}
inline void ExecutionCapabilities::add_supported_node_properties(std::string&& value) {
  supported_node_properties_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
}
inline void ExecutionCapabilities::add_supported_node_properties(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  supported_node_properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
}
inline void ExecutionCapabilities::add_supported_node_properties(const char* value, size_t size) {
  supported_node_properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExecutionCapabilities::supported_node_properties() const {
  // @@protoc_insertion_point(field_list:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
  return supported_node_properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExecutionCapabilities::mutable_supported_node_properties() {
  // @@protoc_insertion_point(field_mutable_list:build.bazel.remote.execution.v2.ExecutionCapabilities.supported_node_properties)
  return &supported_node_properties_;
}

// -------------------------------------------------------------------

// ToolDetails

// string tool_name = 1;
inline void ToolDetails::clear_tool_name() {
  tool_name_.ClearToEmpty();
}
inline const std::string& ToolDetails::tool_name() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ToolDetails.tool_name)
  return _internal_tool_name();
}
inline void ToolDetails::set_tool_name(const std::string& value) {
  _internal_set_tool_name(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ToolDetails.tool_name)
}
inline std::string* ToolDetails::mutable_tool_name() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ToolDetails.tool_name)
  return _internal_mutable_tool_name();
}
inline const std::string& ToolDetails::_internal_tool_name() const {
  return tool_name_.Get();
}
inline void ToolDetails::_internal_set_tool_name(const std::string& value) {
  
  tool_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ToolDetails::set_tool_name(std::string&& value) {
  
  tool_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ToolDetails.tool_name)
}
inline void ToolDetails::set_tool_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tool_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ToolDetails.tool_name)
}
inline void ToolDetails::set_tool_name(const char* value,
    size_t size) {
  
  tool_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ToolDetails.tool_name)
}
inline std::string* ToolDetails::_internal_mutable_tool_name() {
  
  return tool_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ToolDetails::release_tool_name() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ToolDetails.tool_name)
  return tool_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToolDetails::set_allocated_tool_name(std::string* tool_name) {
  if (tool_name != nullptr) {
    
  } else {
    
  }
  tool_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tool_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ToolDetails.tool_name)
}

// string tool_version = 2;
inline void ToolDetails::clear_tool_version() {
  tool_version_.ClearToEmpty();
}
inline const std::string& ToolDetails::tool_version() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.ToolDetails.tool_version)
  return _internal_tool_version();
}
inline void ToolDetails::set_tool_version(const std::string& value) {
  _internal_set_tool_version(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.ToolDetails.tool_version)
}
inline std::string* ToolDetails::mutable_tool_version() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.ToolDetails.tool_version)
  return _internal_mutable_tool_version();
}
inline const std::string& ToolDetails::_internal_tool_version() const {
  return tool_version_.Get();
}
inline void ToolDetails::_internal_set_tool_version(const std::string& value) {
  
  tool_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ToolDetails::set_tool_version(std::string&& value) {
  
  tool_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.ToolDetails.tool_version)
}
inline void ToolDetails::set_tool_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tool_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.ToolDetails.tool_version)
}
inline void ToolDetails::set_tool_version(const char* value,
    size_t size) {
  
  tool_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.ToolDetails.tool_version)
}
inline std::string* ToolDetails::_internal_mutable_tool_version() {
  
  return tool_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ToolDetails::release_tool_version() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.ToolDetails.tool_version)
  return tool_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ToolDetails::set_allocated_tool_version(std::string* tool_version) {
  if (tool_version != nullptr) {
    
  } else {
    
  }
  tool_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tool_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.ToolDetails.tool_version)
}

// -------------------------------------------------------------------

// RequestMetadata

// .build.bazel.remote.execution.v2.ToolDetails tool_details = 1;
inline bool RequestMetadata::_internal_has_tool_details() const {
  return this != internal_default_instance() && tool_details_ != nullptr;
}
inline bool RequestMetadata::has_tool_details() const {
  return _internal_has_tool_details();
}
inline void RequestMetadata::clear_tool_details() {
  if (GetArena() == nullptr && tool_details_ != nullptr) {
    delete tool_details_;
  }
  tool_details_ = nullptr;
}
inline const ::build::bazel::remote::execution::v2::ToolDetails& RequestMetadata::_internal_tool_details() const {
  const ::build::bazel::remote::execution::v2::ToolDetails* p = tool_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::build::bazel::remote::execution::v2::ToolDetails&>(
      ::build::bazel::remote::execution::v2::_ToolDetails_default_instance_);
}
inline const ::build::bazel::remote::execution::v2::ToolDetails& RequestMetadata::tool_details() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.RequestMetadata.tool_details)
  return _internal_tool_details();
}
inline void RequestMetadata::unsafe_arena_set_allocated_tool_details(
    ::build::bazel::remote::execution::v2::ToolDetails* tool_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tool_details_);
  }
  tool_details_ = tool_details;
  if (tool_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:build.bazel.remote.execution.v2.RequestMetadata.tool_details)
}
inline ::build::bazel::remote::execution::v2::ToolDetails* RequestMetadata::release_tool_details() {
  
  ::build::bazel::remote::execution::v2::ToolDetails* temp = tool_details_;
  tool_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::build::bazel::remote::execution::v2::ToolDetails* RequestMetadata::unsafe_arena_release_tool_details() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.RequestMetadata.tool_details)
  
  ::build::bazel::remote::execution::v2::ToolDetails* temp = tool_details_;
  tool_details_ = nullptr;
  return temp;
}
inline ::build::bazel::remote::execution::v2::ToolDetails* RequestMetadata::_internal_mutable_tool_details() {
  
  if (tool_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::build::bazel::remote::execution::v2::ToolDetails>(GetArena());
    tool_details_ = p;
  }
  return tool_details_;
}
inline ::build::bazel::remote::execution::v2::ToolDetails* RequestMetadata::mutable_tool_details() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.RequestMetadata.tool_details)
  return _internal_mutable_tool_details();
}
inline void RequestMetadata::set_allocated_tool_details(::build::bazel::remote::execution::v2::ToolDetails* tool_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tool_details_;
  }
  if (tool_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tool_details);
    if (message_arena != submessage_arena) {
      tool_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tool_details, submessage_arena);
    }
    
  } else {
    
  }
  tool_details_ = tool_details;
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.RequestMetadata.tool_details)
}

// string action_id = 2;
inline void RequestMetadata::clear_action_id() {
  action_id_.ClearToEmpty();
}
inline const std::string& RequestMetadata::action_id() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.RequestMetadata.action_id)
  return _internal_action_id();
}
inline void RequestMetadata::set_action_id(const std::string& value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.RequestMetadata.action_id)
}
inline std::string* RequestMetadata::mutable_action_id() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.RequestMetadata.action_id)
  return _internal_mutable_action_id();
}
inline const std::string& RequestMetadata::_internal_action_id() const {
  return action_id_.Get();
}
inline void RequestMetadata::_internal_set_action_id(const std::string& value) {
  
  action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestMetadata::set_action_id(std::string&& value) {
  
  action_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.RequestMetadata.action_id)
}
inline void RequestMetadata::set_action_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.RequestMetadata.action_id)
}
inline void RequestMetadata::set_action_id(const char* value,
    size_t size) {
  
  action_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.RequestMetadata.action_id)
}
inline std::string* RequestMetadata::_internal_mutable_action_id() {
  
  return action_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestMetadata::release_action_id() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.RequestMetadata.action_id)
  return action_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMetadata::set_allocated_action_id(std::string* action_id) {
  if (action_id != nullptr) {
    
  } else {
    
  }
  action_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.RequestMetadata.action_id)
}

// string tool_invocation_id = 3;
inline void RequestMetadata::clear_tool_invocation_id() {
  tool_invocation_id_.ClearToEmpty();
}
inline const std::string& RequestMetadata::tool_invocation_id() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.RequestMetadata.tool_invocation_id)
  return _internal_tool_invocation_id();
}
inline void RequestMetadata::set_tool_invocation_id(const std::string& value) {
  _internal_set_tool_invocation_id(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.RequestMetadata.tool_invocation_id)
}
inline std::string* RequestMetadata::mutable_tool_invocation_id() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.RequestMetadata.tool_invocation_id)
  return _internal_mutable_tool_invocation_id();
}
inline const std::string& RequestMetadata::_internal_tool_invocation_id() const {
  return tool_invocation_id_.Get();
}
inline void RequestMetadata::_internal_set_tool_invocation_id(const std::string& value) {
  
  tool_invocation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestMetadata::set_tool_invocation_id(std::string&& value) {
  
  tool_invocation_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.RequestMetadata.tool_invocation_id)
}
inline void RequestMetadata::set_tool_invocation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tool_invocation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.RequestMetadata.tool_invocation_id)
}
inline void RequestMetadata::set_tool_invocation_id(const char* value,
    size_t size) {
  
  tool_invocation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.RequestMetadata.tool_invocation_id)
}
inline std::string* RequestMetadata::_internal_mutable_tool_invocation_id() {
  
  return tool_invocation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestMetadata::release_tool_invocation_id() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.RequestMetadata.tool_invocation_id)
  return tool_invocation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMetadata::set_allocated_tool_invocation_id(std::string* tool_invocation_id) {
  if (tool_invocation_id != nullptr) {
    
  } else {
    
  }
  tool_invocation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tool_invocation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.RequestMetadata.tool_invocation_id)
}

// string correlated_invocations_id = 4;
inline void RequestMetadata::clear_correlated_invocations_id() {
  correlated_invocations_id_.ClearToEmpty();
}
inline const std::string& RequestMetadata::correlated_invocations_id() const {
  // @@protoc_insertion_point(field_get:build.bazel.remote.execution.v2.RequestMetadata.correlated_invocations_id)
  return _internal_correlated_invocations_id();
}
inline void RequestMetadata::set_correlated_invocations_id(const std::string& value) {
  _internal_set_correlated_invocations_id(value);
  // @@protoc_insertion_point(field_set:build.bazel.remote.execution.v2.RequestMetadata.correlated_invocations_id)
}
inline std::string* RequestMetadata::mutable_correlated_invocations_id() {
  // @@protoc_insertion_point(field_mutable:build.bazel.remote.execution.v2.RequestMetadata.correlated_invocations_id)
  return _internal_mutable_correlated_invocations_id();
}
inline const std::string& RequestMetadata::_internal_correlated_invocations_id() const {
  return correlated_invocations_id_.Get();
}
inline void RequestMetadata::_internal_set_correlated_invocations_id(const std::string& value) {
  
  correlated_invocations_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RequestMetadata::set_correlated_invocations_id(std::string&& value) {
  
  correlated_invocations_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:build.bazel.remote.execution.v2.RequestMetadata.correlated_invocations_id)
}
inline void RequestMetadata::set_correlated_invocations_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  correlated_invocations_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:build.bazel.remote.execution.v2.RequestMetadata.correlated_invocations_id)
}
inline void RequestMetadata::set_correlated_invocations_id(const char* value,
    size_t size) {
  
  correlated_invocations_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:build.bazel.remote.execution.v2.RequestMetadata.correlated_invocations_id)
}
inline std::string* RequestMetadata::_internal_mutable_correlated_invocations_id() {
  
  return correlated_invocations_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RequestMetadata::release_correlated_invocations_id() {
  // @@protoc_insertion_point(field_release:build.bazel.remote.execution.v2.RequestMetadata.correlated_invocations_id)
  return correlated_invocations_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestMetadata::set_allocated_correlated_invocations_id(std::string* correlated_invocations_id) {
  if (correlated_invocations_id != nullptr) {
    
  } else {
    
  }
  correlated_invocations_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), correlated_invocations_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:build.bazel.remote.execution.v2.RequestMetadata.correlated_invocations_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace execution
}  // namespace remote
}  // namespace bazel
}  // namespace build

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::build::bazel::remote::execution::v2::ExecutionStage_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::build::bazel::remote::execution::v2::ExecutionStage_Value>() {
  return ::build::bazel::remote::execution::v2::ExecutionStage_Value_descriptor();
}
template <> struct is_proto_enum< ::build::bazel::remote::execution::v2::DigestFunction_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::build::bazel::remote::execution::v2::DigestFunction_Value>() {
  return ::build::bazel::remote::execution::v2::DigestFunction_Value_descriptor();
}
template <> struct is_proto_enum< ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value>() {
  return ::build::bazel::remote::execution::v2::SymlinkAbsolutePathStrategy_Value_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_build_2fbazel_2fremote_2fexecution_2fv2_2fremote_5fexecution_2eproto
