//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//-V::568,590
#include "CoreMinimal.h"
#include "Misc/CoreMiscDefines.h"

THIRD_PARTY_INCLUDES_START
UE_PUSH_MACRO("TEXT")
#undef TEXT

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: build/bazel/semver/semver.proto

#include "build/bazel/semver/semver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace build {
namespace bazel {
namespace semver {
constexpr SemVer::SemVer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prerelease_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , major_(0)
  , minor_(0)
  , patch_(0){}
struct SemVerDefaultTypeInternal {
  constexpr SemVerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SemVerDefaultTypeInternal() {}
  union {
    SemVer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SemVerDefaultTypeInternal _SemVer_default_instance_;
}  // namespace semver
}  // namespace bazel
}  // namespace build
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_build_2fbazel_2fsemver_2fsemver_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_build_2fbazel_2fsemver_2fsemver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_build_2fbazel_2fsemver_2fsemver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_build_2fbazel_2fsemver_2fsemver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::build::bazel::semver::SemVer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::build::bazel::semver::SemVer, major_),
  PROTOBUF_FIELD_OFFSET(::build::bazel::semver::SemVer, minor_),
  PROTOBUF_FIELD_OFFSET(::build::bazel::semver::SemVer, patch_),
  PROTOBUF_FIELD_OFFSET(::build::bazel::semver::SemVer, prerelease_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::build::bazel::semver::SemVer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::build::bazel::semver::_SemVer_default_instance_),
};

const char descriptor_table_protodef_build_2fbazel_2fsemver_2fsemver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037build/bazel/semver/semver.proto\022\022build"
  ".bazel.semver\"I\n\006SemVer\022\r\n\005major\030\001 \001(\005\022\r"
  "\n\005minor\030\002 \001(\005\022\r\n\005patch\030\003 \001(\005\022\022\n\nprerelea"
  "se\030\004 \001(\tBF\n\022build.bazel.semverB\013SemverPr"
  "otoP\001Z\006semver\242\002\003SMV\252\002\022Build.Bazel.Semver"
  "b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto = {
  false, false, 208, descriptor_table_protodef_build_2fbazel_2fsemver_2fsemver_2eproto, "build/bazel/semver/semver.proto", 
  &descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_build_2fbazel_2fsemver_2fsemver_2eproto::offsets,
  file_level_metadata_build_2fbazel_2fsemver_2fsemver_2eproto, file_level_enum_descriptors_build_2fbazel_2fsemver_2fsemver_2eproto, file_level_service_descriptors_build_2fbazel_2fsemver_2fsemver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto);
  return descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_build_2fbazel_2fsemver_2fsemver_2eproto(&descriptor_table_build_2fbazel_2fsemver_2fsemver_2eproto);
namespace build {
namespace bazel {
namespace semver {

// ===================================================================

class SemVer::_Internal {
 public:
};

SemVer::SemVer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:build.bazel.semver.SemVer)
}
SemVer::SemVer(const SemVer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prerelease_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prerelease().empty()) {
    prerelease_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prerelease(), 
      GetArena());
  }
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:build.bazel.semver.SemVer)
}

void SemVer::SharedCtor() {
prerelease_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

SemVer::~SemVer() {
  // @@protoc_insertion_point(destructor:build.bazel.semver.SemVer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SemVer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prerelease_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SemVer::ArenaDtor(void* object) {
  SemVer* _this = reinterpret_cast< SemVer* >(object);
  (void)_this;
}
void SemVer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SemVer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SemVer::Clear() {
// @@protoc_insertion_point(message_clear_start:build.bazel.semver.SemVer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prerelease_.ClearToEmpty();
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SemVer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prerelease = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prerelease();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "build.bazel.semver.SemVer.prerelease"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SemVer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:build.bazel.semver.SemVer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  // int32 patch = 3;
  if (this->patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  // string prerelease = 4;
  if (this->prerelease().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prerelease().data(), static_cast<int>(this->_internal_prerelease().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "build.bazel.semver.SemVer.prerelease");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_prerelease(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:build.bazel.semver.SemVer)
  return target;
}

size_t SemVer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:build.bazel.semver.SemVer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prerelease = 4;
  if (this->prerelease().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prerelease());
  }

  // int32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_major());
  }

  // int32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minor());
  }

  // int32 patch = 3;
  if (this->patch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_patch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SemVer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:build.bazel.semver.SemVer)
  GOOGLE_DCHECK_NE(&from, this);
  const SemVer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SemVer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:build.bazel.semver.SemVer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:build.bazel.semver.SemVer)
    MergeFrom(*source);
  }
}

void SemVer::MergeFrom(const SemVer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:build.bazel.semver.SemVer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prerelease().size() > 0) {
    _internal_set_prerelease(from._internal_prerelease());
  }
  if (from.major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from.minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from.patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
}

void SemVer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:build.bazel.semver.SemVer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SemVer::CopyFrom(const SemVer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:build.bazel.semver.SemVer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SemVer::IsInitialized() const {
  return true;
}

void SemVer::InternalSwap(SemVer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prerelease_.Swap(&other->prerelease_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SemVer, patch_)
      + sizeof(SemVer::patch_)
      - PROTOBUF_FIELD_OFFSET(SemVer, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SemVer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace semver
}  // namespace bazel
}  // namespace build
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::build::bazel::semver::SemVer* Arena::CreateMaybeMessage< ::build::bazel::semver::SemVer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::build::bazel::semver::SemVer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

UE_POP_MACRO("TEXT")
THIRD_PARTY_INCLUDES_END
