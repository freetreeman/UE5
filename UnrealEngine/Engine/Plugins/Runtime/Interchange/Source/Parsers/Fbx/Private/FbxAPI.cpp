// Copyright Epic Games, Inc. All Rights Reserved.

#include "FbxAPI.h"

#include "CoreMinimal.h"
#include "FbxConvert.h"
#include "FbxHelper.h"
#include "FbxInclude.h"
#include "FbxMaterial.h"
#include "FbxMesh.h"
#include "FbxScene.h"
#include "InterchangeMaterialNode.h"
#include "InterchangeTextureNode.h"
#include "Nodes/InterchangeBaseNodeContainer.h"

namespace UE
{
	namespace Interchange
	{
		namespace Private
		{
			FFbxParser::~FFbxParser()
			{
				PayloadContexts.Empty();
			}

			bool FFbxParser::LoadFbxFile(const FString& Filename, TArray<FString>& JSonErrorMessages)
			{
				SourceFilename = Filename;
				int32 SDKMajor, SDKMinor, SDKRevision;
				
				//The first thing to do is to create the FBX Manager which is the object allocator for almost all the classes in the SDK
				SDKManager = FbxManager::Create();
				if (!SDKManager)
				{
					JSonErrorMessages.Add(TEXT("{\"Msg\" : {\"Type\" : \"Error\",\n\"Msg\" : \"Cannot create fbx sdk manager\"}}"));
					return false;
				}

				//Create an IOSettings object. This object holds all import/export settings.
				FbxIOSettings* ios = FbxIOSettings::Create(SDKManager, IOSROOT);
				ios->SetBoolProp(IMP_FBX_MATERIAL, true);
				ios->SetBoolProp(IMP_FBX_TEXTURE, true);
				ios->SetBoolProp(IMP_FBX_LINK, true);
				ios->SetBoolProp(IMP_FBX_SHAPE, true);
				ios->SetBoolProp(IMP_FBX_GOBO, true);
				ios->SetBoolProp(IMP_FBX_ANIMATION, true);
				ios->SetBoolProp(IMP_SKINS, true);
				ios->SetBoolProp(IMP_DEFORMATION, true);
				ios->SetBoolProp(IMP_FBX_GLOBAL_SETTINGS, true);
				ios->SetBoolProp(IMP_TAKE, true);
				SDKManager->SetIOSettings(ios);

				SDKGeometryConverter = new FbxGeometryConverter(SDKManager);

				//Create an FBX scene. This object holds most objects imported/exported from/to files.
				SDKScene = FbxScene::Create(SDKManager, "My Scene");
				if (!SDKScene)
				{
					JSonErrorMessages.Add(TEXT("{\"Msg\" : {\"Type\" : \"Error\",\n\"Msg\" : \"Cannot create fbx sdk scene\"}}"));
					return false;
				}
				
				// Create an importer.
				SDKImporter = FbxImporter::Create(SDKManager, "");

				// Get the version number of the FBX files generated by the
				// version of FBX SDK that you are using.
				FbxManager::GetFileFormatVersion(SDKMajor, SDKMinor, SDKRevision);

				// Initialize the importer by providing a filename.
				const bool bImportStatus = SDKImporter->Initialize(TCHAR_TO_UTF8(*Filename));
				if (!bImportStatus)
				{
					JSonErrorMessages.Add(TEXT("{\"Msg\" : {\"Type\" : \"Error\",\n\"Msg\" : \"Cannot open fbx filename\"}}"));
					return false;
				}

				bool bStatus = SDKImporter->Import(SDKScene);

				const FbxGlobalSettings& GlobalSettings = SDKScene->GetGlobalSettings();
				FbxTime::EMode TimeMode = GlobalSettings.GetTimeMode();
				//Set the original framerate from the current fbx file
				float FbxFramerate = FbxTime::GetFrameRate(TimeMode);

				//We always convert scene to UE axis and units
				FFbxConvert::ConvertScene(SDKScene);

				return true;
			}

			void FFbxParser::FillContainerWithFbxScene(UInterchangeBaseNodeContainer& NodeContainer, TArray<FString>& JSonErrorMessages)
			{
				CleanupFbxData(JSonErrorMessages);
				FFbxMaterial::AddAllTextures(SDKScene, NodeContainer, JSonErrorMessages);
				FFbxMaterial::AddAllMaterials(SDKScene, NodeContainer, JSonErrorMessages);
				FFbxMesh::AddAllMeshes(SDKScene, SDKGeometryConverter, NodeContainer, JSonErrorMessages, PayloadContexts);
				FFbxScene::AddHierarchy(SDKScene, NodeContainer, JSonErrorMessages);
			}

			bool FFbxParser::FetchPayloadData(const FString& PayloadKey, const FString& PayloadFilepath, TArray<FString>& JSonErrorMessages)
			{
				if (!PayloadContexts.Contains(PayloadKey))
				{
					JSonErrorMessages.Add(TEXT("{\"Msg\" : {\"Type\" : \"Error\",\n\"Msg\" : \"Cannot retrieve payload, payload key doesnt have any context.\"}}"));
					return false;
				}

				TSharedPtr<FPayloadContextBase>& PayloadContext = PayloadContexts.FindChecked(PayloadKey);
				return PayloadContext->FetchPayloadToFile(PayloadFilepath, JSonErrorMessages);
			}

			void FFbxParser::CleanupFbxData(TArray<FString>& JSonErrorMessages)
			{
				//////////////////////////////////////////////////////////////////////////
				// Make sure there is a valid bind pose

				//Find root bones
				const int32 Default_NbPoses = SDKScene->GetFbxManager()->GetBindPoseCount(SDKScene);
				// If there are no BindPoses, the following will generate them.
				SDKScene->GetFbxManager()->CreateMissingBindPoses(SDKScene);
				//if we created missing bind poses, update the number of bind poses
				const int32 NbPoses = SDKScene->GetFbxManager()->GetBindPoseCount(SDKScene);
				if (NbPoses != Default_NbPoses)
				{
					JSonErrorMessages.Add(TEXT("{\"Msg\" : {\"Type\" : \"Warning\",\n\"Msg\" : \"FbxParser: Missing bind pose, the fbx sdk create one.\"}}"));
				}

				//////////////////////////////////////////////////////////////////////////
				// Scene conversion
			}
		} //ns Private
	} //ns Interchange
} //ns UE
