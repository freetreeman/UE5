// Copyright Epic Games, Inc. All Rights Reserved.

#if NIAGARA_USE_RAYTRACING
bool											RayTracingEnabled_{ParameterName};
uint                                            MaxRayTraceCount_{ParameterName};
RWStructuredBuffer<FBasicRayData>               RWRayRequests_{ParameterName};
StructuredBuffer<FNiagaraRayTracingPayload>     IntersectionResults_{ParameterName};
RWBuffer<uint>                                  RWRayTraceCounts_{ParameterName};
#endif

void QuerySceneDepthGPU_{ParameterName}(in float3 In_SamplePos, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
	NDICollisionQuery_QuerySceneDepthGPU(In_SamplePos, Out_SceneDepth, Out_CameraPosWorld, Out_IsInsideView, Out_WorldPos, Out_WorldNormal);
}

void QueryCustomDepthGPU_{ParameterName}(in float3 In_SamplePos, out float Out_SceneDepth, out float3 Out_CameraPosWorld, out bool Out_IsInsideView, out float3 Out_WorldPos, out float3 Out_WorldNormal)
{
	NDICollisionQuery_QueryCustomDepthGPU(In_SamplePos, Out_SceneDepth, Out_CameraPosWorld, Out_IsInsideView, Out_WorldPos, Out_WorldNormal);
}

void QueryMeshDistanceFieldGPU_{ParameterName}(in float3 In_SamplePos, out float Out_DistanceToNearestSurface, out float3 Out_FieldGradient, out bool Out_IsDistanceFieldValid)
{
	NDICollisionQuery_QueryMeshDistanceFieldGPU(In_SamplePos, Out_DistanceToNearestSurface, Out_FieldGradient, Out_IsDistanceFieldValid);
}

void IssueAsyncRayTraceGpu_{ParameterName}_UEImpureCall(int In_QueryID, float3 In_TraceStart, float3 In_TraceEnd, int In_TraceChannel, out bool Out_IsQueryValid)
{
#if NIAGARA_USE_RAYTRACING
	if (RayTracingEnabled_{ParameterName})
	{
		NDICollisionQuery_IssueAsyncRayTrace(MaxRayTraceCount_{ParameterName}, RWRayRequests_{ParameterName}, RWRayTraceCounts_{ParameterName}, In_QueryID, In_TraceStart, In_TraceEnd, In_TraceChannel, Out_IsQueryValid);
	}
#else
	Out_IsQueryValid = false;
#endif
}

void ReserveRayTraceIndex_{ParameterName}_UEImpureCall(int In_TraceCount, out int Out_StartQueryID, out bool Out_IndicesValid)
{
#if NIAGARA_USE_RAYTRACING
	if (RayTracingEnabled_{ParameterName})
	{
		NDICollisionQuery_ReserveRayTraceIndex(MaxRayTraceCount_{ParameterName}, RWRayTraceCounts_{ParameterName}, In_TraceCount, Out_StartQueryID, Out_IndicesValid);
	}
#else
	Out_IndicesValid = false;
#endif
}

void CreateAsyncRayTraceGpu_{ParameterName}_UEImpureCall(float3 In_TraceStart, float3 In_TraceEnd, int In_TraceChannel, out int Out_QueryID, out bool Out_IsQueryValid)
{
#if NIAGARA_USE_RAYTRACING
	if (RayTracingEnabled_{ParameterName})
	{
		NDICollisionQuery_CreateAsyncRayTrace(MaxRayTraceCount_{ParameterName}, RWRayRequests_{ParameterName}, RWRayTraceCounts_{ParameterName}, In_TraceStart, In_TraceEnd, In_TraceChannel, Out_QueryID, Out_IsQueryValid);
	}
#else
	Out_IsQueryValid = false;
#endif
}

void ReadAsyncRayTraceGpu_{ParameterName}(int In_PreviousFrameQueryID, out bool Out_CollisionValid, out float Out_CollisionDistance, out float3 Out_CollisionPosWorld, out float3 Out_CollisionNormal)
{
#if NIAGARA_USE_RAYTRACING
	if (RayTracingEnabled_{ParameterName})
	{
		NDICollisionQuery_ReadAsyncRayTrace(MaxRayTraceCount_{ParameterName}, IntersectionResults_{ParameterName}, In_PreviousFrameQueryID, Out_CollisionValid, Out_CollisionDistance, Out_CollisionPosWorld, Out_CollisionNormal);
	}
#else
	Out_CollisionValid = false;
#endif
}